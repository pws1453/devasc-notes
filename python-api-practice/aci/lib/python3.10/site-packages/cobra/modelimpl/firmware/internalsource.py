# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class InternalSource(Mo):
    """
    The internal source of firmware images, which contains images that are pre-packaged into the controller.

    """

    meta = ClassMeta("cobra.model.firmware.InternalSource")

    meta.moClassName = "firmwareInternalSource"
    meta.rnFormat = "isrc-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Internal Firmware Source"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x20000000001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.firmware.Download")
    meta.childClasses.add("cobra.model.firmware.RtIsrc")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.firmware.Download", "download-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.firmware.RtIsrc", "rtisrc"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.firmware.RepoP")

    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Comp")
    meta.superClasses.add("cobra.model.firmware.Source")

    meta.rnPrefixes = [
        ('isrc-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 37320, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "authPass", "authPass", 578, PropCategory.REGULAR)
    prop.label = "Authentication Type"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "password"
    prop._addConstant("key", "key", 1)
    prop._addConstant("password", "password", 0)
    meta.props.add("authPass", prop)

    prop = PropMeta("str", "authType", "authType", 33581, PropCategory.REGULAR)
    prop.label = "Authentication Type Choice"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "usePassword"
    prop._addConstant("usePassword", "use-password", 0)
    prop._addConstant("useSshKeyContents", "use-ssh-public/private-key-files", 1)
    meta.props.add("authType", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 5582, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dnldTaskFlip", "dnldTaskFlip", 52394, PropCategory.REGULAR)
    prop.label = "Variable to reuse download task"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = True
    prop.defaultValueStr = "yes"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("dnldTaskFlip", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 39459, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "identityPrivateKeyContents", "identityPrivateKeyContents", 33584, PropCategory.REGULAR)
    prop.label = "SSH Private Key contents for datatransfer"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("identityPrivateKeyContents", prop)

    prop = PropMeta("str", "identityPrivateKeyPassphrase", "identityPrivateKeyPassphrase", 33582, PropCategory.REGULAR)
    prop.label = "SSH Private Key Passphrase"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    prop.defaultValue = ""
    prop.defaultValueStr = ""
    meta.props.add("identityPrivateKeyPassphrase", prop)

    prop = PropMeta("str", "identityPublicKeyContents", "identityPublicKeyContents", 33583, PropCategory.REGULAR)
    prop.label = "SSH Public Key contents for datatransfer"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("identityPublicKeyContents", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "loadCatalogIfExistsAndNewer", "loadCatalogIfExistsAndNewer", 15457, PropCategory.REGULAR)
    prop.label = "Load contained catalog if exists and newer"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = True
    prop.defaultValueStr = "yes"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("loadCatalogIfExistsAndNewer", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 13831, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 6522, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "password", "password", 579, PropCategory.REGULAR)
    prop.label = "Password"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isPassword = True
    meta.props.add("password", prop)

    prop = PropMeta("str", "pollingInterval", "pollingInterval", 580, PropCategory.REGULAR)
    prop.label = "Polling Interval"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("pollingInterval", prop)

    prop = PropMeta("str", "proto", "proto", 575, PropCategory.REGULAR)
    prop.label = "Protocol"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "scp"
    prop._addConstant("http", "http", 1)
    prop._addConstant("local", "factory-installed", 3)
    prop._addConstant("scp", "secure-copy", 0)
    prop._addConstant("usbkey", "usb-key", 2)
    meta.props.add("proto", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "url", "url", 576, PropCategory.REGULAR)
    prop.label = "URL"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("url", prop)

    prop = PropMeta("str", "user", "user", 577, PropCategory.REGULAR)
    prop.label = "Username"
    prop.isConfig = True
    prop.isAdmin = True
    prop.regex = ['[a-zA-Z0-9][a-zA-Z0-9_.-]{1,31}']
    meta.props.add("user", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

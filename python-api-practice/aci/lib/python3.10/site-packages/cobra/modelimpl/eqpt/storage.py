# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Storage(Mo):
    """
    The storage of the controller.

    """

    meta = ClassMeta("cobra.model.eqpt.Storage")

    meta.moClassName = "eqptStorage"
    meta.rnFormat = "p-[%(mount)s]-f-[%(fileSystem)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Storage Equipment"
    meta.writeAccessMask = 0x80080000000001
    meta.readAccessMask = 0x80080000000001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.eqpt.Ch")

    meta.superClasses.add("cobra.model.naming.NamedObject")

    meta.rnPrefixes = [
        ('p-', True),
        ('-f-', True),
    ]

    prop = PropMeta("str", "available", "available", 716, PropCategory.REGULAR)
    prop.label = "Capacity Available"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("available", prop)

    prop = PropMeta("str", "blocks", "blocks", 714, PropCategory.REGULAR)
    prop.label = "Blocks"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("blocks", prop)

    prop = PropMeta("str", "capUtilized", "capUtilized", 717, PropCategory.REGULAR)
    prop.label = "Capacity Utilized"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("capUtilized", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "device", "device", 52046, PropCategory.REGULAR)
    prop.label = "Device"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("device", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "failReason", "failReason", 720, PropCategory.REGULAR)
    prop.label = "Failure Reason"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("failReason", prop)

    prop = PropMeta("str", "fileSystem", "fileSystem", 713, PropCategory.REGULAR)
    prop.label = "File System"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 512)]
    meta.props.add("fileSystem", prop)

    prop = PropMeta("str", "firmwareVersion", "firmwareVersion", 52043, PropCategory.REGULAR)
    prop.label = "Firmware Version"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("firmwareVersion", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "mediaWearout", "mediaWearout", 33155, PropCategory.REGULAR)
    prop.label = "Media Wearout Indicator"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("mediaWearout", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "model", "model", 52045, PropCategory.REGULAR)
    prop.label = "Model"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("model", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 13871, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "mount", "mount", 718, PropCategory.REGULAR)
    prop.label = "Mounted On"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 512)]
    meta.props.add("mount", prop)

    prop = PropMeta("str", "name", "name", 5577, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "operSt", "operSt", 719, PropCategory.REGULAR)
    prop.label = "Operational Status"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("absent", "absent", 3)
    prop._addConstant("fail", "fail", 2)
    prop._addConstant("mismatch", "mismatch", 5)
    prop._addConstant("ok", "ok", 1)
    prop._addConstant("shut", "shut", 4)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "serial", "serial", 52044, PropCategory.REGULAR)
    prop.label = "serial"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("serial", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "used", "used", 715, PropCategory.REGULAR)
    prop.label = "Capacity Used"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("used", prop)

    meta.namingProps.append(getattr(meta.props, "mount"))
    getattr(meta.props, "mount").needDelimiter = True
    meta.namingProps.append(getattr(meta.props, "fileSystem"))
    getattr(meta.props, "fileSystem").needDelimiter = True

    def __init__(self, parentMoOrDn, mount, fileSystem, markDirty=True, **creationProps):
        namingVals = [mount, fileSystem]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class SysC(Mo):
    """
    The system controller card.

    """

    meta = ClassMeta("cobra.model.eqpt.SysC")

    meta.moClassName = "eqptSysC"
    meta.rnFormat = "sc"
    meta.category = MoCategory.REGULAR
    meta.label = "System Controller Module"
    meta.writeAccessMask = 0x80080000000001
    meta.readAccessMask = 0x880080000000001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.eqpt.SpromLc")
    meta.childClasses.add("cobra.model.eqpt.FruPowerHist1w")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.firmware.CardRunning")
    meta.childClasses.add("cobra.model.eqpt.FruPowerHist15min")
    meta.childClasses.add("cobra.model.eqpt.RtSysCOdDiag")
    meta.childClasses.add("cobra.model.eqpt.FruPowerHist1h")
    meta.childClasses.add("cobra.model.tag.Inst")
    meta.childClasses.add("cobra.model.eqpt.FruPower1mo")
    meta.childClasses.add("cobra.model.eqpt.FruPower1year")
    meta.childClasses.add("cobra.model.eqpt.CPU")
    meta.childClasses.add("cobra.model.eqpt.FruPower1w")
    meta.childClasses.add("cobra.model.eqpt.FruPowerHist1year")
    meta.childClasses.add("cobra.model.tag.AliasDelInst")
    meta.childClasses.add("cobra.model.eqpt.EpcP")
    meta.childClasses.add("cobra.model.eqpt.FruPower1h")
    meta.childClasses.add("cobra.model.eqpt.FruPower1d")
    meta.childClasses.add("cobra.model.eqpt.Obfl")
    meta.childClasses.add("cobra.model.eqpt.RsMonPolModulePolCons")
    meta.childClasses.add("cobra.model.eqpt.Fpga")
    meta.childClasses.add("cobra.model.eqpt.FruPower5min")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.eqpt.FruPowerHist1qtr")
    meta.childClasses.add("cobra.model.eqpt.Sensor")
    meta.childClasses.add("cobra.model.eqpt.IndLed")
    meta.childClasses.add("cobra.model.eqpt.LocLed")
    meta.childClasses.add("cobra.model.eqpt.Asic")
    meta.childClasses.add("cobra.model.eqpt.Dimm")
    meta.childClasses.add("cobra.model.tag.ExtMngdInst")
    meta.childClasses.add("cobra.model.eqpt.FruPower1qtr")
    meta.childClasses.add("cobra.model.tag.AliasInst")
    meta.childClasses.add("cobra.model.eqpt.FruPowerHist5min")
    meta.childClasses.add("cobra.model.eqpt.FruPowerHist1mo")
    meta.childClasses.add("cobra.model.eqpt.FruPower15min")
    meta.childClasses.add("cobra.model.eqpt.FruPowerHist1d")
    meta.childClasses.add("cobra.model.eqpt.EobcP")
    meta.childClasses.add("cobra.model.eqpt.Flash")

    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.RsMonPolModulePolCons", "rsmonPolModulePolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FruPowerHist15min", "HDeqptFruPower15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FruPowerHist1year", "HDeqptFruPower1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FruPower1year", "CDeqptFruPower1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FruPowerHist1qtr", "HDeqptFruPower1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FruPowerHist5min", "HDeqptFruPower5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FruPower15min", "CDeqptFruPower15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FruPower5min", "CDeqptFruPower5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FruPower1qtr", "CDeqptFruPower1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FruPowerHist1mo", "HDeqptFruPower1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FruPowerHist1w", "HDeqptFruPower1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FruPowerHist1h", "HDeqptFruPower1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FruPower1mo", "CDeqptFruPower1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FruPowerHist1d", "HDeqptFruPower1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FruPower1w", "CDeqptFruPower1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FruPower1h", "CDeqptFruPower1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FruPower1d", "CDeqptFruPower1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.RtSysCOdDiag", "rtsysCOdDiag"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasDelInst", "aliasdel-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.firmware.CardRunning", "running"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.Sensor", "sensor-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.IndLed", "indled-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.LocLed", "locled-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.ExtMngdInst", "extmngd"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.Fpga", "fpga-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.Asic", "asic-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.Dimm", "dimm-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasInst", "alias"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.EobcP", "eobc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.Flash", "flash"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.SpromLc", "splc"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Inst", "tag-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.CPU", "cpu-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.EpcP", "epc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.Obfl", "obfl"))

    meta.parentClasses.add("cobra.model.eqpt.SysCSlot")

    meta.superClasses.add("cobra.model.eqpt.Item")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.eqpt.Card")
    meta.superClasses.add("cobra.model.eqpt.Comp")
    meta.superClasses.add("cobra.model.eqpt.Fru")

    meta.rnPrefixes = [
        ('sc', False),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cimcVersion", "cimcVersion", 56701, PropCategory.REGULAR)
    prop.label = "CIMC version"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("cimcVersion", prop)

    prop = PropMeta("str", "descr", "descr", 5597, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "hwVer", "hwVer", 15577, PropCategory.REGULAR)
    prop.label = "Hardware Version"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("hwVer", prop)

    prop = PropMeta("str", "id", "id", 3505, PropCategory.REGULAR)
    prop.label = "ID"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "macB", "macB", 3324, PropCategory.REGULAR)
    prop.label = "MAC Address Base"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("macB", prop)

    prop = PropMeta("str", "macL", "macL", 3325, PropCategory.REGULAR)
    prop.label = "MAC Address Length"
    prop.isOper = True
    meta.props.add("macL", prop)

    prop = PropMeta("str", "mfgTm", "mfgTm", 5596, PropCategory.REGULAR)
    prop.label = "Manufacturing Time"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "not-applicable"
    prop._addConstant("not-applicable", "n/a", 0)
    meta.props.add("mfgTm", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "model", "model", 5592, PropCategory.REGULAR)
    prop.label = "Model"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("model", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14514, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "numP", "numP", 3320, PropCategory.REGULAR)
    prop.label = "Number of Ports"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 256)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("numP", prop)

    prop = PropMeta("str", "operSt", "operSt", 3317, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("absent", "absent", 2)
    prop._addConstant("dnld", "downloading", 15)
    prop._addConstant("err-pwr-down", "errored-powered-down", 11)
    prop._addConstant("fail", "failed", 4)
    prop._addConstant("ha-seq-fail", "ha-sequence-number-failed", 18)
    prop._addConstant("init", "initializing", 13)
    prop._addConstant("inserted", "inserted", 1)
    prop._addConstant("mismatch", "mismatch", 3)
    prop._addConstant("offline", "offline", 8)
    prop._addConstant("online", "online", 7)
    prop._addConstant("present", "present", 5)
    prop._addConstant("pwr-down", "powered-down", 10)
    prop._addConstant("pwr-up", "powered-up", 9)
    prop._addConstant("reg-failure", "registration-failed", 14)
    prop._addConstant("removed", "removed", 6)
    prop._addConstant("srg-fail", "srg-failed", 17)
    prop._addConstant("testing", "testing", 12)
    prop._addConstant("unknown", "unknown", 0)
    prop._addConstant("upg", "upgrading", 16)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "pwrSt", "pwrSt", 3327, PropCategory.REGULAR)
    prop.label = "Power State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("deny", "deny", 3)
    prop._addConstant("multi-boot-fail", "multiple-boot-failure", 4)
    prop._addConstant("off", "off", 1)
    prop._addConstant("on", "on", 2)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("pwrSt", prop)

    prop = PropMeta("str", "rdSt", "rdSt", 3318, PropCategory.REGULAR)
    prop.label = "Redundancy State"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("active", "active", 1)
    prop._addConstant("standby", "standby", 2)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("rdSt", prop)

    prop = PropMeta("str", "rev", "rev", 5593, PropCategory.REGULAR)
    prop.label = "Revision"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    prop.defaultValue = "0"
    prop.defaultValueStr = "0"
    meta.props.add("rev", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "ser", "ser", 5594, PropCategory.REGULAR)
    prop.label = "Serial Number"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("ser", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "swCId", "swCId", 3319, PropCategory.REGULAR)
    prop.label = "Software Module ID"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("swCId", prop)

    prop = PropMeta("str", "type", "type", 3331, PropCategory.REGULAR)
    prop.label = "Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 4
    prop.defaultValueStr = "sysctrlcard"
    prop._addConstant("extchcard", "extension-chassis-card", 5)
    prop._addConstant("fabriccard", "fabric-card", 3)
    prop._addConstant("fan-tray", "fan-tray", 6)
    prop._addConstant("linecard", "line-card", 2)
    prop._addConstant("motherboard", "motherboard", 8)
    prop._addConstant("power-supply", "power-supply", 7)
    prop._addConstant("supervisor", "supervisor", 1)
    prop._addConstant("sysctrlcard", "system-control-card", 4)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("type", prop)

    prop = PropMeta("str", "upTs", "upTs", 3326, PropCategory.REGULAR)
    prop.label = "Up Timestamp"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("upTs", prop)

    prop = PropMeta("str", "vendor", "vendor", 5595, PropCategory.REGULAR)
    prop.label = "Vendor"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    prop.defaultValue = "Cisco Systems, Inc"
    prop.defaultValueStr = "Cisco Systems, Inc"
    meta.props.add("vendor", prop)

    meta.deploymentCategory = DeploymentCategory("module", "Module")
    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EqptSlotToEPg", "EPG", "cobra.model.fv.EPg"))

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

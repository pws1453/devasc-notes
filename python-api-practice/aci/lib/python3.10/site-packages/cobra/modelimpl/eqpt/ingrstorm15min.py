# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class IngrStorm15min(Mo):
    """
    A class that represents the most current statistics for  Ingress  Storm  Ctrl in a 15 minute sampling interval.  This class updates every 5 minutes.

    """

    meta = StatsClassMeta("cobra.model.eqpt.IngrStorm15min", "Ingress Storm Ctrl")

    counter = CounterMeta("dropBytesRate", CounterCategory.GAUGE, "bytes-per-second", "Storm Ctrl Drop Bytes rate")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "dropBytesRateLast"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "dropBytesRateMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "dropBytesRateMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "dropBytesRateAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "dropBytesRateSpct"
    counter._propRefs[PropCategory.IMPLICIT_TOTAL] = "dropBytesRateTtl"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "dropBytesRateThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "dropBytesRateTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "dropBytesRateTr"
    meta._counters.append(counter)

    counter = CounterMeta("dropBytes", CounterCategory.COUNTER, "bytes", "Storm Ctrl Drop Bytes")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "dropBytesLast"
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "dropBytesCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "dropBytesPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "dropBytesMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "dropBytesMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "dropBytesAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "dropBytesSpct"
    counter._propRefs[PropCategory.IMPLICIT_BASELINE] = "dropBytesBase"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "dropBytesThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "dropBytesTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "dropBytesTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "dropBytesRate"
    meta._counters.append(counter)

    meta.moClassName = "eqptIngrStorm15min"
    meta.rnFormat = "CDeqptIngrStorm15min"
    meta.category = MoCategory.STATS_CURRENT
    meta.label = "current Ingress Storm Ctrl stats in 15 minute"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.parentClasses.add("cobra.model.pc.AggrIf")
    meta.parentClasses.add("cobra.model.l1.PhysIf")

    meta.superClasses.add("cobra.model.stats.Curr")
    meta.superClasses.add("cobra.model.eqpt.IngrStorm")
    meta.superClasses.add("cobra.model.stats.Item")

    meta.rnPrefixes = [
        ('CDeqptIngrStorm15min', False),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cnt", "cnt", 16212, PropCategory.REGULAR)
    prop.label = "Number of Collections During this Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("cnt", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dropBytesAvg", "dropBytesAvg", 18046, PropCategory.IMPLICIT_AVG)
    prop.label = "Storm Ctrl Drop Bytes average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesAvg", prop)

    prop = PropMeta("str", "dropBytesBase", "dropBytesBase", 18041, PropCategory.IMPLICIT_BASELINE)
    prop.label = "Storm Ctrl Drop Bytes baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesBase", prop)

    prop = PropMeta("str", "dropBytesCum", "dropBytesCum", 18042, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "Storm Ctrl Drop Bytes cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesCum", prop)

    prop = PropMeta("str", "dropBytesLast", "dropBytesLast", 18040, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "Storm Ctrl Drop Bytes current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesLast", prop)

    prop = PropMeta("str", "dropBytesMax", "dropBytesMax", 18045, PropCategory.IMPLICIT_MAX)
    prop.label = "Storm Ctrl Drop Bytes maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesMax", prop)

    prop = PropMeta("str", "dropBytesMin", "dropBytesMin", 18044, PropCategory.IMPLICIT_MIN)
    prop.label = "Storm Ctrl Drop Bytes minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesMin", prop)

    prop = PropMeta("str", "dropBytesPer", "dropBytesPer", 18043, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "Storm Ctrl Drop Bytes periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesPer", prop)

    prop = PropMeta("str", "dropBytesRate", "dropBytesRate", 18051, PropCategory.IMPLICIT_RATE)
    prop.label = "Storm Ctrl Drop Bytes rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesRate", prop)

    prop = PropMeta("str", "dropBytesRateAvg", "dropBytesRateAvg", 18064, PropCategory.IMPLICIT_AVG)
    prop.label = "Storm Ctrl Drop Bytes rate average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesRateAvg", prop)

    prop = PropMeta("str", "dropBytesRateLast", "dropBytesRateLast", 18061, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "Storm Ctrl Drop Bytes rate current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesRateLast", prop)

    prop = PropMeta("str", "dropBytesRateMax", "dropBytesRateMax", 18063, PropCategory.IMPLICIT_MAX)
    prop.label = "Storm Ctrl Drop Bytes rate maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesRateMax", prop)

    prop = PropMeta("str", "dropBytesRateMin", "dropBytesRateMin", 18062, PropCategory.IMPLICIT_MIN)
    prop.label = "Storm Ctrl Drop Bytes rate minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesRateMin", prop)

    prop = PropMeta("str", "dropBytesRateSpct", "dropBytesRateSpct", 18065, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "Storm Ctrl Drop Bytes rate suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesRateSpct", prop)

    prop = PropMeta("str", "dropBytesRateThr", "dropBytesRateThr", 18067, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "Storm Ctrl Drop Bytes rate thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("dropBytesRateThr", prop)

    prop = PropMeta("str", "dropBytesRateTr", "dropBytesRateTr", 18069, PropCategory.IMPLICIT_TREND)
    prop.label = "Storm Ctrl Drop Bytes rate trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesRateTr", prop)

    prop = PropMeta("str", "dropBytesRateTrBase", "dropBytesRateTrBase", 18068, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "Storm Ctrl Drop Bytes rate trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesRateTrBase", prop)

    prop = PropMeta("str", "dropBytesRateTtl", "dropBytesRateTtl", 18066, PropCategory.IMPLICIT_TOTAL)
    prop.label = "Storm Ctrl Drop Bytes rate total sum"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesRateTtl", prop)

    prop = PropMeta("str", "dropBytesSpct", "dropBytesSpct", 18047, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "Storm Ctrl Drop Bytes suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesSpct", prop)

    prop = PropMeta("str", "dropBytesThr", "dropBytesThr", 18048, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "Storm Ctrl Drop Bytes thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("dropBytesThr", prop)

    prop = PropMeta("str", "dropBytesTr", "dropBytesTr", 18050, PropCategory.IMPLICIT_TREND)
    prop.label = "Storm Ctrl Drop Bytes trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesTr", prop)

    prop = PropMeta("str", "dropBytesTrBase", "dropBytesTrBase", 18049, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "Storm Ctrl Drop Bytes trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBytesTrBase", prop)

    prop = PropMeta("str", "lastCollOffset", "lastCollOffset", 111, PropCategory.REGULAR)
    prop.label = "Collection Length"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("lastCollOffset", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "repIntvEnd", "repIntvEnd", 110, PropCategory.REGULAR)
    prop.label = "Reporting End Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvEnd", prop)

    prop = PropMeta("str", "repIntvStart", "repIntvStart", 109, PropCategory.REGULAR)
    prop.label = "Reporting Start Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvStart", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("l1EthIfToEPg", "EPG", "cobra.model.fv.EPg"))

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class AdjEp(Mo):
    """
    The LLDP neighbors, which contains the information regarding the neighbors.

    """

    meta = ClassMeta("cobra.model.lldp.AdjEp")

    meta.moClassName = "lldpAdjEp"
    meta.rnFormat = "adj-%(id)s"
    meta.category = MoCategory.REGULAR
    meta.label = "LLDP Adjacency Endpoint"
    meta.writeAccessMask = 0x6006010020001
    meta.readAccessMask = 0x6006010020001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.dcbx.AdjCtx")
    meta.childClasses.add("cobra.model.lldptlv.Ip")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.lldptlv.Text")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.lldptlv.UInt64")
    meta.childClasses.add("cobra.model.lldptlv.UByte")
    meta.childClasses.add("cobra.model.lldptlv.UInt16")
    meta.childClasses.add("cobra.model.lldptlv.UInt32")
    meta.childClasses.add("cobra.model.lldptlv.Mac")
    meta.childClasses.add("cobra.model.lldptlv.Complex")
    meta.childClasses.add("cobra.model.lldp.AdjStats")

    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlv.Complex", "complex-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldp.AdjStats", "adjstats"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dcbx.AdjCtx", "dcbxctx"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlv.UInt64", "uint64-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlv.UInt16", "uint16-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlv.UInt32", "uint32-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlv.UByte", "ubyte-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlv.Text", "text-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlv.Mac", "mac-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlv.Ip", "ip-"))

    meta.parentClasses.add("cobra.model.lldp.If")

    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.AdjEp")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.rnPrefixes = [
        ('adj-', True),
    ]

    prop = PropMeta("str", "capability", "capability", 3055, PropCategory.REGULAR)
    prop.label = "Capability"
    prop.isOper = True
    prop._addConstant("bridge", "bridge", 4)
    prop._addConstant("docsis", "docsis-cable", 64)
    prop._addConstant("other", "other", 1)
    prop._addConstant("repeater", "repeater", 2)
    prop._addConstant("router", "router", 16)
    prop._addConstant("station", "station", 128)
    prop._addConstant("telephone", "telephone", 32)
    prop._addConstant("unknown", "unknown", 0)
    prop._addConstant("wlan", "wireless-lan", 8)
    meta.props.add("capability", prop)

    prop = PropMeta("str", "chassisIdT", "chassisIdT", 3047, PropCategory.REGULAR)
    prop.label = "Chassis ID Type"
    prop.isOper = True
    prop._addConstant("chassis-comp", "chassis-component", 1)
    prop._addConstant("if-alias", "interface-alias", 2)
    prop._addConstant("if-name", "interface-name", 6)
    prop._addConstant("local", "locally-assigned", 7)
    prop._addConstant("mac", "mac-address", 4)
    prop._addConstant("nw-addr", "network-address", 5)
    prop._addConstant("port-comp", "port-component", 3)
    prop._addConstant("reserved", "reserved", 0)
    meta.props.add("chassisIdT", prop)

    prop = PropMeta("str", "chassisIdV", "chassisIdV", 3048, PropCategory.REGULAR)
    prop.label = "Chassis ID Value"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("chassisIdV", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "enCap", "enCap", 3056, PropCategory.REGULAR)
    prop.label = "Enabled Capability"
    prop.isOper = True
    prop._addConstant("bridge", "bridge", 4)
    prop._addConstant("docsis", "docsis-cable", 64)
    prop._addConstant("other", "other", 1)
    prop._addConstant("repeater", "repeater", 2)
    prop._addConstant("router", "router", 16)
    prop._addConstant("station", "station", 128)
    prop._addConstant("telephone", "telephone", 32)
    prop._addConstant("unknown", "unknown", 0)
    prop._addConstant("wlan", "wireless-lan", 8)
    meta.props.add("enCap", prop)

    prop = PropMeta("str", "id", "id", 3045, PropCategory.REGULAR)
    prop.label = "ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 10)]
    meta.props.add("id", prop)

    prop = PropMeta("str", "mgmtId", "mgmtId", 3059, PropCategory.REGULAR)
    prop.label = "Management ID"
    prop.isOper = True
    meta.props.add("mgmtId", prop)

    prop = PropMeta("str", "mgmtIp", "mgmtIp", 3057, PropCategory.REGULAR)
    prop.label = "Management Address"
    prop.isOper = True
    meta.props.add("mgmtIp", prop)

    prop = PropMeta("str", "mgmtPortMac", "mgmtPortMac", 3058, PropCategory.REGULAR)
    prop.label = "Management Port MAC"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("mgmtPortMac", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14481, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "portDesc", "portDesc", 3054, PropCategory.REGULAR)
    prop.label = "Port Description"
    prop.isOper = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("portDesc", prop)

    prop = PropMeta("str", "portIdT", "portIdT", 3049, PropCategory.REGULAR)
    prop.label = "Port ID Type"
    prop.isOper = True
    prop._addConstant("agent-ckt-id", "agent-circuit-id", 6)
    prop._addConstant("if-alias", "interface-alias", 1)
    prop._addConstant("if-name", "interface-name", 5)
    prop._addConstant("local", "locally-assigned", 7)
    prop._addConstant("mac", "mac-address", 3)
    prop._addConstant("nw-addr", "network-address", 4)
    prop._addConstant("port-comp", "port-component", 2)
    prop._addConstant("reserved", "unknown", 0)
    meta.props.add("portIdT", prop)

    prop = PropMeta("str", "portIdV", "portIdV", 3050, PropCategory.REGULAR)
    prop.label = "Port ID Value"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("portIdV", prop)

    prop = PropMeta("str", "portVlan", "portVlan", 3060, PropCategory.REGULAR)
    prop.label = "Port Vlan"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("portVlan", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "stQual", "stQual", 3046, PropCategory.REGULAR)
    prop.label = "State Qualifier"
    prop.isOper = True
    prop._addConstant("portvlan-mismatch", "port-vlan-mismatch-with-neighbor", 1)
    meta.props.add("stQual", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "sysDesc", "sysDesc", 3053, PropCategory.REGULAR)
    prop.label = "System Description"
    prop.isOper = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("sysDesc", prop)

    prop = PropMeta("str", "sysName", "sysName", 3052, PropCategory.REGULAR)
    prop.label = "System Name"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("sysName", prop)

    prop = PropMeta("str", "ttl", "ttl", 3051, PropCategory.REGULAR)
    prop.label = "TTL"
    prop.isOper = True
    meta.props.add("ttl", prop)

    meta.namingProps.append(getattr(meta.props, "id"))

    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

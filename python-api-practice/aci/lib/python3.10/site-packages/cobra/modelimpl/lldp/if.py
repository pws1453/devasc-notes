# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class If(Mo):
    """
    The LLDP interface, which holds the operational states.

    """

    meta = ClassMeta("cobra.model.lldp.If")

    meta.moClassName = "lldpIf"
    meta.rnFormat = "if-[%(id)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "LLDP Interface"
    meta.writeAccessMask = 0x6006010020001
    meta.readAccessMask = 0x6006010020001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.lldp.InvalidAciAdjEp")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.lldptlvpol.UInt32")
    meta.childClasses.add("cobra.model.lldptlvpol.Mac")
    meta.childClasses.add("cobra.model.lldptlvpol.UInt16")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.l2.RsEthIf")
    meta.childClasses.add("cobra.model.lldptlvpol.UInt64")
    meta.childClasses.add("cobra.model.lldp.AdjEp")
    meta.childClasses.add("cobra.model.lldp.CtrlrAdjEp")
    meta.childClasses.add("cobra.model.nw.RtPathToIf")
    meta.childClasses.add("cobra.model.lldptlvpol.Text")
    meta.childClasses.add("cobra.model.lldptlvpol.Ip")
    meta.childClasses.add("cobra.model.l2.RsMgmtIf")
    meta.childClasses.add("cobra.model.lldp.IfSendTask")
    meta.childClasses.add("cobra.model.lldp.IfStats")
    meta.childClasses.add("cobra.model.dcbx.IfCtx")
    meta.childClasses.add("cobra.model.lldptlvpol.UByte")
    meta.childClasses.add("cobra.model.lldptlvpol.Complex")

    meta.childNamesAndRnPrefix.append(("cobra.model.lldp.InvalidAciAdjEp", "invalidaciadj"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nw.RtPathToIf", "rtpathToIf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldp.IfSendTask", "ifsendtask-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlvpol.Complex", "polcomplex-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlvpol.UInt32", "poluint32-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlvpol.UInt16", "poluint16-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlvpol.UInt64", "poluint64-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlvpol.UByte", "polubyte-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldp.CtrlrAdjEp", "ctrlradj"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlvpol.Text", "poltext-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RsMgmtIf", "rsmgmtIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlvpol.Mac", "polmac-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RsEthIf", "rsethIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldp.IfStats", "ifstats"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dcbx.IfCtx", "dcbxctx"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlvpol.Ip", "polip-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldp.AdjEp", "adj-"))

    meta.parentClasses.add("cobra.model.lldp.Inst")

    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.nw.If")
    meta.superClasses.add("cobra.model.l2.ProtIf")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.LogicalIf")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.ProtIf")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.rnPrefixes = [
        ('if-', True),
    ]

    prop = PropMeta("str", "adminRxSt", "adminRxSt", 3073, PropCategory.REGULAR)
    prop.label = "Admin Receive State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminRxSt", prop)

    prop = PropMeta("str", "adminSt", "adminSt", 3674, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "adminTxSt", "adminTxSt", 3074, PropCategory.REGULAR)
    prop.label = "Admin Transmit State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminTxSt", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 5585, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "id", "id", 6874, PropCategory.REGULAR)
    prop.label = "Interface ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "mac", "mac", 3079, PropCategory.REGULAR)
    prop.label = "MAC"
    prop.isOper = True
    meta.props.add("mac", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14482, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operRxSt", "operRxSt", 3077, PropCategory.REGULAR)
    prop.label = "Operational Receive State"
    prop.isOper = True
    prop.defaultValue = 4
    prop.defaultValueStr = "down"
    prop._addConstant("disabled", "disabled", 1)
    prop._addConstant("down", "down", 4)
    prop._addConstant("enabled", "enabled", 2)
    prop._addConstant("up", "up", 3)
    meta.props.add("operRxSt", prop)

    prop = PropMeta("str", "operTxSt", "operTxSt", 3078, PropCategory.REGULAR)
    prop.label = "Operational Transmit State"
    prop.isOper = True
    prop.defaultValue = 4
    prop.defaultValueStr = "down"
    prop._addConstant("disabled", "disabled", 1)
    prop._addConstant("down", "down", 4)
    prop._addConstant("enabled", "enabled", 2)
    prop._addConstant("up", "up", 3)
    meta.props.add("operTxSt", prop)

    prop = PropMeta("str", "portDesc", "portDesc", 3076, PropCategory.REGULAR)
    prop.label = "Port Description"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("portDesc", prop)

    prop = PropMeta("str", "portMode", "portMode", 21953, PropCategory.REGULAR)
    prop.label = "Port Mode"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "normal"
    prop._addConstant("normal", "normal", 0)
    prop._addConstant("recovery", "recovery", 1)
    meta.props.add("portMode", prop)

    prop = PropMeta("str", "portVlan", "portVlan", 3080, PropCategory.REGULAR)
    prop.label = "Port Vlan"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("portVlan", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "sysDesc", "sysDesc", 3075, PropCategory.REGULAR)
    prop.label = "System Description"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("sysDesc", prop)

    prop = PropMeta("str", "wiringIssues", "wiringIssues", 3081, PropCategory.REGULAR)
    prop.label = "Wiring Issues"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("adjacency-not-detected", "adjacency-is-not-detected-yet", 16)
    prop._addConstant("ctrlr-uuid-mismatch", "controller-uuid-mismatch", 2)
    prop._addConstant("fabric-domain-mismatch", "fabric-domain-name-mismatch", 1)
    prop._addConstant("fabric-id-mismatch", "wired-to-a-controller-with-a-different-fabric-id", 1024)
    prop._addConstant("infra-ip-mismatch", "infra-subnet-mismatch", 64)
    prop._addConstant("infra-vlan-mismatch", "infra-vlan-mismatch", 32)
    prop._addConstant("none", "none", 0)
    prop._addConstant("pod-id-mismatch", "pod-id-mismatch", 256)
    prop._addConstant("unapproved-ctrlr", "unapproved-controller-in-strict-fabric-mode", 128)
    prop._addConstant("unapproved-serialnumber", "wired-to-a-node-with-unregistered-serial-number", 512)
    prop._addConstant("unknown-neighbor", "wired-to-an-unknown-neighbor", 8)
    prop._addConstant("wiring-mismatch", "wired-to-an-invalid-neighbor", 4)
    meta.props.add("wiringIssues", prop)

    meta.namingProps.append(getattr(meta.props, "id"))
    getattr(meta.props, "id").needDelimiter = True

    meta.deploymentCategory = DeploymentCategory("interface", "Interface")
    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

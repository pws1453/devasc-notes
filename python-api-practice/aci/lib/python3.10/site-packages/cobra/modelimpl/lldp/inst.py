# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Inst(Mo):
    """
    Link Layer Discovery Protocol (LLDP) supports a set of attributes that it uses to discover neighbor devices. These attributes contain type, length, and value descriptions and are referred to as TLVs. LLDP supported devices can use TLVs to receive and send information to their neighbors. Details such as configuration information, device capabilities, and device identity can be advertised using this protocol.

    """

    meta = ClassMeta("cobra.model.lldp.Inst")

    meta.moClassName = "lldpInst"
    meta.rnFormat = "inst"
    meta.category = MoCategory.REGULAR
    meta.label = "LLDP Instance"
    meta.writeAccessMask = 0x6006010020001
    meta.readAccessMask = 0x6006010020001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.lldp.RsLldpInstPolCons")
    meta.childClasses.add("cobra.model.lldptlvpol.Mac")
    meta.childClasses.add("cobra.model.lldptlvpol.UInt16")
    meta.childClasses.add("cobra.model.lldp.If")
    meta.childClasses.add("cobra.model.lldp.InstIfSendTask")
    meta.childClasses.add("cobra.model.lldptlvpol.UInt32")
    meta.childClasses.add("cobra.model.lldptlvpol.UInt64")
    meta.childClasses.add("cobra.model.lldp.MgmtAddr")
    meta.childClasses.add("cobra.model.lldptlvpol.Text")
    meta.childClasses.add("cobra.model.lldptlvpol.Ip")
    meta.childClasses.add("cobra.model.lldp.InstStats")
    meta.childClasses.add("cobra.model.lldp.InstSendTask")
    meta.childClasses.add("cobra.model.lldptlvpol.UByte")
    meta.childClasses.add("cobra.model.lldptlvpol.Complex")

    meta.childNamesAndRnPrefix.append(("cobra.model.lldp.RsLldpInstPolCons", "rslldpInstPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldp.InstIfSendTask", "instifsendtask-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldp.InstSendTask", "instsendtask-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlvpol.Complex", "polcomplex-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlvpol.UInt16", "poluint16-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlvpol.UInt32", "poluint32-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlvpol.UInt64", "poluint64-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldp.InstStats", "inststats"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlvpol.UByte", "polubyte-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlvpol.Text", "poltext-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlvpol.Mac", "polmac-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldptlvpol.Ip", "polip-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldp.MgmtAddr", "mgmt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldp.If", "if-"))

    meta.parentClasses.add("cobra.model.lldp.Entity")

    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.CpInst")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.ProtInst")
    meta.superClasses.add("cobra.model.l2.ProtInst")
    meta.superClasses.add("cobra.model.nw.GEp")

    meta.rnPrefixes = [
        ('inst', False),
    ]

    prop = PropMeta("str", "adminSt", "adminSt", 3679, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 3680, PropCategory.REGULAR)
    prop.label = "Controls"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("stateful-ha", "stateful-ha", 1)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "holdTime", "holdTime", 3084, PropCategory.REGULAR)
    prop.label = "Hold Time"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(10, 255)]
    prop.defaultValue = 120
    prop.defaultValueStr = "120"
    meta.props.add("holdTime", prop)

    prop = PropMeta("str", "infraVlan", "infraVlan", 21408, PropCategory.REGULAR)
    prop.label = "Infra VLAN"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("infraVlan", prop)

    prop = PropMeta("str", "initDelayTime", "initDelayTime", 3085, PropCategory.REGULAR)
    prop.label = "Init Delay Time"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 10)]
    prop.defaultValue = 2
    prop.defaultValueStr = "2"
    meta.props.add("initDelayTime", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14485, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 3678, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operErr", "operErr", 3681, PropCategory.REGULAR)
    prop.label = "Operational Errors Qualifier"
    prop.isOper = True
    prop._addConstant("feature-unsupported", "feature-unsupported", 64)
    prop._addConstant("init-err", "initialization-error", 1)
    prop._addConstant("int-err", "internal-error", 8)
    prop._addConstant("ipc-err", "ipc-error", 4)
    prop._addConstant("mem-err", "memory-error", 2)
    prop._addConstant("proto-err", "protocol-error", 32)
    prop._addConstant("sock-err", "socket-error", 16)
    meta.props.add("operErr", prop)

    prop = PropMeta("str", "optTlvSel", "optTlvSel", 3087, PropCategory.REGULAR)
    prop.label = "Optional TLV Selector"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = "port-desc,sys-name,sys-desc,sys-cap,mgmt-addr,port-vlan"
    prop.defaultValueStr = "port-desc,sys-name,sys-desc,sys-cap,mgmt-addr,port-vlan"
    prop._addConstant("dcbx", "dcbx", 64)
    prop._addConstant("mgmt-addr", "management-address", 16)
    prop._addConstant("port-desc", "port-description", 1)
    prop._addConstant("port-vlan", "port-vlan", 32)
    prop._addConstant("sys-cap", "system-capabilities", 8)
    prop._addConstant("sys-desc", "system-description", 4)
    prop._addConstant("sys-name", "system-name", 2)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("optTlvSel", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "sysDesc", "sysDesc", 3088, PropCategory.REGULAR)
    prop.label = "System Description"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("sysDesc", prop)

    prop = PropMeta("str", "txFreq", "txFreq", 3086, PropCategory.REGULAR)
    prop.label = "Transmission Frequency"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(5, 254)]
    prop.defaultValue = 30
    prop.defaultValueStr = "30"
    meta.props.add("txFreq", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

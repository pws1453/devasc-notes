# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class DestGrp(Mo):
    """
     Redirect destination group, represents a service node group 

    """

    meta = ClassMeta("cobra.model.svcredir.DestGrp")

    meta.moClassName = "svcredirDestGrp"
    meta.rnFormat = "destgrp-%(id)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Redirect Destination"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x101
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.svcredir.RtToRedirDestGrp")
    meta.childClasses.add("cobra.model.svcredir.RsDestAtt")
    meta.childClasses.add("cobra.model.svcredir.RsBackupDestAtt")

    meta.childNamesAndRnPrefix.append(("cobra.model.svcredir.RtToRedirDestGrp", "rtactrlToRedirDestGrp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.svcredir.RsBackupDestAtt", "rsbackupDestAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.svcredir.RsDestAtt", "rsdestAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))

    meta.parentClasses.add("cobra.model.svcredir.Inst")

    meta.superClasses.add("cobra.model.svcredir.ADest")

    meta.rnPrefixes = [
        ('destgrp-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 20766, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("lb", "loadbalance", 1)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "destType", "destType", 42519, PropCategory.REGULAR)
    prop.label = "Dest Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "L3"
    prop._addConstant("L1", "l1", 2)
    prop._addConstant("L2", "l2", 1)
    prop._addConstant("L3", "l3", 0)
    meta.props.add("destType", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "hashProfOption", "hashProfOption", 34119, PropCategory.REGULAR)
    prop.label = "Hash Profile Option"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 3
    prop.defaultValueStr = "symmetric"
    prop._addConstant("dstonly", "dst-ip-based-hash", 2)
    prop._addConstant("srconly", "src-ip-based-hash", 1)
    prop._addConstant("symmetric", "symmetric-hash", 3)
    meta.props.add("hashProfOption", prop)

    prop = PropMeta("str", "id", "id", 20765, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 65535)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("id", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "locationPBREnabled", "locationPBREnabled", 35376, PropCategory.REGULAR)
    prop.label = "Location PBR enabled or not"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("locationPBREnabled", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 34198, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "nextDestGrpDn", "nextDestGrpDn", 53246, PropCategory.REGULAR)
    prop.label = "Next DestGrp"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("nextDestGrpDn", prop)

    prop = PropMeta("str", "operSt", "operSt", 20767, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "operStQual", "operStQual", 21255, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "no-oper-grp"
    prop._addConstant("active", "the-group-is-up", 1)
    prop._addConstant("active-active", "both-devices-tracked-as-active", 7)
    prop._addConstant("error", "generic-error", 3)
    prop._addConstant("hw-err", "hardware-error", 4)
    prop._addConstant("no-hw-res", "no-hardware-resource", 2)
    prop._addConstant("no-oper-grp", "no-oper-group", 0)
    prop._addConstant("tracked-as-down", "tracked-as-down", 6)
    prop._addConstant("upd-req", "dest-grp-update-required", 5)
    meta.props.add("operStQual", prop)

    prop = PropMeta("str", "peerDestGrpDn", "peerDestGrpDn", 53247, PropCategory.REGULAR)
    prop.label = "Peer DestGrp"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("peerDestGrpDn", prop)

    prop = PropMeta("str", "redirPolKey", "redirPolKey", 35413, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("redirPolKey", prop)

    prop = PropMeta("str", "resilientHashEnabled", "resilientHashEnabled", 36919, PropCategory.REGULAR)
    prop.label = "Resilient hashing enabled or not"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("resilientHashEnabled", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "sortByName", "sortByName", 41096, PropCategory.REGULAR)
    prop.label = "Sort By Name enabled or not"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("sortByName", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "svcredirCfgFailedBmp", "svcredirCfgFailedBmp", 22022, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("svcredir:DestGrpctrl_failed_flag", None, 1)
    prop._addConstant("svcredir:DestGrpdestType_failed_flag", None, 2)
    prop._addConstant("svcredir:DestGrphashProfOption_failed_flag", None, 4)
    prop._addConstant("svcredir:DestGrpid_failed_flag", None, 8)
    prop._addConstant("svcredir:DestGrplcOwn_failed_flag", None, -9223372036854775808)
    prop._addConstant("svcredir:DestGrplocationPBREnabled_failed_flag", None, 16)
    prop._addConstant("svcredir:DestGrpmodTs_failed_flag", None, 2305843009213693952)
    prop._addConstant("svcredir:DestGrpmonPolDn_failed_flag", None, 32)
    prop._addConstant("svcredir:DestGrpnextDestGrpDn_failed_flag", None, 64)
    prop._addConstant("svcredir:DestGrppeerDestGrpDn_failed_flag", None, 512)
    prop._addConstant("svcredir:DestGrpredirPolKey_failed_flag", None, 1024)
    prop._addConstant("svcredir:DestGrpresilientHashEnabled_failed_flag", None, 2048)
    prop._addConstant("svcredir:DestGrpsortByName_failed_flag", None, 4096)
    prop._addConstant("svcredir:DestGrpthresholdDownAction_failed_flag", None, 65536)
    prop._addConstant("svcredir:DestGrpthresholdEnabled_failed_flag", None, 131072)
    prop._addConstant("svcredir:DestGrpthresholdHigh_failed_flag", None, 262144)
    prop._addConstant("svcredir:DestGrpthresholdLow_failed_flag", None, 524288)
    prop._addConstant("svcredir:DestGrptrackingEnabled_failed_flag", None, 1048576)
    meta.props.add("svcredirCfgFailedBmp", prop)

    prop = PropMeta("str", "svcredirCfgFailedTs", "svcredirCfgFailedTs", 22024, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("svcredirCfgFailedTs", prop)

    prop = PropMeta("str", "svcredirCfgState", "svcredirCfgState", 22023, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("svcredirCfgState", prop)

    prop = PropMeta("str", "thresholdDownAction", "thresholdDownAction", 34124, PropCategory.REGULAR)
    prop.label = "Threshold down action"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "deny"
    prop._addConstant("bypass", "bypass-action", 2)
    prop._addConstant("deny", "deny-action", 0)
    prop._addConstant("permit", "permit-action", 1)
    meta.props.add("thresholdDownAction", prop)

    prop = PropMeta("str", "thresholdEnabled", "thresholdEnabled", 34121, PropCategory.REGULAR)
    prop.label = "Threshold enabled or not"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("thresholdEnabled", prop)

    prop = PropMeta("str", "thresholdHigh", "thresholdHigh", 34122, PropCategory.REGULAR)
    prop.label = "Threshold High Mark"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 100)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("thresholdHigh", prop)

    prop = PropMeta("str", "thresholdLow", "thresholdLow", 34123, PropCategory.REGULAR)
    prop.label = "Threshold Low Mark"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 100)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("thresholdLow", prop)

    prop = PropMeta("str", "trackingEnabled", "trackingEnabled", 34120, PropCategory.REGULAR)
    prop.label = "Tracking enabled or not"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("trackingEnabled", prop)

    meta.namingProps.append(getattr(meta.props, "id"))

    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

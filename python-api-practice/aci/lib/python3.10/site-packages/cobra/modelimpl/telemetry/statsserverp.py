# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class StatsServerP(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.telemetry.StatsServerP")

    meta.moClassName = "telemetryStatsServerP"
    meta.rnFormat = "stserverp-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Stats Server Info Streaming Stats"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x8e700000001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.telemetry.ExternalServer")
    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.telemetry.OperStreamP")
    meta.childClasses.add("cobra.model.telemetry.AlertStreamP")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.telemetry.ServerCtx")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.telemetry.RtToRemoteStatsServer")
    meta.childClasses.add("cobra.model.telemetry.RsToInbandEpg")
    meta.childClasses.add("cobra.model.telemetry.EpStreamP")
    meta.childClasses.add("cobra.model.telemetry.StatsStreamP")
    meta.childClasses.add("cobra.model.telemetry.RtRemoteStatsServer")
    meta.childClasses.add("cobra.model.telemetry.EventStreamP")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.telemetry.RsServerToCtx")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.telemetry.RtToRemoteStatsServer", "rttoRemoteStatsServer"))
    meta.childNamesAndRnPrefix.append(("cobra.model.telemetry.RtRemoteStatsServer", "rtremoteStatsServer"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.telemetry.RsToInbandEpg", "rstoInbandEpg"))
    meta.childNamesAndRnPrefix.append(("cobra.model.telemetry.RsServerToCtx", "rsserverToCtx"))
    meta.childNamesAndRnPrefix.append(("cobra.model.telemetry.ExternalServer", "extserver-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.telemetry.ServerCtx", "serverctx"))
    meta.childNamesAndRnPrefix.append(("cobra.model.telemetry.AlertStreamP", "alrtstrm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.telemetry.OperStreamP", "oprstrm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.telemetry.EventStreamP", "evtstrm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.telemetry.EpStreamP", "epstrm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.telemetry.StatsStreamP", "ststrm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.telemetry.Servers")

    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.telemetry.AServerP")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Def")

    meta.rnPrefixes = [
        ('stserverp-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 38794, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "clusterName", "clusterName", 55630, PropCategory.REGULAR)
    prop.label = "Name of cluster hosting collector"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("clusterName", prop)

    prop = PropMeta("str", "collectorLocation", "collectorLocation", 44790, PropCategory.REGULAR)
    prop.label = "Stats Collector Location"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "apic"
    prop._addConstant("apic", "apic", 2)
    prop._addConstant("apicx", "apicx", 3)
    prop._addConstant("external", "external", 1)
    prop._addConstant("none", "none", 0)
    prop._addConstant("service-edge", "service-edge", 4)
    meta.props.add("collectorLocation", prop)

    prop = PropMeta("str", "descr", "descr", 5579, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dstAddr", "dstAddr", 43442, PropCategory.REGULAR)
    prop.label = "Server IP"
    prop.isConfig = True
    prop.isAdmin = True
    prop.regex = ['^(?=.{0,255}$)[0-9A-Za-z:\\[\\]](\\[{0,1})(?:(?:[0-9A-Za-z]|-|:){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-|:){0,61}[0-9A-Za-z])?)*\\.?(\\]{0,1})$']
    prop.defaultValue = "0.0.0.0"
    prop.defaultValueStr = "0.0.0.0"
    meta.props.add("dstAddr", prop)

    prop = PropMeta("str", "dstPort", "dstPort", 35688, PropCategory.REGULAR)
    prop.label = "Remote entity L4 Port"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 65535)]
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("dns", "dns", 53)
    prop._addConstant("ftpData", "ftp-data", 20)
    prop._addConstant("http", "http", 80)
    prop._addConstant("https", "https", 443)
    prop._addConstant("pop3", "pop3", 110)
    prop._addConstant("rtsp", "rtsp", 554)
    prop._addConstant("smtp", "smtp", 25)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("dstPort", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 40933, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "fabricName", "fabricName", 60675, PropCategory.REGULAR)
    prop.label = "Name of fabric as seen by service edge"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("fabricName", prop)

    prop = PropMeta("str", "ip", "ip", 35687, PropCategory.REGULAR)
    prop.label = "Server IP"
    prop.isConfig = True
    prop.isAdmin = True
    prop.regex = ['^(?=.{0,255}$)[0-9A-Za-z:\\[\\]](\\[{0,1})(?:(?:[0-9A-Za-z]|-|:){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-|:){0,61}[0-9A-Za-z])?)*\\.?(\\]{0,1})$']
    prop.defaultValue = "0.0.0.0"
    prop.defaultValueStr = "0.0.0.0"
    meta.props.add("ip", prop)

    prop = PropMeta("str", "isSecure", "isSecure", 45208, PropCategory.REGULAR)
    prop.label = "Connecting to secure message bus"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = True
    prop.defaultValueStr = "yes"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("isSecure", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 35662, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 35618, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15230, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15231, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class If(Mo):
    """
    The vPC interfaces information enables links that are physically connected to two different Fabric devices to appear as a single port channel by a third device. The third device can be a switch, server, or any other networking device that supports port channels. A vPC can provide Layer 2 multipathing, which allows you to create redundancy and increase bisectional bandwidth by enabling multiple parallel paths between nodes and allowing load balancing traffic.

    """

    meta = ClassMeta("cobra.model.vpc.If")

    meta.moClassName = "vpcIf"
    meta.rnFormat = "if-%(id)s"
    meta.category = MoCategory.REGULAR
    meta.label = "VPC Interface"
    meta.writeAccessMask = 0x200000000001
    meta.readAccessMask = 0x200000000001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.vpc.AppParams")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.vpc.RsVpcConf")

    meta.childNamesAndRnPrefix.append(("cobra.model.vpc.RsVpcConf", "rsvpcConf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vpc.AppParams", "params-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.vpc.Dom")

    meta.rnPrefixes = [
        ('if-', True),
    ]

    prop = PropMeta("str", "accBndlGrpDn", "accBndlGrpDn", 20367, PropCategory.REGULAR)
    prop.label = "PC/VPC Interface Policy Group"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("accBndlGrpDn", prop)

    prop = PropMeta("str", "cfgdAccessVlan", "cfgdAccessVlan", 3587, PropCategory.REGULAR)
    prop.label = "Configured Access Vlan"
    prop.isOper = True
    meta.props.add("cfgdAccessVlan", prop)

    prop = PropMeta("str", "cfgdTrunkVlans", "cfgdTrunkVlans", 3586, PropCategory.REGULAR)
    prop.label = "Configured Trunk Vlans"
    prop.isOper = True
    meta.props.add("cfgdTrunkVlans", prop)

    prop = PropMeta("str", "cfgdVlans", "cfgdVlans", 3585, PropCategory.REGULAR)
    prop.label = "Configured Vlans"
    prop.isOper = True
    meta.props.add("cfgdVlans", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "compatQual", "compatQual", 3583, PropCategory.REGULAR)
    prop.label = "Compatibility Qualifier"
    prop.isOper = True
    meta.props.add("compatQual", prop)

    prop = PropMeta("str", "compatQualStr", "compatQualStr", 3584, PropCategory.REGULAR)
    prop.label = "Compatibility Qualifier String"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("compatQualStr", prop)

    prop = PropMeta("str", "compatSt", "compatSt", 3582, PropCategory.REGULAR)
    prop.label = "Compatibility Status"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "notDone"
    prop._addConstant("fail", "failed", 1)
    prop._addConstant("notDone", "not-applicable", 2)
    prop._addConstant("pass", "success", 0)
    meta.props.add("compatSt", prop)

    prop = PropMeta("str", "descr", "descr", 19115, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "fabEncMismatchVlans", "fabEncMismatchVlans", 45500, PropCategory.REGULAR)
    prop.label = "fabric Encap Mismatch Vlans"
    prop.isOper = True
    meta.props.add("fabEncMismatchVlans", prop)

    prop = PropMeta("str", "fabEncMismatchVlansSet", "fabEncMismatchVlansSet", 55325, PropCategory.REGULAR)
    prop.label = "fabric Encap Mismatch Vlans Flag"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "pass"
    prop._addConstant("failed", "mismatched-vlans", 1)
    prop._addConstant("pass", "no-mismatched-vlasns", 0)
    meta.props.add("fabEncMismatchVlansSet", prop)

    prop = PropMeta("str", "fabricPathDn", "fabricPathDn", 18493, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("fabricPathDn", prop)

    prop = PropMeta("str", "id", "id", 3579, PropCategory.REGULAR)
    prop.label = "VPC ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 1000)]
    meta.props.add("id", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "localOperSt", "localOperSt", 3580, PropCategory.REGULAR)
    prop.label = "Local Operational State"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("down", "down", 1)
    prop._addConstant("noCfg", "not-configured", 3)
    prop._addConstant("unknown", "unknown", 0)
    prop._addConstant("up", "up", 2)
    meta.props.add("localOperSt", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14544, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 19045, PropCategory.REGULAR)
    prop.label = "VPC Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "pcMode", "pcMode", 19112, PropCategory.REGULAR)
    prop.label = "channel mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "static"
    prop._addConstant("active", "lacp-active", 2)
    prop._addConstant("explicit-failover", "explicit-failover-order", 6)
    prop._addConstant("mac-pin", "mac-pinning", 4)
    prop._addConstant("mac-pin-nicload", "mac-pinning-physical-nic-load", 5)
    prop._addConstant("on", "on", 0)
    prop._addConstant("passive", "lacp-passive", 3)
    prop._addConstant("static", "static", 1)
    meta.props.add("pcMode", prop)

    prop = PropMeta("str", "peerCfgdVlans", "peerCfgdVlans", 3590, PropCategory.REGULAR)
    prop.label = "Peer Configured Vlans"
    prop.isOper = True
    meta.props.add("peerCfgdVlans", prop)

    prop = PropMeta("str", "peerUpVlans", "peerUpVlans", 3591, PropCategory.REGULAR)
    prop.label = "Peer Up Vlans"
    prop.isOper = True
    meta.props.add("peerUpVlans", prop)

    prop = PropMeta("str", "remoteOperSt", "remoteOperSt", 3581, PropCategory.REGULAR)
    prop.label = "Remote Operational State"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("down", "down", 1)
    prop._addConstant("noCfg", "not-configured", 3)
    prop._addConstant("unknown", "unknown", 0)
    prop._addConstant("up", "up", 2)
    meta.props.add("remoteOperSt", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "suspVlans", "suspVlans", 3589, PropCategory.REGULAR)
    prop.label = "Suspended Vlans"
    prop.isOper = True
    meta.props.add("suspVlans", prop)

    prop = PropMeta("str", "upVlans", "upVlans", 3588, PropCategory.REGULAR)
    prop.label = "Up Vlans"
    prop.isOper = True
    meta.props.add("upVlans", prop)

    prop = PropMeta("str", "usage", "usage", 21493, PropCategory.REGULAR)
    prop.label = "Port Channel Usage"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "discovery"
    prop._addConstant("blacklist", "black-listed", 32)
    prop._addConstant("controller", "controller", 16)
    prop._addConstant("discovery", "discovery", 1)
    prop._addConstant("epg", "epg", 2)
    prop._addConstant("fabric", "fabric", 4)
    prop._addConstant("fabric-ext", "fabric-external", 256)
    prop._addConstant("infra", "infra", 8)
    prop._addConstant("out-of-service", "out-of-service", 128)
    prop._addConstant("span", "span", 64)
    meta.props.add("usage", prop)

    meta.namingProps.append(getattr(meta.props, "id"))

    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Dom(Mo):
    """
    The vPC domain information. There is only one configurable vPC domain that is in the system.

    """

    meta = ClassMeta("cobra.model.vpc.Dom")

    meta.moClassName = "vpcDom"
    meta.rnFormat = "dom-%(id)s"
    meta.category = MoCategory.REGULAR
    meta.label = "VPC Domain"
    meta.writeAccessMask = 0x200000000001
    meta.readAccessMask = 0x200000000001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.vpc.Keepalive")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.vpc.AppParams")
    meta.childClasses.add("cobra.model.vpc.If")
    meta.childClasses.add("cobra.model.vpc.RsVpcInstPolCons")

    meta.childNamesAndRnPrefix.append(("cobra.model.vpc.RsVpcInstPolCons", "rsvpcInstPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vpc.Keepalive", "keepalive"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vpc.AppParams", "params-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vpc.If", "if-"))

    meta.parentClasses.add("cobra.model.vpc.Inst")

    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.CpDom")
    meta.superClasses.add("cobra.model.nw.GEp")

    meta.rnPrefixes = [
        ('dom-', True),
    ]

    prop = PropMeta("str", "batchedVpcInv", "batchedVpcInv", 3613, PropCategory.REGULAR)
    prop.label = "Batched Vpc Inventory"
    prop.isOper = True
    meta.props.add("batchedVpcInv", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "compatQual", "compatQual", 3620, PropCategory.REGULAR)
    prop.label = "Compatibility Qualifier"
    prop.isOper = True
    meta.props.add("compatQual", prop)

    prop = PropMeta("str", "compatQualStr", "compatQualStr", 3621, PropCategory.REGULAR)
    prop.label = "Compatibility Qualifier String"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("compatQualStr", prop)

    prop = PropMeta("str", "compatSt", "compatSt", 3619, PropCategory.REGULAR)
    prop.label = "Compatibility Status"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "notDone"
    prop._addConstant("fail", "failed", 1)
    prop._addConstant("notDone", "not-applicable", 2)
    prop._addConstant("pass", "success", 0)
    meta.props.add("compatSt", prop)

    prop = PropMeta("str", "deadIntvl", "deadIntvl", 3599, PropCategory.REGULAR)
    prop.label = "Dead Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(5, 600)]
    prop.defaultValue = 200
    prop.defaultValueStr = "200"
    meta.props.add("deadIntvl", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dualActiveSt", "dualActiveSt", 3618, PropCategory.REGULAR)
    prop.label = "Dual Active Status"
    prop.isOper = True
    prop._addConstant("false", "0", 0)
    prop._addConstant("true", "1", 1)
    meta.props.add("dualActiveSt", prop)

    prop = PropMeta("str", "id", "id", 3592, PropCategory.REGULAR)
    prop.label = "Domain ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 1000)]
    meta.props.add("id", prop)

    prop = PropMeta("str", "issuFromVer", "issuFromVer", 3614, PropCategory.REGULAR)
    prop.label = "Issu from Version"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("issuFromVer", prop)

    prop = PropMeta("str", "issuToVer", "issuToVer", 3615, PropCategory.REGULAR)
    prop.label = "Issu to Version"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("issuToVer", prop)

    prop = PropMeta("str", "lacpRole", "lacpRole", 3603, PropCategory.REGULAR)
    prop.label = "Lacp Role"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "election-not-done"
    prop._addConstant("election-not-done", "election-not-done", 0)
    prop._addConstant("master", "master", 1)
    prop._addConstant("slave", "slave", 2)
    meta.props.add("lacpRole", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "localMAC", "localMAC", 3608, PropCategory.REGULAR)
    prop.label = "Local System MAC"
    prop.isOper = True
    meta.props.add("localMAC", prop)

    prop = PropMeta("str", "localPrio", "localPrio", 3605, PropCategory.REGULAR)
    prop.label = "Local System Priority"
    prop.isOper = True
    prop.range = [(1, 65535)]
    prop.defaultValue = 32667
    prop.defaultValueStr = "32667"
    meta.props.add("localPrio", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14548, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 16434, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "oldRole", "oldRole", 3602, PropCategory.REGULAR)
    prop.label = "Old Role"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "election-not-done"
    prop._addConstant("election-not-done", "election-not-done", 0)
    prop._addConstant("master", "master", 1)
    prop._addConstant("slave", "slave", 2)
    meta.props.add("oldRole", prop)

    prop = PropMeta("str", "operRole", "operRole", 3601, PropCategory.REGULAR)
    prop.label = "Operational Role"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "election-not-done"
    prop._addConstant("election-not-done", "election-not-done", 0)
    prop._addConstant("master", "master", 1)
    prop._addConstant("slave", "slave", 2)
    meta.props.add("operRole", prop)

    prop = PropMeta("str", "operSt", "operSt", 3611, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "not-applicable"
    prop._addConstant("configured-master", "configured-master", 16)
    prop._addConstant("local-in-upgrade", "local-in-upgrade", 4)
    prop._addConstant("not-applicable", "not-applicable", 0)
    prop._addConstant("peer-in-upgrade", "peer-in-upgrade", 8)
    prop._addConstant("sticky-master", "sticky-master", 1)
    prop._addConstant("vpcs-reinited", "vpcs-reinited", 2)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "orphanPortList", "orphanPortList", 3600, PropCategory.REGULAR)
    prop.label = "Orphan Port List"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("orphanPortList", prop)

    prop = PropMeta("str", "peerIp", "peerIp", 3593, PropCategory.REGULAR)
    prop.label = "Peer IP"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("peerIp", prop)

    prop = PropMeta("str", "peerMAC", "peerMAC", 3609, PropCategory.REGULAR)
    prop.label = "Peer System MAC"
    prop.isOper = True
    meta.props.add("peerMAC", prop)

    prop = PropMeta("str", "peerPrio", "peerPrio", 3606, PropCategory.REGULAR)
    prop.label = "Peer System Priority"
    prop.isOper = True
    prop.range = [(1, 65535)]
    prop.defaultValue = 32667
    prop.defaultValueStr = "32667"
    meta.props.add("peerPrio", prop)

    prop = PropMeta("str", "peerSt", "peerSt", 3616, PropCategory.REGULAR)
    prop.label = "Peer State"
    prop.isOper = True
    prop._addConstant("down", "down", 1)
    prop._addConstant("noCfg", "not-configured", 0)
    prop._addConstant("up", "up", 2)
    meta.props.add("peerSt", prop)

    prop = PropMeta("str", "peerStQual", "peerStQual", 3617, PropCategory.REGULAR)
    prop.label = "Peer Status Qualifier"
    prop.isOper = True
    prop._addConstant("compat-fail", "compatibility-failed", 4)
    prop._addConstant("election-err", "election-error", 5)
    prop._addConstant("oob-not-up", "keepalive-not-operational", 6)
    prop._addConstant("peer-unrch", "peer-unreachable", 3)
    prop._addConstant("route-down", "route-down", 2)
    prop._addConstant("split-brain", "vpc-in-split-brain", 7)
    prop._addConstant("success", "success", 0)
    prop._addConstant("uplinks-down", "uplinks-down", 1)
    meta.props.add("peerStQual", prop)

    prop = PropMeta("str", "peerVersion", "peerVersion", 3612, PropCategory.REGULAR)
    prop.label = "Peer Version"
    prop.isOper = True
    meta.props.add("peerVersion", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "rolePrio", "rolePrio", 3598, PropCategory.REGULAR)
    prop.label = "Role Priority"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 65535)]
    prop.defaultValue = 32667
    prop.defaultValueStr = "32667"
    meta.props.add("rolePrio", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "summOperRole", "summOperRole", 3604, PropCategory.REGULAR)
    prop.label = "Summarized Oper Role"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "election-not-done"
    prop._addConstant("cfg-master-oper-master", "primary", 1)
    prop._addConstant("cfg-master-oper-slave", "primary,-operational-secondary", 2)
    prop._addConstant("cfg-slave-oper-master", "secondary,-operational-primary", 3)
    prop._addConstant("cfg-slave-oper-slave", "secondary", 4)
    prop._addConstant("election-not-done", "none-established", 0)
    meta.props.add("summOperRole", prop)

    prop = PropMeta("str", "sysMac", "sysMac", 3597, PropCategory.REGULAR)
    prop.label = "System MAC"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("sysMac", prop)

    prop = PropMeta("str", "sysPrio", "sysPrio", 3596, PropCategory.REGULAR)
    prop.label = "System Priority"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 65535)]
    prop.defaultValue = 32667
    prop.defaultValueStr = "32667"
    meta.props.add("sysPrio", prop)

    prop = PropMeta("str", "type2CompatQual", "type2CompatQual", 3623, PropCategory.REGULAR)
    prop.label = "Type-2 Compatibility Qualifier"
    prop.isOper = True
    meta.props.add("type2CompatQual", prop)

    prop = PropMeta("str", "type2CompatQualStr", "type2CompatQualStr", 3624, PropCategory.REGULAR)
    prop.label = "Type-2 Compatibility Qualifier String"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("type2CompatQualStr", prop)

    prop = PropMeta("str", "type2CompatSt", "type2CompatSt", 3622, PropCategory.REGULAR)
    prop.label = "Type-2 Compatibility Status"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "notDone"
    prop._addConstant("fail", "failed", 1)
    prop._addConstant("notDone", "not-applicable", 2)
    prop._addConstant("pass", "success", 0)
    meta.props.add("type2CompatSt", prop)

    prop = PropMeta("str", "vIpAnnounceDelay", "vIpAnnounceDelay", 3595, PropCategory.REGULAR)
    prop.label = "Virtual IP Announcement Delay"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(30, 600)]
    prop.defaultValue = 45
    prop.defaultValueStr = "45"
    meta.props.add("vIpAnnounceDelay", prop)

    prop = PropMeta("str", "virtualIp", "virtualIp", 3594, PropCategory.REGULAR)
    prop.label = "Virtual IP"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("virtualIp", prop)

    prop = PropMeta("str", "vpcCfgFailedBmp", "vpcCfgFailedBmp", 14990, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("vpc:DomdeadIntvl_failed_flag", None, 32)
    prop._addConstant("vpc:Domid_failed_flag", None, 128)
    prop._addConstant("vpc:DomlcOwn_failed_flag", None, -9223372036854775808)
    prop._addConstant("vpc:DommodTs_failed_flag", None, 2305843009213693952)
    prop._addConstant("vpc:DommonPolDn_failed_flag", None, 8192)
    prop._addConstant("vpc:Domname_failed_flag", None, 1)
    prop._addConstant("vpc:DomorphanPortList_failed_flag", None, 131072)
    prop._addConstant("vpc:DompeerIp_failed_flag", None, 262144)
    prop._addConstant("vpc:DomrolePrio_failed_flag", None, 16777216)
    prop._addConstant("vpc:DomsysMac_failed_flag", None, 67108864)
    prop._addConstant("vpc:DomsysPrio_failed_flag", None, 134217728)
    prop._addConstant("vpc:DomvIpAnnounceDelay_failed_flag", None, 2147483648)
    prop._addConstant("vpc:DomvirtualIp_failed_flag", None, 4294967296)
    meta.props.add("vpcCfgFailedBmp", prop)

    prop = PropMeta("str", "vpcCfgFailedTs", "vpcCfgFailedTs", 14992, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("vpcCfgFailedTs", prop)

    prop = PropMeta("str", "vpcCfgState", "vpcCfgState", 14991, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("vpcCfgState", prop)

    prop = PropMeta("str", "vpcMAC", "vpcMAC", 3610, PropCategory.REGULAR)
    prop.label = "Vpc System MAC"
    prop.isOper = True
    meta.props.add("vpcMAC", prop)

    prop = PropMeta("str", "vpcPrio", "vpcPrio", 3607, PropCategory.REGULAR)
    prop.label = "Vpc System Priority"
    prop.isOper = True
    prop.range = [(1, 65535)]
    prop.defaultValue = 32667
    prop.defaultValueStr = "32667"
    meta.props.add("vpcPrio", prop)

    meta.namingProps.append(getattr(meta.props, "id"))

    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

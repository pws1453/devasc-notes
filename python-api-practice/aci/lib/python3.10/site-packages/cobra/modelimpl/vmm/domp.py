# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class DomP(Mo):
    """
    The VMM domain profile is a policy for grouping VM controllers with similar networking policy requirements. For example, the VM controllers can share VLAN or VXLAN space and application endpoint groups. The APIC communicates with the controller to publish network configurations such as port groups that are then applied to the virtual workloads.

    """

    meta = ClassMeta("cobra.model.vmm.DomP")

    meta.moClassName = "vmmDomP"
    meta.rnFormat = "dom-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "VMM Domain"
    meta.writeAccessMask = 0x11
    meta.readAccessMask = 0x40c73c500102061f
    meta.isDomainable = True
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = True

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.vmm.RsPrefEnhancedLagPol")
    meta.childClasses.add("cobra.model.infra.RsVlanNs")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.vmm.RtDompRel")
    meta.childClasses.add("cobra.model.vmm.RsDomMcastAddrNs")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.vmm.RtBaseDomP")
    meta.childClasses.add("cobra.model.vmm.RsDefaultCdpIfPol")
    meta.childClasses.add("cobra.model.vmm.EpPD")
    meta.childClasses.add("cobra.model.infra.RtNicProfToDomP")
    meta.childClasses.add("cobra.model.vmm.UsrAccP")
    meta.childClasses.add("cobra.model.tag.Inst")
    meta.childClasses.add("cobra.model.vmm.RsDefaultLacpLagPol")
    meta.childClasses.add("cobra.model.fvns.VlanInstDef")
    meta.childClasses.add("cobra.model.infra.RtDomRef")
    meta.childClasses.add("cobra.model.infra.RsVlanNsDef")
    meta.childClasses.add("cobra.model.vmm.RtDomP")
    meta.childClasses.add("cobra.model.infra.RtDomP")
    meta.childClasses.add("cobra.model.infra.RsVipAddrNs")
    meta.childClasses.add("cobra.model.tag.AliasDelInst")
    meta.childClasses.add("cobra.model.vmm.RtALDevToDomP")
    meta.childClasses.add("cobra.model.vmm.EncapAllctr")
    meta.childClasses.add("cobra.model.infra.RtDomAtt")
    meta.childClasses.add("cobra.model.vmm.RsDefaultLldpIfPol")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.vmm.UplinkPCont")
    meta.childClasses.add("cobra.model.vmm.UsrCustomAggr")
    meta.childClasses.add("cobra.model.vmm.RsDefaultStpIfPol")
    meta.childClasses.add("cobra.model.vmm.IntCustomAggr")
    meta.childClasses.add("cobra.model.tag.ExtMngdInst")
    meta.childClasses.add("cobra.model.infra.RsDomVxlanNsDef")
    meta.childClasses.add("cobra.model.tag.AliasInst")
    meta.childClasses.add("cobra.model.vmm.CtrlrP")
    meta.childClasses.add("cobra.model.vmm.RsDefaultFwPol")
    meta.childClasses.add("cobra.model.vmm.OrchsProv")
    meta.childClasses.add("cobra.model.vmm.UsrAggr")
    meta.childClasses.add("cobra.model.aaa.DomainRef")
    meta.childClasses.add("cobra.model.infra.RtLDevDomP")
    meta.childClasses.add("cobra.model.infra.RtDynPathAtt")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.vmm.IntAggr")
    meta.childClasses.add("cobra.model.vmm.VSwitchPolicyCont")
    meta.childClasses.add("cobra.model.vmm.AttEntityPCont")
    meta.childClasses.add("cobra.model.infra.RtExtDevDomP")
    meta.childClasses.add("cobra.model.vmm.RsDefaultL2InstPol")
    meta.childClasses.add("cobra.model.infra.RtDomDef")

    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtNicProfToDomP", "rtextdevNicProfToDomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsPrefEnhancedLagPol", "rsprefEnhancedLagPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsDefaultLacpLagPol", "rsdefaultLacpLagPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsDefaultLldpIfPol", "rsdefaultLldpIfPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtDynPathAtt", "rtl3extDynPathAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsDefaultL2InstPol", "rsdefaultL2InstPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsDefaultCdpIfPol", "rsdefaultCdpIfPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RtALDevToDomP", "rtvnsALDevToDomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsDefaultStpIfPol", "rsdefaultStpIfPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsDomMcastAddrNs", "rsdomMcastAddrNs"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtExtDevDomP", "rtedmExtDevDomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RsDomVxlanNsDef", "rsdomVxlanNsDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtDomDef", "rtextdevDomDef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.UsrCustomAggr", "usrcustomaggr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.IntCustomAggr", "intcustomaggr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsDefaultFwPol", "rsdefaultFwPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtLDevDomP", "rtvnsLDevDomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.VSwitchPolicyCont", "vswitchpolcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RtDompRel", "rtpolDompRel-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtDomRef", "rtedmDomRef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.AttEntityPCont", "attentpcont-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RtBaseDomP", "rtbaseDomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RsVlanNsDef", "rsvlanNsDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RtDomP", "rtcompDomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RsVipAddrNs", "rsvipAddrNs"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtDomAtt", "rtfvDomAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.UplinkPCont", "uplinkpcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fvns.VlanInstDef", "vlannsdef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasDelInst", "aliasdel-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RsVlanNs", "rsvlanNs"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.UsrAggr", "usraggr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.IntAggr", "intaggr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.UsrAccP", "usracc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtDomP", "rtdomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.EncapAllctr", "allctr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.ExtMngdInst", "extmngd"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.DomainRef", "domain-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.CtrlrP", "ctrlr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.OrchsProv", "orchs-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.EpPD", "eppd-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasInst", "alias"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Inst", "tag-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.vmm.ProvP")

    meta.superClasses.add("cobra.model.infra.ADomP")
    meta.superClasses.add("cobra.model.infra.DomP")
    meta.superClasses.add("cobra.model.comp.DomP")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Dom")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.fv.ADomP")
    meta.superClasses.add("cobra.model.pol.Cont")

    meta.rnPrefixes = [
        ('dom-', True),
    ]

    prop = PropMeta("str", "accessMode", "accessMode", 35781, PropCategory.REGULAR)
    prop.label = "Access Mode"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "read-write"
    prop._addConstant("read-only", "read-only-mode", 1)
    prop._addConstant("read-write", "read-write-mode", 0)
    meta.props.add("accessMode", prop)

    prop = PropMeta("str", "annotation", "annotation", 37672, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "arpLearning", "arpLearning", 35635, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 0)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("arpLearning", prop)

    prop = PropMeta("str", "aveTimeOut", "aveTimeOut", 45573, PropCategory.REGULAR)
    prop.label = "AVE Time Out Time (seconds)"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(10, 300)]
    prop.defaultValue = 30
    prop.defaultValueStr = "30"
    meta.props.add("aveTimeOut", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "configInfraPg", "configInfraPg", 44765, PropCategory.REGULAR)
    prop.label = "Configure Infra Port Group"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("configInfraPg", prop)

    prop = PropMeta("str", "configIssues", "configIssues", 4941, PropCategory.REGULAR)
    prop.label = "Configuration Issues"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("cdp-lldp-collision", "both-cdp-policy-and-lldp-policy-are-configured-for-attach-entity-profile", 16)
    prop._addConstant("enhanced-lacp-lag-creation-skipped", "enhanced-lacp-lag-policy-creation-skipped,-dvs-has-lacp-v1-enabled", 4096)
    prop._addConstant("invalid-mcast-addr", "missing-multicast-address-for-vxlan-mode", 512)
    prop._addConstant("invalid-port", "invalid-port-for-fabric-interface", 1024)
    prop._addConstant("invalid-vxlan-ns-range", "vxlan-range-below-0x800000-is-not-valid-for-n1kv-ns-mode", 128)
    prop._addConstant("missing-assoc-attEntP", "domain-is-missing-association-from-attach-entity-profile", 8)
    prop._addConstant("missing-encap", "invalid-or-missing-encapsulation", 1)
    prop._addConstant("missing-encapblk", "invalid-or-missing-encapsulation-blocks", 4)
    prop._addConstant("missing-epg", "association-to-end-point-group-not-specified", 2)
    prop._addConstant("missing-internal-vlan-blk", "missing-internal-vlan-encapsulation-blocks", 2048)
    prop._addConstant("missing-ns-assoc", "invalid-or-missing-association-to-vlan-or-vxlan-namespace", 256)
    prop._addConstant("multiple-cdp", "more-than-one-cdp-policy-found-for-attach-entity-profile", 64)
    prop._addConstant("multiple-cdp-policy", "domain-has-multiple-cdp-policies-in-interface-policy-groups-and-no-override-cdp-policy", 8192)
    prop._addConstant("multiple-lacp-policy", "domain-has-multiple-lacp-policies-in-interface-policy-groups-and-no-override-lacp-policy", 262144)
    prop._addConstant("multiple-lldp", "more-than-one-lldp-policy-found-for-attach-entity-profile", 32)
    prop._addConstant("multiple-lldp-policy", "domain-has-multiple-lldp-policies-in-interface-policy-groups-and-no-override-lldp-policy", 16384)
    prop._addConstant("multiple-mtu-policy", "domain-has-multiple-mtu-policies-in-interface-policy-groups-and-no-override-mtu-policy", 131072)
    prop._addConstant("multiple-nwsfw-policy", "domain-has-multiple-firewall-policies-in-interface-policy-groups-and-no-override-firewall-policy", 65536)
    prop._addConstant("multiple-stp-policy", "domain-has-multiple-stp-policies-in-interface-policy-groups-and-no-override-stp-policy", 32768)
    prop._addConstant("none", "n/a", 0)
    meta.props.add("configIssues", prop)

    prop = PropMeta("str", "ctrlKnob", "ctrlKnob", 34305, PropCategory.REGULAR)
    prop.label = "Control Knob that determines, e.g., whether to turn on Ep datapath verify"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "epDpVerify"
    prop._addConstant("epDpVerify", "epdpverify", 1)
    prop._addConstant("none", "none", 0)
    meta.props.add("ctrlKnob", prop)

    prop = PropMeta("str", "delimiter", "delimiter", 26223, PropCategory.REGULAR)
    prop.label = "Delimiter"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.range = [(0, 1)]
    prop.regex = ['[^a-zA-Z0-9;>"-*`,-.;\\[\\]/\\{}:?\\s&<]+']
    meta.props.add("delimiter", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "enableAVE", "enableAVE", 35610, PropCategory.REGULAR)
    prop.label = "Enable AVE mode"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("enableAVE", prop)

    prop = PropMeta("str", "enableTag", "enableTag", 49950, PropCategory.REGULAR)
    prop.label = "Enable Tag data retrieval"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("enableTag", prop)

    prop = PropMeta("str", "enableVmFolder", "enableVmFolder", 54493, PropCategory.REGULAR)
    prop.label = "Enable VM Folder data retrieval"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("enableVmFolder", prop)

    prop = PropMeta("str", "encapMode", "encapMode", 20970, PropCategory.REGULAR)
    prop.label = "Encap Mode"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("ivxlan", "ivxlan-mode", 3)
    prop._addConstant("unknown", "unknown", 0)
    prop._addConstant("vlan", "vlan-mode", 1)
    prop._addConstant("vxlan", "vxlan-mode", 2)
    meta.props.add("encapMode", prop)

    prop = PropMeta("str", "enfPref", "enfPref", 1862, PropCategory.REGULAR)
    prop.label = "Switching Preference"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "hw"
    prop._addConstant("hw", "hardware", 2)
    prop._addConstant("sw", "software", 1)
    prop._addConstant("unknown", "unknwon", 3)
    meta.props.add("enfPref", prop)

    prop = PropMeta("str", "epInventoryType", "epInventoryType", 44224, PropCategory.REGULAR)
    prop.label = "EP Inventory Type"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "on-link"
    prop._addConstant("none", "none", 0)
    prop._addConstant("on-link", "on-link", 1)
    meta.props.add("epInventoryType", prop)

    prop = PropMeta("str", "epRetTime", "epRetTime", 30052, PropCategory.REGULAR)
    prop.label = "End Point Retention Time (seconds)"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 600)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("epRetTime", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 39811, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "hvAvailMonitor", "hvAvailMonitor", 44737, PropCategory.REGULAR)
    prop.label = "Enable Host availibility monitoring"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("hvAvailMonitor", prop)

    prop = PropMeta("str", "lagPolicyName", "lagPolicyName", 44360, PropCategory.REGULAR)
    prop.label = "Enhanced LAG Policy Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("lagPolicyName", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "mcastAddr", "mcastAddr", 1863, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("mcastAddr", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 1861, PropCategory.REGULAR)
    prop.label = "Mode"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "default"
    prop._addConstant("cf", "cloud-foundry", 6)
    prop._addConstant("default", "distributed-switch", 0)
    prop._addConstant("k8s", "kubernetes", 4)
    prop._addConstant("n1kv", "cisco-avs", 1)
    prop._addConstant("openshift", "openshift", 7)
    prop._addConstant("ovs", "open-vswitch", 3)
    prop._addConstant("rhev", "rhev", 5)
    prop._addConstant("unknown", "unknown", 2)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14322, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 7294, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15232, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15233, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "prefEncapMode", "prefEncapMode", 26446, PropCategory.REGULAR)
    prop.label = "Default Encap Mode"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("unspecified", "unspecified", 0)
    prop._addConstant("vlan", "vlan", 1)
    prop._addConstant("vxlan", "vxlan", 2)
    meta.props.add("prefEncapMode", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "txId", "txId", 26241, PropCategory.REGULAR)
    prop.label = "Transaction Id when DomP was created"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("txId", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "uniqueId", "uniqueId", 43715, PropCategory.REGULAR)
    prop.label = "Unique Id when DomP was created"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uniqueId", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Path"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVmmOrchsProvPlan", "Provider Plans", "cobra.model.vmm.OrchsProvPlan"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ADomPToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVmmEpPD", "Portgroups", "cobra.model.vmm.EpPD"))

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class CtrlrP(Mo):
    """
    The VMM controller profile specifies how to connect to a single VM management controller that is part of a policy enforcement domain. For example, the VMM controller profile could be a policy to connect a VMware vCenter that is part of a VMM domain.

    """

    meta = ClassMeta("cobra.model.vmm.CtrlrP")

    meta.moClassName = "vmmCtrlrP"
    meta.rnFormat = "ctrlr-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "VMM Controller"
    meta.writeAccessMask = 0x11
    meta.readAccessMask = 0x4045041000020415
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.vmm.PlInf")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.vmm.AgtStatus")
    meta.childClasses.add("cobra.model.vmm.RsVxlanNsDef")
    meta.childClasses.add("cobra.model.tag.Inst")
    meta.childClasses.add("cobra.model.vmm.RtCtrlrP")
    meta.childClasses.add("cobra.model.vmm.RsMcastAddrNs")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.tag.AliasDelInst")
    meta.childClasses.add("cobra.model.vmm.RtVmmCtrlrP")
    meta.childClasses.add("cobra.model.vmm.RsAcc")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.tag.ExtMngdInst")
    meta.childClasses.add("cobra.model.comp.PolCont")
    meta.childClasses.add("cobra.model.tag.AliasInst")
    meta.childClasses.add("cobra.model.vmm.RsVmmCtrlrP")
    meta.childClasses.add("cobra.model.vmm.RsToExtDevMgr")
    meta.childClasses.add("cobra.model.vmm.EpValidatorPol")
    meta.childClasses.add("cobra.model.vmm.RtCDevToCtrlrP")
    meta.childClasses.add("cobra.model.vmm.RsVxlanNs")
    meta.childClasses.add("cobra.model.vmm.HvAvailPol")
    meta.childClasses.add("cobra.model.vmm.RtBaseCtrlrP")
    meta.childClasses.add("cobra.model.vmm.RsCtrlrPMonPol")
    meta.childClasses.add("cobra.model.vmm.RsMgmtEPg")

    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RtCDevToCtrlrP", "rtvnsCDevToCtrlrP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsToExtDevMgr", "rstoExtDevMgr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsCtrlrPMonPol", "rsctrlrPMonPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RtCtrlrP", "rtcompCtrlrP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsMcastAddrNs", "rsmcastAddrNs"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RtBaseCtrlrP", "rtbaseCtrlrP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsVxlanNsDef", "rsvxlanNsDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RtVmmCtrlrP", "rtvmmCtrlrP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsVmmCtrlrP", "rsvmmCtrlrP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.AgtStatus", "AgtStatus-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasDelInst", "aliasdel-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsVxlanNs", "rsvxlanNs"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsMgmtEPg", "rsmgmtEPg"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.HvAvailPol", "hvavailp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.ExtMngdInst", "extmngd"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.PolCont", "polCont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.PlInf", "plinf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsAcc", "rsacc"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasInst", "alias"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Inst", "tag-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.EpValidatorPol", "epv"))

    meta.parentClasses.add("cobra.model.vmm.DomP")

    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.comp.CtrlrP")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Ctrlr")

    meta.rnPrefixes = [
        ('ctrlr-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 37677, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "configIssues", "configIssues", 1034, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "not-applicable"
    prop._addConstant("domain-not-deployable", "parent-domain-is-not-deployable-due-to-configuration-issues.", 128)
    prop._addConstant("enfpref-not-set", "switching-preference-not-set-yet.", 256)
    prop._addConstant("invalid-CtrlrAssoc", "controller-is-not-associated-to-a-valid-vm-controller.-please-provide-the-association.", 4)
    prop._addConstant("invalid-mcastAddr", "no-valid-multicast-address-block-specified-for-the-controller.", 16)
    prop._addConstant("invalid-policy", "mac-pinning-policy-basing-on-physical-nic-load-is-not-supported-for-this-mode.", 1024)
    prop._addConstant("invalid-statsP", "controller-is-not-associated-to-a-valid-statistics-collection-policy", 2)
    prop._addConstant("invalid-usraccp", "controller-is-not-associated-to-a-valid-access-profile", 1)
    prop._addConstant("invalid-vxlanNs", "no-valid-vxlan-pool-specified-for-the-controller.", 8)
    prop._addConstant("missing-infra-vlan", "missing-infra-vlan-for-the-controller.", 64)
    prop._addConstant("missing-ns-ctrlr-assoc", "vcenter-should-be-associated-to-a-vshield-or-the-parent-domain-should-be-associated-with-a-vlan-pool.", 32)
    prop._addConstant("mode-not-set", "mode-not-set-yet.", 512)
    prop._addConstant("not-applicable", "n/a", 0)
    meta.props.add("configIssues", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "domName", "domName", 16471, PropCategory.REGULAR)
    prop.label = "Domain Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("domName", prop)

    prop = PropMeta("str", "dvsVersion", "dvsVersion", 16335, PropCategory.REGULAR)
    prop.label = "Dvs Version"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unmanaged"
    prop._addConstant("5.1", "dvs-version-5.1", 1)
    prop._addConstant("5.5", "dvs-version-5.5", 2)
    prop._addConstant("6.0", "dvs-version-6.0", 3)
    prop._addConstant("6.5", "dvs-version-6.5", 4)
    prop._addConstant("6.6", "dvs-version-6.6", 5)
    prop._addConstant("7.0", "dvs-version-7.0", 6)
    prop._addConstant("unmanaged", "vcenter-default", 0)
    meta.props.add("dvsVersion", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 39816, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "hostOrIp", "hostOrIp", 1031, PropCategory.REGULAR)
    prop.label = "Hostname or IP Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.regex = ['[a-zA-Z0-9:][a-zA-Z0-9.:-]{0,254}']
    meta.props.add("hostOrIp", prop)

    prop = PropMeta("str", "inventoryTrigSt", "inventoryTrigSt", 16507, PropCategory.REGULAR)
    prop.label = "Triggered Inventory Sync Status"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "untriggered"
    prop._addConstant("autoTriggered", "autotriggered", 2)
    prop._addConstant("triggered", "triggered", 0)
    prop._addConstant("untriggered", "untriggered", 1)
    meta.props.add("inventoryTrigSt", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 1865, PropCategory.REGULAR)
    prop.label = "Mode"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "default"
    prop._addConstant("cf", "cloud-foundry", 6)
    prop._addConstant("default", "distributed-switch", 0)
    prop._addConstant("k8s", "kubernetes", 4)
    prop._addConstant("n1kv", "cisco-avs", 1)
    prop._addConstant("openshift", "openshift", 7)
    prop._addConstant("ovs", "open-vswitch", 3)
    prop._addConstant("rhev", "rhev", 5)
    prop._addConstant("unknown", "unknown", 2)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14329, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "msftConfigErrMsg", "msftConfigErrMsg", 35385, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 256)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("msftConfigErrMsg", prop)

    prop = PropMeta("str", "msftConfigIssues", "msftConfigIssues", 18487, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "not-applicable"
    prop._addConstant("aaacert-invalid", "scvmm-comp-inventory-is-missing-due-to-invalid-certificate-on-scvmm-server-or-aaavmmcertificaterule-is-missing-on-apic-controller.", 16)
    prop._addConstant("duplicate-mac-in-inventory", "scvmm-agent-found-duplicate-mac-address-in-scvmm-comp-inventory.", 128)
    prop._addConstant("duplicate-rootContName", "controller-is-not-deployable.-the-same-rootcontname-controller-also-exist-in-another-vmm-domain.", 2)
    prop._addConstant("invalid-object-in-inventory", "scvmm-agent-has-ignored-duplicate-object(s)-in-scvmm-comp-inventory-.", 64)
    prop._addConstant("invalid-rootContName", "scvmm-controller-does-not-have-cloudname-that-matches-with-rootcontname.-controller-is-not-deployable.", 1)
    prop._addConstant("inventory-failed", "scvmm-agent-failed-to-post-comp-inventory-to-apic-controller.", 32)
    prop._addConstant("missing-hostGroup-in-cloud", "no-valid-hostgroup-exist-under-the-cloud-resource-in-scvmm-controller.-controller-is-not-deployable", 4)
    prop._addConstant("missing-rootContName", "scvmm-controller-has-missing-cloudname-that-matches-with-rootcontname-but-its-scvmm-hostgroup-is-still-exists-along-with-apic-vmmdomain-logical-switch.", 8)
    prop._addConstant("not-applicable", "n/a", 0)
    prop._addConstant("zero-mac-in-inventory", "scvmm-agent-found-zero-mac-address-in-scvmm-comp-inventory.", 256)
    meta.props.add("msftConfigIssues", prop)

    prop = PropMeta("str", "n1kvStatsMode", "n1kvStatsMode", 28062, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 1)
    prop._addConstant("enabled", "enabled", 2)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("n1kvStatsMode", prop)

    prop = PropMeta("str", "name", "name", 7292, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "port", "port", 1032, PropCategory.REGULAR)
    prop.label = "Port"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 65535)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("port", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "rootContName", "rootContName", 1033, PropCategory.REGULAR)
    prop.label = "Datacenter"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("rootContName", prop)

    prop = PropMeta("str", "scope", "scope", 1864, PropCategory.REGULAR)
    prop.label = "Scope"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "vm"
    prop._addConstant("MicrosoftSCVMM", "scvmm", 4)
    prop._addConstant("cloudfoundry", "cloud-foundry", 8)
    prop._addConstant("iaas", "vshield", 2)
    prop._addConstant("kubernetes", "kubernetes", 6)
    prop._addConstant("network", "vcd", 3)
    prop._addConstant("openshift", "openshift", 9)
    prop._addConstant("openstack", "openstack", 5)
    prop._addConstant("rhev", "redhat-enterprise-virtualization", 7)
    prop._addConstant("unmanaged", "unmanaged", 0)
    prop._addConstant("vm", "vcenter", 1)
    meta.props.add("scope", prop)

    prop = PropMeta("str", "seqNum", "seqNum", 32656, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("seqNum", prop)

    prop = PropMeta("str", "statsMode", "statsMode", 1866, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 1)
    prop._addConstant("enabled", "enabled", 2)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("statsMode", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "vxlanDeplPref", "vxlanDeplPref", 23442, PropCategory.REGULAR)
    prop.label = "VxLAN Deployment Preference"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "vxlan"
    prop._addConstant("nsx", "do-not-depoly-virutal-wire-in-the-controller", 0)
    prop._addConstant("vxlan", "deploy-virtual-wire-in-the-controller", 1)
    meta.props.add("vxlanDeplPref", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Path"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ControllerToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ControllerToVmmEpPD", "Portgroups", "cobra.model.vmm.EpPD"))

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

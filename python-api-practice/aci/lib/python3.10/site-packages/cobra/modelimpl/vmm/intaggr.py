# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class IntAggr(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.vmm.IntAggr")

    meta.moClassName = "vmmIntAggr"
    meta.rnFormat = "intaggr-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Internal End Point Group Aggregator Definition"
    meta.writeAccessMask = 0x415
    meta.readAccessMask = 0x200000000415
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.comp.RtEpgAggr")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.comp.RsLocalEpCP")
    meta.childClasses.add("cobra.model.comp.RsCtrlrP")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.fvns.EncapBlk")
    meta.childClasses.add("cobra.model.comp.RsEpgAggr")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.RsLocalEpCP", "rslocalEpCP"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.RtEpgAggr", "rtepgAggr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.RsEpgAggr", "rsepgAggr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.RsCtrlrP", "rsctrlrP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fvns.EncapBlk", "from-"))

    meta.parentClasses.add("cobra.model.vmm.DomP")

    meta.superClasses.add("cobra.model.vmm.AEpPD")
    meta.superClasses.add("cobra.model.comp.AEpPD")
    meta.superClasses.add("cobra.model.vmm.EpgAggr")
    meta.superClasses.add("cobra.model.comp.Entity")
    meta.superClasses.add("cobra.model.naming.NamedIdentifiedObject")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.comp.AAppEpPD")

    meta.rnPrefixes = [
        ('intaggr-', True),
    ]

    prop = PropMeta("str", "aggrImedcy", "aggrImedcy", 27800, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "lazy"
    prop._addConstant("immediate", "immediate", 1)
    prop._addConstant("lazy", "on-demand", 2)
    meta.props.add("aggrImedcy", prop)

    prop = PropMeta("str", "allocMode", "allocMode", 20854, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "dynamic"
    prop._addConstant("dynamic", "dynamic-allocation", 0)
    prop._addConstant("static", "static-allocation", 1)
    meta.props.add("allocMode", prop)

    prop = PropMeta("str", "annotation", "annotation", 38568, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "bdDn", "bdDn", 25844, PropCategory.REGULAR)
    prop.label = "BD DN"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("bdDn", prop)

    prop = PropMeta("str", "bindingType", "bindingType", 44503, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("dynamicBinding", "dynamic-binding", 2)
    prop._addConstant("ephemeral", "ephemeral", 3)
    prop._addConstant("none", "default", 0)
    prop._addConstant("staticBinding", "static-binding", 1)
    meta.props.add("bindingType", prop)

    prop = PropMeta("str", "blockAllPorts", "blockAllPorts", 18630, PropCategory.REGULAR)
    prop.label = "Block All Ports Setting"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "Disabled"
    prop._addConstant("Disabled", "disabled", 1)
    prop._addConstant("Enabled", "enabled", 2)
    meta.props.add("blockAllPorts", prop)

    prop = PropMeta("str", "cfgdDelimiter", "cfgdDelimiter", 26220, PropCategory.REGULAR)
    prop.label = "Configured Delimiter"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 1)]
    prop.regex = ['[^a-zA-Z0-9;>"-*`,-.;\\[\\]/\\{}:?\\s&<]+']
    meta.props.add("cfgdDelimiter", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "classPref", "classPref", 23402, PropCategory.REGULAR)
    prop.label = "Classification Preference"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "encap"
    prop._addConstant("encap", "packet-encapsulation", 0)
    prop._addConstant("useg", "useg", 1)
    meta.props.add("classPref", prop)

    prop = PropMeta("str", "configFlags", "configFlags", 20925, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("add-del-task-pending", "whether-an-add-or-delete-extpol-task-is-pending-to-be-executed", 16)
    prop._addConstant("none", "none", 0)
    prop._addConstant("skip-encap-validation", "skip-validation-of-encapsulation-value", 1)
    prop._addConstant("skip-ep-attach", "skip-ep-attach", 2)
    prop._addConstant("skip-inner-pvlan", "skip-allocation-on-inner-pvlan-for-ave-eppd", 8)
    prop._addConstant("skip-pg-create", "skip-pg-creation-on-vds", 4)
    meta.props.add("configFlags", prop)

    prop = PropMeta("str", "crtrnEnabled", "crtrnEnabled", 18594, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("crtrnEnabled", prop)

    prop = PropMeta("str", "customEpgName", "customEpgName", 56468, PropCategory.REGULAR)
    prop.label = "Customized Epg display name that replaces the default t|a|e format"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("customEpgName", prop)

    prop = PropMeta("str", "deployIssues", "deployIssues", 979, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("attr-dom-not-supported", "attribute-based-epg-is-not-supported-for-the-domain-type", 131072)
    prop._addConstant("ctrlr-not-deployable", "controller-not-deployable.", 32768)
    prop._addConstant("ctrlr-unsupported", "unsupported-controller.", 16384)
    prop._addConstant("duplicate-static-encap", "duplicate-epg-encapsulation-value", 2097152)
    prop._addConstant("dvs-config-failed", "failed-to-configure-dvs.", 4096)
    prop._addConstant("dvs-error", "failed-to-get-dvs-config.", 2)
    prop._addConstant("dvs-prep-error", "dvs-preparation-error-for-vxlan.", 32)
    prop._addConstant("dvs-version-error", "could-not-get-dvs-version.", 512)
    prop._addConstant("epg-pol-enforce-missing-pri_encap", "missing-primary-encap-in-vmm-domain-relation-for-policy-enforced-epg", 8388608)
    prop._addConstant("epg-pol-enforce-redhat-unsupported", "intra-epg-isolation-is-not-supported-for-redhat-domains", 34359738368)
    prop._addConstant("epg-pol-enforce-unsupported", "intra-epg-isolation-is-not-supported-in-avs-vlan-mode-and-ave-vlan-mode-vmm-domains", 16777216)
    prop._addConstant("epg-useg-unsupported", "microsegmentation-is-not-supported-for-the-controller", 67108864)
    prop._addConstant("epp-mcast-addr-match-fabric", "epg-mcast-address-is-the-same-as-fabric-mcast-address.-domain-fabric-multicast-address-overlaps-multicast-address-pool.", 1048576)
    prop._addConstant("internal-vlan-pool-full", "insufficient-vlans.-internal-vlan-pool-full-for-epgs-in-ave-domain", 8589934592)
    prop._addConstant("invalid-encap", "no-valid-encapsulation-identifier-allocated-for-the-epg", 1)
    prop._addConstant("invalid-encap-mode", "encap-mode-cannot-be-vxlan-when-switching-mode-is-native-for-this-vmm-domain", 17179869184)
    prop._addConstant("invalid-intra-epg-isolation", "enforcing-intra-epg-isolation-is-invalid-without-primary-and-secondary-vlans-set", 274877906944)
    prop._addConstant("invalid-lag-policy-association", "invalid-enhanced-lag-policy-associated-with-this-epg", 137438953472)
    prop._addConstant("invalid-mcast-addr", "no-valid-mcast-address-allocated-for-the-epg", 65536)
    prop._addConstant("invalid-netflow-preference", "netflow-cannot-be-enabled-for-epg-associated-to-vmm-domain-in-avs-mode", 1073741824)
    prop._addConstant("invalid-static-encap", "epg-encapsulation-value-is-not-part-of-any-static-encapsulation-block-for-the-vmm-domain", 524288)
    prop._addConstant("invalid-switching-mode", "vmm-domain-needs-to-be-of-type-cisco-ave-for-switching-mode-ave", 4194304)
    prop._addConstant("invalid-trunk-portgroup-range", "trunk-portgroup-vlan-ranges-are-out-of-domain-vlan-pool", 134217728)
    prop._addConstant("invalid-usegepg-encap", "primary-encap-property-and-encap-property-both-need-to-be-set", 33554432)
    prop._addConstant("invalid-vip", "vip-has-not-been-allocated", 262144)
    prop._addConstant("invalid-vlan-encap", "vlan-encap-mode-is-not-allowed-for-ave-non-local-switching-domain", 68719476736)
    prop._addConstant("ipv6-dstaddr-unsupported", "netflow-exporter-dstaddr-supports-ipv6-from-dvs-version-6.0-and-higher.-please-use-an-ipv4-address-for-the-netflow-exporter-dstaddr", 2147483648)
    prop._addConstant("lacp-apply-failed", "lacp-update-for-portgroup-failed.", 2048)
    prop._addConstant("missing-internal-vlan-pool", "missing-internal-vlan-pools-for-epgs-in-ave-domain", 4294967296)
    prop._addConstant("no-ctrlr-dn", "controller-dn-missing.", 256)
    prop._addConstant("no-ctrlr-map", "controller-missing-from-internal-map.", 128)
    prop._addConstant("none", "n/a", 0)
    prop._addConstant("pg-api-error", "portgroup-property-get-api-failed.", 1024)
    prop._addConstant("policy-not-found", "failed-to-find-policy-container-for-controller.", 8192)
    prop._addConstant("prep-vxlan-error", "vxlan-cluster-preparation-error.", 8)
    prop._addConstant("proc-vmm-error", "cluster-type-object-missing-from-controller.", 16)
    prop._addConstant("resimedcy-unsupported", "resolution-immediacy-not-supported-for-this-domain", 536870912)
    prop._addConstant("trunk-portgroup-unsupported", "trunk-portgroup-not-supported", 268435456)
    prop._addConstant("unsupported-ctrlr", "invalid-controller-scope.", 64)
    prop._addConstant("vdn-error", "network-scope-creation-error.", 4)
    meta.props.add("deployIssues", prop)

    prop = PropMeta("str", "descr", "descr", 5587, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "domName", "domName", 27440, PropCategory.REGULAR)
    prop.label = "Domain Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("domName", prop)

    prop = PropMeta("str", "encap", "encap", 983, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("encap", prop)

    prop = PropMeta("str", "encapAllocKey", "encapAllocKey", 23403, PropCategory.REGULAR)
    prop.label = "Encapsulation allocation Key"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("encapAllocKey", prop)

    prop = PropMeta("str", "encapChanged", "encapChanged", 43443, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("encapChanged", prop)

    prop = PropMeta("str", "encapCtx", "encapCtx", 18204, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("encapCtx", prop)

    prop = PropMeta("str", "encapMode", "encapMode", 25520, PropCategory.REGULAR)
    prop.label = "Encapsulation mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "trunk"
    prop._addConstant("access", "access-mode", 0)
    prop._addConstant("none", "untagged-access-mode", 3)
    prop._addConstant("private", "private-mode", 2)
    prop._addConstant("trunk", "trunk-mode", 1)
    meta.props.add("encapMode", prop)

    prop = PropMeta("str", "encapModeOverride", "encapModeOverride", 26444, PropCategory.REGULAR)
    prop.label = "Encap Mode Override"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "auto"
    prop._addConstant("auto", "auto", 0)
    prop._addConstant("vlan", "vlan", 1)
    prop._addConstant("vxlan", "vxlan", 2)
    meta.props.add("encapModeOverride", prop)

    prop = PropMeta("str", "epgCos", "epgCos", 33157, PropCategory.REGULAR)
    prop.label = "Epg Cos for AVS"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "Cos0"
    prop._addConstant("Cos0", "cos0", 0)
    prop._addConstant("Cos1", "cos1", 1)
    prop._addConstant("Cos2", "cos2", 2)
    prop._addConstant("Cos3", "cos3", 3)
    prop._addConstant("Cos4", "cos4", 4)
    prop._addConstant("Cos5", "cos5", 5)
    prop._addConstant("Cos6", "cos6", 6)
    prop._addConstant("Cos7", "cos7", 7)
    meta.props.add("epgCos", prop)

    prop = PropMeta("str", "epgCosPref", "epgCosPref", 33186, PropCategory.REGULAR)
    prop.label = "Epg Cos Policy Enforcement"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 1)
    prop._addConstant("enabled", "enabled", 2)
    meta.props.add("epgCosPref", prop)

    prop = PropMeta("str", "epgPKey", "epgPKey", 980, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("epgPKey", prop)

    prop = PropMeta("str", "eppDn", "eppDn", 981, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("eppDn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 40707, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "faultDKey", "faultDKey", 15775, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("faultDKey", prop)

    prop = PropMeta("str", "featureFlags", "featureFlags", 34336, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("none", "none", 0)
    prop._addConstant("skip-encap-validation", "skip-validation-of-encapsulation-blocks", 1)
    prop._addConstant("skip-rel-to-eppd", "skip-creation-of-relation-to-eppd", 2)
    prop._addConstant("skip-vlan-pool-inheritance", "skip-inheritance-of-vlan-pools", 4)
    meta.props.add("featureFlags", prop)

    prop = PropMeta("str", "forgedTransmit", "forgedTransmit", 28334, PropCategory.REGULAR)
    prop.label = "Forged Transmit Setting"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "Enabled"
    prop._addConstant("Disabled", "disabled", 1)
    prop._addConstant("Enabled", "enabled", 2)
    meta.props.add("forgedTransmit", prop)

    prop = PropMeta("str", "id", "id", 1003, PropCategory.REGULAR)
    prop.label = "Id"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "idConsumerDn", "idConsumerDn", 23404, PropCategory.REGULAR)
    prop.label = "Ident Consumer DN"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("idConsumerDn", prop)

    prop = PropMeta("str", "instrImedcy", "instrImedcy", 34224, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "lazy"
    prop._addConstant("immediate", "immediate", 1)
    prop._addConstant("lazy", "on-demand", 2)
    meta.props.add("instrImedcy", prop)

    prop = PropMeta("str", "intraSecConf", "intraSecConf", 33172, PropCategory.REGULAR)
    prop.label = "Intra EPG Contract Config"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("none", "none", 0)
    prop._addConstant("security", "security", 1)
    meta.props.add("intraSecConf", prop)

    prop = PropMeta("str", "issues", "issues", 34206, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("ds-update-fault", "failed-to-update-ds(data-store)-property", 4096)
    prop._addConstant("hpnic-miss-epg-fault", "hpnic-is-attached-to-an-invalid-uplink-dvs-port-group", 32)
    prop._addConstant("hv-disconnect-fault", "esx-host-is-disconnected-or-not-responding", 128)
    prop._addConstant("hv-miss-dvs-fault", "esx-host-is-configured-with-invalid-dvs", 64)
    prop._addConstant("hv-miss-pnic-fault", "esx-host-does-not-have-any-pnic", 1024)
    prop._addConstant("hv-miss-vmknic-fault", "esx-host-does-not-have-any-vmknic", 256)
    prop._addConstant("hv-update-fault", "failed-to-update-hv(esx-host)-property", 2)
    prop._addConstant("lnode-property-fault", "failed-to-get-dvs-property", 1)
    prop._addConstant("mgmtnic-miss-dvs-fault", "vmk-nic-is-configured-with-invalid-dvs", 512)
    prop._addConstant("none", "none", 0)
    prop._addConstant("opflex-channels-down-ave", "both-the-opflex-channels-are-down-for-ave.-please-check-the-connections-on-the-host.", 16384)
    prop._addConstant("prep-iso-file-fault", "failed-to-prepare-or-push-iso-file-for-service-vm-deployment.-please-check-if-correct-datastore-is-selected-in-policy.", 131072)
    prop._addConstant("rp-update-fault", "failed-to-update-rp(resource-pool)-property", 8192)
    prop._addConstant("tagging-cat-fault", "failed-to-retrieve-all-tag-category-information", 65536)
    prop._addConstant("tagging-tag-fault", "failed-to-retrieve-all-tag-information", 32768)
    prop._addConstant("vm-deploy-task-fault", "deployvm-task-failed-on-vcenter", 2048)
    prop._addConstant("vm-miss-hv-fault", "vm-is-attached-to-an-invalid-hv(esx-host)", 8)
    prop._addConstant("vm-update-fault", "failed-to-update-vm(virtual-machine)-property", 4)
    prop._addConstant("vmfolder-update-fault", "failed-to-update-vm(virtual-machine)-folder-property", 262144)
    prop._addConstant("vnic-miss-epg-fault", "vnic-is-attached-to-an-invalid-dvs-port-group-or-unable-to-communicate-with-vcenter", 16)
    meta.props.add("issues", prop)

    prop = PropMeta("str", "lagPolicyName", "lagPolicyName", 44358, PropCategory.REGULAR)
    prop.label = "Enhanced LAG Policy Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("lagPolicyName", prop)

    prop = PropMeta("str", "lbAlgo", "lbAlgo", 985, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "mac-pin"
    prop._addConstant("explicit-failover", "explicit-failover", 4)
    prop._addConstant("ip-hash", "ip-hash", 1)
    prop._addConstant("mac-pin", "mac-pin", 2)
    prop._addConstant("mac-pin-nicload", "mac-pin-nicload", 3)
    meta.props.add("lbAlgo", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "macChange", "macChange", 28333, PropCategory.REGULAR)
    prop.label = "MAC Address Changes Setting"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "Enabled"
    prop._addConstant("Disabled", "disabled", 1)
    prop._addConstant("Enabled", "enabled", 2)
    meta.props.add("macChange", prop)

    prop = PropMeta("str", "mcastAddr", "mcastAddr", 984, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("mcastAddr", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 988, PropCategory.REGULAR)
    prop.label = "Monitoring Policy Dn"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 27865, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "netflowDir", "netflowDir", 31104, PropCategory.REGULAR)
    prop.label = "Netflow Monitor Direction"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 3
    prop.defaultValueStr = "both"
    prop._addConstant("both", "both", 3)
    prop._addConstant("egress", "egress", 2)
    prop._addConstant("ingress", "ingress", 1)
    meta.props.add("netflowDir", prop)

    prop = PropMeta("str", "netflowPref", "netflowPref", 27509, PropCategory.REGULAR)
    prop.label = "Netflow Policy Enforcement"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 1)
    prop._addConstant("enabled", "enabled", 2)
    meta.props.add("netflowPref", prop)

    prop = PropMeta("str", "numPorts", "numPorts", 44505, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("numPorts", prop)

    prop = PropMeta("str", "operDelimiter", "operDelimiter", 26221, PropCategory.REGULAR)
    prop.label = "Operational Delimiter"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 1)]
    prop.regex = ['[^a-zA-Z0-9;>"-*`,-.;\\[\\]/\\{}:?\\s&<]+']
    meta.props.add("operDelimiter", prop)

    prop = PropMeta("str", "pcEnfPref", "pcEnfPref", 23405, PropCategory.REGULAR)
    prop.label = "Policy Control Enforcement"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "unenforced"
    prop._addConstant("enforced", "enforced", 1)
    prop._addConstant("unenforced", "unenforced", 2)
    meta.props.add("pcEnfPref", prop)

    prop = PropMeta("str", "portAllocation", "portAllocation", 44504, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("elastic", "elastic", 2)
    prop._addConstant("fixed", "fixed", 1)
    prop._addConstant("none", "default", 0)
    meta.props.add("portAllocation", prop)

    prop = PropMeta("str", "primaryEncap", "primaryEncap", 23407, PropCategory.REGULAR)
    prop.label = "Primary encapsulation when EPG is isolated"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("primaryEncap", prop)

    prop = PropMeta("str", "primaryEncapInner", "primaryEncapInner", 34685, PropCategory.REGULAR)
    prop.label = "Primary encapsulation for inner traffic"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("primaryEncapInner", prop)

    prop = PropMeta("str", "promMode", "promMode", 25521, PropCategory.REGULAR)
    prop.label = "Promiscous Mode Setting"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "Disabled"
    prop._addConstant("Disabled", "disabled", 1)
    prop._addConstant("Enabled", "enabled", 2)
    meta.props.add("promMode", prop)

    prop = PropMeta("str", "resImedcy", "resImedcy", 982, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "lazy"
    prop._addConstant("immediate", "immediate", 1)
    prop._addConstant("lazy", "on-demand", 2)
    prop._addConstant("pre-provision", "pre-provision", 3)
    meta.props.add("resImedcy", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "secondaryEncapInner", "secondaryEncapInner", 34686, PropCategory.REGULAR)
    prop.label = "Secondary encapsulation for inner traffic"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("secondaryEncapInner", prop)

    prop = PropMeta("str", "statsCollectionState", "statsCollectionState", 987, PropCategory.REGULAR)
    prop.label = "Indicates whether Statistics should be Collected for this Object"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("statsCollectionState", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "switchingMode", "switchingMode", 35667, PropCategory.REGULAR)
    prop.label = "EPG Switching Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "native"
    prop._addConstant("AVE", "ave", 1)
    prop._addConstant("native", "native", 0)
    meta.props.add("switchingMode", prop)

    prop = PropMeta("str", "txId", "txId", 26232, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("txId", prop)

    prop = PropMeta("str", "type", "type", 986, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "Tenant"
    prop._addConstant("L3Out", "l3out", 4)
    prop._addConstant("Mgmt", "mgmt", 1)
    prop._addConstant("Services", "services", 3)
    prop._addConstant("Tenant", "tenant", 2)
    prop._addConstant("Uplink", "uplink", 5)
    meta.props.add("type", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "untagged", "untagged", 54963, PropCategory.REGULAR)
    prop.label = "Untagged Access Port"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("untagged", prop)

    prop = PropMeta("str", "updateTs", "updateTs", 18595, PropCategory.REGULAR)
    prop.label = "Update Timestamp"
    prop.isOper = True
    meta.props.add("updateTs", prop)

    prop = PropMeta("str", "vnetOnly", "vnetOnly", 62492, PropCategory.REGULAR)
    prop.label = "only create Virtual Network"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("vnetOnly", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVmmOrchsProvPlan", "Provider Plans", "cobra.model.vmm.OrchsProvPlan"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ADomPToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVmmEpPD", "Portgroups", "cobra.model.vmm.EpPD"))

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

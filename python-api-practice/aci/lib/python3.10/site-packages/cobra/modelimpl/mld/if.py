# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class If(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.mld.If")

    meta.moClassName = "mldIf"
    meta.rnFormat = "if-[%(id)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "MLD Interface"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.mld.IfStats")
    meta.childClasses.add("cobra.model.mld.QuerierP")
    meta.childClasses.add("cobra.model.mld.ResP")
    meta.childClasses.add("cobra.model.mld.RepP")
    meta.childClasses.add("cobra.model.nw.RtPathToIf")
    meta.childClasses.add("cobra.model.mld.StRepP")

    meta.childNamesAndRnPrefix.append(("cobra.model.nw.RtPathToIf", "rtpathToIf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mld.StRepP", "streppol-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mld.QuerierP", "querierp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mld.IfStats", "IfStats"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mld.RepP", "reppol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mld.ResP", "limit"))

    meta.parentClasses.add("cobra.model.mld.Dom")

    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.l3.ProtIf")
    meta.superClasses.add("cobra.model.ipmc.AIf")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.LogicalIf")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.Ep")
    meta.superClasses.add("cobra.model.nw.ProtIf")
    meta.superClasses.add("cobra.model.nw.If")

    meta.rnPrefixes = [
        ('if-', True),
    ]

    prop = PropMeta("str", "actQuer", "actQuer", 24572, PropCategory.REGULAR)
    prop.label = "IGMP active querier IP"
    prop.isOper = True
    meta.props.add("actQuer", prop)

    prop = PropMeta("str", "adminSt", "adminSt", 3674, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 5585, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "entryCount", "entryCount", 26452, PropCategory.REGULAR)
    prop.label = "Dynamic entry count"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("entryCount", prop)

    prop = PropMeta("str", "flags", "flags", 26294, PropCategory.REGULAR)
    prop.label = "Flags"
    prop.isOper = True
    prop._addConstant("mcast", "multicast-enabled", 1)
    meta.props.add("flags", prop)

    prop = PropMeta("str", "grpTimeout", "grpTimeout", 24571, PropCategory.REGULAR)
    prop.label = "Group Membership Timeout"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(3, 65535)]
    prop.defaultValue = 260
    prop.defaultValueStr = "260"
    meta.props.add("grpTimeout", prop)

    prop = PropMeta("str", "id", "id", 55527, PropCategory.REGULAR)
    prop.label = "Interface ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "ifCtrl", "ifCtrl", 24569, PropCategory.REGULAR)
    prop.label = "Controls"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("allow-v3-asm", "allow-v3-asm", 4)
    prop._addConstant("fast-leave", "fast-leave", 2)
    prop._addConstant("rep-ll", "report-link-local-groups", 1)
    meta.props.add("ifCtrl", prop)

    prop = PropMeta("str", "ipAddr", "ipAddr", 27403, PropCategory.REGULAR)
    prop.label = "IP Address of the interface"
    prop.isOper = True
    meta.props.add("ipAddr", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "netId", "netId", 55508, PropCategory.REGULAR)
    prop.label = "Connected Network Id"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("netId", prop)

    prop = PropMeta("str", "nextQuerTime", "nextQuerTime", 24573, PropCategory.REGULAR)
    prop.label = "IGMP next query time"
    prop.isOper = True
    meta.props.add("nextQuerTime", prop)

    prop = PropMeta("str", "querExpiry", "querExpiry", 27049, PropCategory.REGULAR)
    prop.label = "Querier expiry time"
    prop.isOper = True
    meta.props.add("querExpiry", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "role", "role", 55509, PropCategory.REGULAR)
    prop.label = "Role"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("external", "external", 1)
    prop._addConstant("internal", "internal", 0)
    meta.props.add("role", prop)

    prop = PropMeta("str", "stEntryCount", "stEntryCount", 26453, PropCategory.REGULAR)
    prop.label = "Static Entry count"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("stEntryCount", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "ver", "ver", 24570, PropCategory.REGULAR)
    prop.label = "Version"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "v2"
    prop._addConstant("v2", "version-2", 2)
    prop._addConstant("v3", "version-3", 3)
    meta.props.add("ver", prop)

    meta.namingProps.append(getattr(meta.props, "id"))
    getattr(meta.props, "id").needDelimiter = True

    meta.deploymentCategory = DeploymentCategory("interface", "Interface")
    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

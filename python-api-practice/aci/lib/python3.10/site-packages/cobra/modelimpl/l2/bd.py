# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class BD(Mo):
    """
    The Layer 2 Bridge-domain identifies the boundary of a tenant?s bridged/layer 2 traffic. This is similar to a VLAN in a traditional layer 2 switched network.

    """

    meta = ClassMeta("cobra.model.l2.BD")

    meta.moClassName = "l2BD"
    meta.rnFormat = "bd-[%(fabEncap)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Bridge Domain"
    meta.writeAccessMask = 0x200000000001
    meta.readAccessMask = 0x208401002001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.epm.DynEpgPolicyTrig")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.l2.MpBd")
    meta.childClasses.add("cobra.model.l2.EpRetPol")
    meta.childClasses.add("cobra.model.l2.CfgMacEp")
    meta.childClasses.add("cobra.model.qinq.CktEp")
    meta.childClasses.add("cobra.model.l2.MacCktEp")
    meta.childClasses.add("cobra.model.vxlan.CktEp")
    meta.childClasses.add("cobra.model.l2.EpScanInfo")
    meta.childClasses.add("cobra.model.vlan.CktEp")
    meta.childClasses.add("cobra.model.l2.RsExtBD")
    meta.childClasses.add("cobra.model.l2.RsPathDomAtt")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.l2.RtDomIfConn")
    meta.childClasses.add("cobra.model.vsan.CktEp")
    meta.childClasses.add("cobra.model.svi.If")
    meta.childClasses.add("cobra.model.l2.EpCtrl")
    meta.childClasses.add("cobra.model.l2.AnchorBD")
    meta.childClasses.add("cobra.model.l3.IpCktEp")
    meta.childClasses.add("cobra.model.epm.Db")
    meta.childClasses.add("cobra.model.fmcast.Grp")
    meta.childClasses.add("cobra.model.l3.StaticRouteIpEp")
    meta.childClasses.add("cobra.model.l2.RtEPgDefToL2Dom")

    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RtEPgDefToL2Dom", "rtfvEPgDefToL2Dom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.epm.DynEpgPolicyTrig", "dynepgpolicytrig"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RtDomIfConn", "rtfvDomIfConn-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RsPathDomAtt", "rspathDomAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EpScanInfo", "epsScanInfo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.MacCktEp", "maccktep-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.StaticRouteIpEp", "strtipep-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RsExtBD", "rsextBD-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.AnchorBD", "anchorbd"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.IpCktEp", "ipcktep-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EpCtrl", "epctrl-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vxlan.CktEp", "vxlan-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fmcast.Grp", "fmgrp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.MpBd", "mpbd-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EpRetPol", "epret"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qinq.CktEp", "qinq-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vlan.CktEp", "vlan-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vsan.CktEp", "vsan-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.CfgMacEp", "mac-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.svi.If", "svi-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.epm.Db", "db-"))

    meta.parentClasses.add("cobra.model.l3.Ctx")
    meta.parentClasses.add("cobra.model.l3.Inst")
    meta.parentClasses.add("cobra.model.l3.CtxSubstitute")

    meta.superClasses.add("cobra.model.l2.ADom")
    meta.superClasses.add("cobra.model.l2.Dom")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.GEp")
    meta.superClasses.add("cobra.model.nw.FwDom")

    meta.rnPrefixes = [
        ('bd-', True),
    ]

    prop = PropMeta("str", "accEncap", "accEncap", 3525, PropCategory.REGULAR)
    prop.label = "Access Encapsulation"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("accEncap", prop)

    prop = PropMeta("str", "addr", "addr", 45342, PropCategory.REGULAR)
    prop.label = "Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("addr", prop)

    prop = PropMeta("str", "adminSt", "adminSt", 3565, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "active"
    prop._addConstant("active", "active", 2)
    prop._addConstant("suspend", "suspend", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "bdDefDn", "bdDefDn", 15333, PropCategory.REGULAR)
    prop.label = "Peer BDDef Dn"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("bdDefDn", prop)

    prop = PropMeta("str", "bridgeMode", "bridgeMode", 3527, PropCategory.REGULAR)
    prop.label = "Bridging Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "mac"
    prop._addConstant("ip", "bridge-with-ip", 1)
    prop._addConstant("mac", "bridge-with-mac", 2)
    meta.props.add("bridgeMode", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "createTs", "createTs", 3567, PropCategory.REGULAR)
    prop.label = "Creation Timestamp"
    prop.isOper = True
    meta.props.add("createTs", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 16219, PropCategory.REGULAR)
    prop.label = "Controls"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("anchor", "anchor-bd-floating-l3out", 128)
    prop._addConstant("en_ivxlan_dl", "enable-ivxlan-dont-learn-bit", 32)
    prop._addConstant("isolated", "intra-epg-deny-enforced", 4)
    prop._addConstant("non-anchor", "non-anchor-bd-floating-l3out", 256)
    prop._addConstant("none", "none", 0)
    prop._addConstant("policy-enforced", "policy-enforced", 2)
    prop._addConstant("qiq", "qiq", 16)
    prop._addConstant("service-ep", "service-ep", 8)
    prop._addConstant("transparent-ep", "transparent-ep", 64)
    prop._addConstant("untagged", "untagged", 1)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "epMoveDetectMode", "epMoveDetectMode", 19111, PropCategory.REGULAR)
    prop.label = "EP Move Detection Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("garp", "garp-based-detection", 1)
    meta.props.add("epMoveDetectMode", prop)

    prop = PropMeta("str", "epOperSt", "epOperSt", 3531, PropCategory.REGULAR)
    prop.label = "EP Operational State"
    prop.isOper = True
    prop._addConstant("learn-disabled", "learning-disabled", 1)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("epOperSt", prop)

    prop = PropMeta("str", "epOperStQual", "epOperStQual", 44350, PropCategory.REGULAR)
    prop.label = "EP Operational State Qualifier"
    prop.isOper = True
    prop._addConstant("bd-loop-detection", "bd-loop-detection", 3)
    prop._addConstant("bd-move-freq", "bd-move-frequency", 4)
    prop._addConstant("bd-pfx-flush", "bd-prefix-flush", 2)
    prop._addConstant("fd-pfx-flush", "fd-prefix-flush", 5)
    prop._addConstant("fd-tcn", "fd-tcn", 6)
    prop._addConstant("unspecified", "unspecified", 0)
    prop._addConstant("vrf-pfx-flush", "vrf-prefix-flush", 1)
    meta.props.add("epOperStQual", prop)

    prop = PropMeta("str", "epUpSeqNum", "epUpSeqNum", 20274, PropCategory.REGULAR)
    prop.label = "EP Update Sequence Number"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("epUpSeqNum", prop)

    prop = PropMeta("str", "fabEncap", "fabEncap", 3524, PropCategory.REGULAR)
    prop.label = "Fabric Encapsulation"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("fabEncap", prop)

    prop = PropMeta("str", "fwdCtrl", "fwdCtrl", 27137, PropCategory.REGULAR)
    prop.label = "Forwarding Controls"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "mdst-flood"
    prop._addConstant("arp-flood", "enable-arp-flooding", 2)
    prop._addConstant("copy-service", "enable-copy-service-on-bd", 64)
    prop._addConstant("encap-flood", "flood-in-encapsulation", 256)
    prop._addConstant("ip-learn-disable", "disable-ip-learning", 8)
    prop._addConstant("ip-learn-subnet-check", "enable-ip-learn-subnet-check", 4)
    prop._addConstant("mac-flush-on-vpc-delete", "delete-vpc-mac-addressesfrom-fabric-on-ep-delete", 128)
    prop._addConstant("mac-learn-disable", "disable-mac-learning", 16)
    prop._addConstant("mdst-flood", "enable-multi-destination-flooding", 1)
    prop._addConstant("ng-avs", "learn-feature-for-avs", 512)
    prop._addConstant("proxy-arp", "enable-proxy-arp-on-epg", 32)
    meta.props.add("fwdCtrl", prop)

    prop = PropMeta("str", "fwdMode", "fwdMode", 3526, PropCategory.REGULAR)
    prop.label = "Forwarding Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = "route,bridge"
    prop.defaultValueStr = "route,bridge"
    prop._addConstant("bridge", "l2-bridging", 2)
    prop._addConstant("route", "l3-forwarding", 1)
    meta.props.add("fwdMode", prop)

    prop = PropMeta("str", "hwId", "hwId", 3563, PropCategory.REGULAR)
    prop.label = "Hardware Resource ID"
    prop.isOper = True
    prop.range = [(1, 4096)]
    meta.props.add("hwId", prop)

    prop = PropMeta("str", "hwResourceId", "hwResourceId", 26236, PropCategory.REGULAR)
    prop.label = "Hardware Resource Identifier"
    prop.isOper = True
    prop.range = [(0, 32767)]
    meta.props.add("hwResourceId", prop)

    prop = PropMeta("str", "hwShadowId", "hwShadowId", 52072, PropCategory.REGULAR)
    prop.label = "Hardware Shadow Resource Identifier"
    prop.isOper = True
    prop.range = [(0, 32767)]
    meta.props.add("hwShadowId", prop)

    prop = PropMeta("str", "id", "id", 3562, PropCategory.REGULAR)
    prop.label = "Domain ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.range = [(1, 4096)]
    meta.props.add("id", prop)

    prop = PropMeta("str", "ipv6McastAllow", "ipv6McastAllow", 47407, PropCategory.REGULAR)
    prop.label = "ipv6 Multicast Allow"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("ipv6McastAllow", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "mcastAllow", "mcastAllow", 24952, PropCategory.REGULAR)
    prop.label = "Multicast Allow"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("mcastAllow", prop)

    prop = PropMeta("str", "mcastOperSt", "mcastOperSt", 20787, PropCategory.REGULAR)
    prop.label = "Multicast Operational State"
    prop.isOper = True
    prop._addConstant("opt-flood-ignored", "optimized-flood-ignored", 1)
    meta.props.add("mcastOperSt", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 3564, PropCategory.REGULAR)
    prop.label = "Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "CE"
    prop._addConstant("CE", "ce", 1)
    prop._addConstant("FabricPath", "fabricpath", 2)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14538, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "multiDstPktAct", "multiDstPktAct", 18027, PropCategory.REGULAR)
    prop.label = "Multi Destination Packet Action"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "bd-flood"
    prop._addConstant("bd-flood", "flood-in-bd", 0)
    prop._addConstant("drop", "drop", 2)
    prop._addConstant("encap-flood", "flood-in-encapsulation", 1)
    meta.props.add("multiDstPktAct", prop)

    prop = PropMeta("str", "name", "name", 16433, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operSt", "operSt", 3566, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "down"
    prop._addConstant("down", "down", 2)
    prop._addConstant("up", "up", 1)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "pcTag", "pcTag", 3530, PropCategory.REGULAR)
    prop.label = "PC Tag"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("any", "any", 0)
    meta.props.add("pcTag", prop)

    prop = PropMeta("str", "qiqL2ProtTunMask", "qiqL2ProtTunMask", 27847, PropCategory.REGULAR)
    prop.label = "QiQ L2 Protocol Tunneling Mask"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("cdp", "cdp", 4)
    prop._addConstant("lacp", "lacp", 8)
    prop._addConstant("lldp", "lldp", 2)
    prop._addConstant("none", "none", 0)
    prop._addConstant("stp", "stp", 1)
    prop._addConstant("vtp", "vtp", 16)
    meta.props.add("qiqL2ProtTunMask", prop)

    prop = PropMeta("str", "qosPrio", "qosPrio", 28067, PropCategory.REGULAR)
    prop.label = "Qos Priority"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 9)]
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("level1", "level1", 3)
    prop._addConstant("level2", "level2", 2)
    prop._addConstant("level3", "level3-(default)", 1)
    prop._addConstant("level4", "level4", 9)
    prop._addConstant("level5", "level5", 8)
    prop._addConstant("level6", "level6", 7)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("qosPrio", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "type", "type", 3561, PropCategory.REGULAR)
    prop.label = "Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "bd-regular"
    prop._addConstant("bd-control", "bd-control", 3)
    prop._addConstant("bd-external", "bd-external", 4)
    prop._addConstant("bd-fcoe", "bd-fcoe", 7)
    prop._addConstant("bd-regular", "bd-regular", 1)
    prop._addConstant("bd-reserved", "bd-reserved", 2)
    prop._addConstant("ckt-vlan", "vlan-circuit", 5)
    prop._addConstant("ckt-vxlan", "vxlan-circuit", 6)
    meta.props.add("type", prop)

    prop = PropMeta("str", "unkMacUcastAct", "unkMacUcastAct", 3529, PropCategory.REGULAR)
    prop.label = "Unknown MAC Unicast Destination Action"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "proxy"
    prop._addConstant("flood", "flood", 0)
    prop._addConstant("proxy", "hardware-proxy", 1)
    meta.props.add("unkMacUcastAct", prop)

    prop = PropMeta("str", "unkMcastAct", "unkMcastAct", 15997, PropCategory.REGULAR)
    prop.label = "Unknown Multicast Destination Action"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "flood"
    prop._addConstant("flood", "flood", 0)
    prop._addConstant("opt-flood", "optimized-flood", 1)
    meta.props.add("unkMcastAct", prop)

    prop = PropMeta("str", "v6unkMcastAct", "v6unkMcastAct", 47704, PropCategory.REGULAR)
    prop.label = "Unknown V6 Multicast Destination Action"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "flood"
    prop._addConstant("flood", "flood", 0)
    prop._addConstant("opt-flood", "optimized-flood", 1)
    meta.props.add("v6unkMcastAct", prop)

    prop = PropMeta("str", "vlanmgrCfgFailedBmp", "vlanmgrCfgFailedBmp", 14927, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("vlanmgrCfgFailedBmp", prop)

    prop = PropMeta("str", "vlanmgrCfgFailedTs", "vlanmgrCfgFailedTs", 14929, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("vlanmgrCfgFailedTs", prop)

    prop = PropMeta("str", "vlanmgrCfgState", "vlanmgrCfgState", 14928, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("vlanmgrCfgState", prop)

    prop = PropMeta("str", "vlanmgrCustFaultBmp", "vlanmgrCustFaultBmp", 35424, PropCategory.REGULAR)
    prop.label = "vlan custom fault"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("dtag-platform-unsupported", "qinq-to-epg-translation-not-supported", 1)
    prop._addConstant("l3vif-platform-unsupported", "l3-external-virtual-if-not-supported", 2)
    prop._addConstant("none", "none", 0)
    meta.props.add("vlanmgrCustFaultBmp", prop)

    meta.namingProps.append(getattr(meta.props, "fabEncap"))
    getattr(meta.props, "fabEncap").needDelimiter = True

    def __init__(self, parentMoOrDn, fabEncap, markDirty=True, **creationProps):
        namingVals = [fabEncap]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Dom(Mo):
    """
    The object that represents all the BGP domain (VRF) information.

    """

    meta = ClassMeta("cobra.model.bgp.Dom")

    meta.moClassName = "bgpDom"
    meta.rnFormat = "dom-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Domain"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.bgp.DomAf")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.bgp.DomEvi")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.bgp.PathCtrl")
    meta.childClasses.add("cobra.model.bgp.Db")
    meta.childClasses.add("cobra.model.bgp.Gr")
    meta.childClasses.add("cobra.model.bgp.Peer")
    meta.childClasses.add("cobra.model.bgp.BDEvi")

    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.PathCtrl", "pathctrl"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.BDEvi", "bdevi-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.Peer", "peer-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.DomAf", "af-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.DomEvi", "evi"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.Db", "db-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.Gr", "gr"))

    meta.parentClasses.add("cobra.model.bgp.Inst")

    meta.superClasses.add("cobra.model.nw.ProtDom")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.CpDom")
    meta.superClasses.add("cobra.model.nw.GEp")
    meta.superClasses.add("cobra.model.l3.ProtDom")

    meta.rnPrefixes = [
        ('dom-', True),
    ]

    prop = PropMeta("str", "bgpCfgFailedBmp", "bgpCfgFailedBmp", 14981, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("bgp:DomclusterId_failed_flag", None, 16)
    prop._addConstant("bgp:Domctrl_failed_flag", None, 32)
    prop._addConstant("bgp:Domencap_failed_flag", None, 64)
    prop._addConstant("bgp:DomfirstBestPathDelay_failed_flag", None, 128)
    prop._addConstant("bgp:DomholdIntvl_failed_flag", None, 1024)
    prop._addConstant("bgp:DomkaIntvl_failed_flag", None, 2048)
    prop._addConstant("bgp:DomlcOwn_failed_flag", None, -9223372036854775808)
    prop._addConstant("bgp:DommaxAsLimit_failed_flag", None, 4096)
    prop._addConstant("bgp:DommodTs_failed_flag", None, 2305843009213693952)
    prop._addConstant("bgp:Dommode_failed_flag", None, 8192)
    prop._addConstant("bgp:DommonPolDn_failed_flag", None, 16384)
    prop._addConstant("bgp:DommsiteClusterId_failed_flag", None, 32768)
    prop._addConstant("bgp:Domname_failed_flag", None, 1)
    prop._addConstant("bgp:Domrd_failed_flag", None, 1048576)
    prop._addConstant("bgp:DomrtrId_failed_flag", None, 2097152)
    prop._addConstant("bgp:Domtype_failed_flag", None, 4194304)
    meta.props.add("bgpCfgFailedBmp", prop)

    prop = PropMeta("str", "bgpCfgFailedTs", "bgpCfgFailedTs", 14983, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("bgpCfgFailedTs", prop)

    prop = PropMeta("str", "bgpCfgState", "bgpCfgState", 14982, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("bgpCfgState", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "clusterId", "clusterId", 2543, PropCategory.REGULAR)
    prop.label = "Cluster ID"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 4294967295)]
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("clusterId", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 49935, PropCategory.REGULAR)
    prop.label = "Control"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("intersiteL3out", "l3out-stretch-across-sites", 1)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "encap", "encap", 20641, PropCategory.REGULAR)
    prop.label = "Encapsulation"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("encap", prop)

    prop = PropMeta("str", "firstBestPathDelay", "firstBestPathDelay", 20985, PropCategory.REGULAR)
    prop.label = "First Best Path Delay Time"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 3600)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("firstBestPathDelay", prop)

    prop = PropMeta("str", "firstPeerUpTs", "firstPeerUpTs", 2549, PropCategory.REGULAR)
    prop.label = "First Peer Up Timestamp"
    prop.isOper = True
    meta.props.add("firstPeerUpTs", prop)

    prop = PropMeta("str", "flags", "flags", 41028, PropCategory.REGULAR)
    prop.label = "Dom Flags"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("rtr-id-change", "router-id-change", 1)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("flags", prop)

    prop = PropMeta("str", "holdIntvl", "holdIntvl", 2545, PropCategory.REGULAR)
    prop.label = "Hold Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 0), (3, 3600)]
    prop.defaultValue = 180
    prop.defaultValueStr = "180"
    meta.props.add("holdIntvl", prop)

    prop = PropMeta("str", "kaIntvl", "kaIntvl", 2544, PropCategory.REGULAR)
    prop.label = "Keepalive Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 3600)]
    prop.defaultValue = 60
    prop.defaultValueStr = "60"
    meta.props.add("kaIntvl", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "maxAsLimit", "maxAsLimit", 16991, PropCategory.REGULAR)
    prop.label = "Max AS Limit"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 2000)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("maxAsLimit", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 2541, PropCategory.REGULAR)
    prop.label = "Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "fabric"
    prop._addConstant("external", "external", 2)
    prop._addConstant("fabric", "fabric", 1)
    prop._addConstant("proxy", "proxy", 3)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14448, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "msiteClusterId", "msiteClusterId", 30378, PropCategory.REGULAR)
    prop.label = "Multi-Site Cluster ID"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 4294967295)]
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("msiteClusterId", prop)

    prop = PropMeta("str", "name", "name", 5874, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "numEstPeers", "numEstPeers", 2551, PropCategory.REGULAR)
    prop.label = "Number of Established Peers"
    prop.isOper = True
    meta.props.add("numEstPeers", prop)

    prop = PropMeta("str", "numPeers", "numPeers", 2550, PropCategory.REGULAR)
    prop.label = "Number of Peers"
    prop.isOper = True
    meta.props.add("numPeers", prop)

    prop = PropMeta("str", "operRtrId", "operRtrId", 2548, PropCategory.REGULAR)
    prop.label = "Operational Router ID"
    prop.isOper = True
    meta.props.add("operRtrId", prop)

    prop = PropMeta("str", "operSt", "operSt", 2547, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("down", "down", 2)
    prop._addConstant("unknown", "unknown", 0)
    prop._addConstant("up", "up", 1)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "rd", "rd", 2546, PropCategory.REGULAR)
    prop.label = "Route Distinguisher"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("rd", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "rtrId", "rtrId", 2542, PropCategory.REGULAR)
    prop.label = "Router ID"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("rtrId", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "type", "type", 20640, PropCategory.REGULAR)
    prop.label = "Domain Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "system"
    prop._addConstant("limited", "limited-domain", 2)
    prop._addConstant("system", "system-domain", 1)
    meta.props.add("type", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

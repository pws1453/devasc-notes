# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class DomAf(Mo):
    """
    The BGP (VRF) address family information.

    """

    meta = ClassMeta("cobra.model.bgp.DomAf")

    meta.moClassName = "bgpDomAf"
    meta.rnFormat = "af-%(type)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Address Family Domain"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.bgp.RtExpP")
    meta.childClasses.add("cobra.model.bgp.HostLeakP")
    meta.childClasses.add("cobra.model.bgp.RtSum")
    meta.childClasses.add("cobra.model.bgp.NextHop")
    meta.childClasses.add("cobra.model.bgp.AdminDist")
    meta.childClasses.add("cobra.model.bgp.AddlPath")
    meta.childClasses.add("cobra.model.bgp.RttP")
    meta.childClasses.add("cobra.model.bgp.VpnRoute")
    meta.childClasses.add("cobra.model.bgp.VpnCtrlP")
    meta.childClasses.add("cobra.model.bgp.Route")
    meta.childClasses.add("cobra.model.bgp.RibLeakP")
    meta.childClasses.add("cobra.model.bgp.DefRtLeakP")
    meta.childClasses.add("cobra.model.bgp.InterLeakP")
    meta.childClasses.add("cobra.model.bgp.DampeningCtrl")

    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.InterLeakP", "interleak-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.AdminDist", "adminDist"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.DefRtLeakP", "defrtleak"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.DampeningCtrl", "dampening"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.HostLeakP", "hostleak"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.AddlPath", "addlpath"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.RibLeakP", "ribleak"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.RtExpP", "rtexp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.RtSum", "rtsum-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.VpnRoute", "vpnrt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.RttP", "rttp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.VpnCtrlP", "ctrl-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.NextHop", "nh-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.Route", "rt-"))

    meta.parentClasses.add("cobra.model.bgp.Dom")

    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.CpDom")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.bgp.Af")
    meta.superClasses.add("cobra.model.nw.GEp")

    meta.rnPrefixes = [
        ('af-', True),
    ]

    prop = PropMeta("str", "bestPathCmpltTs", "bestPathCmpltTs", 2554, PropCategory.REGULAR)
    prop.label = "Best Path Completed Timestamp"
    prop.isOper = True
    meta.props.add("bestPathCmpltTs", prop)

    prop = PropMeta("str", "bestPathSigTs", "bestPathSigTs", 2553, PropCategory.REGULAR)
    prop.label = "Best Path Signalled Timestamp"
    prop.isOper = True
    meta.props.add("bestPathSigTs", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "critNhTimeout", "critNhTimeout", 2555, PropCategory.REGULAR)
    prop.label = "Critical Next-hop Trigger-delay"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(3000, 10000)]
    prop.defaultValue = 3000
    prop.defaultValueStr = "crit"
    prop._addConstant("crit", "next-hop-critical-trigger-delay", 3000)
    meta.props.add("critNhTimeout", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "maxEcmp", "maxEcmp", 2552, PropCategory.REGULAR)
    prop.label = "Max ECMP for eBGP Routes"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 64)]
    prop.defaultValue = 16
    prop.defaultValueStr = "16"
    meta.props.add("maxEcmp", prop)

    prop = PropMeta("str", "maxEcmpIbgp", "maxEcmpIbgp", 33356, PropCategory.REGULAR)
    prop.label = "Max ECMP for iBGP Routes"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 64)]
    prop.defaultValue = 16
    prop.defaultValueStr = "16"
    meta.props.add("maxEcmpIbgp", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 16434, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "nonCritNhTimeout", "nonCritNhTimeout", 2556, PropCategory.REGULAR)
    prop.label = "Non-Critical Next-hop Trigger-delay"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(3000, 10000)]
    prop.defaultValue = 10000
    prop.defaultValueStr = "noncrit"
    prop._addConstant("noncrit", "next-hop-non-critical-trigger-delay", 10000)
    meta.props.add("nonCritNhTimeout", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tblVer", "tblVer", 2557, PropCategory.REGULAR)
    prop.label = "Table Version"
    prop.isOper = True
    meta.props.add("tblVer", prop)

    prop = PropMeta("str", "type", "type", 5875, PropCategory.REGULAR)
    prop.label = "Type"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 1
    prop.defaultValueStr = "ipv4-ucast"
    prop._addConstant("ipv4-mcast", "ipv4-multicast-address-family", 7)
    prop._addConstant("ipv4-ucast", "ipv4-unicast-address-family", 1)
    prop._addConstant("ipv6-mcast", "ipv6-multicast-address-family", 8)
    prop._addConstant("ipv6-ucast", "ipv6-unicast-address-family", 3)
    prop._addConstant("l2vpn-evpn", "l2vpn-evpn-address-family", 5)
    prop._addConstant("rtfilter-ucast", "route-target-filter-address-family", 6)
    prop._addConstant("vpnv4-ucast", "vpnv4-unicast-address-family", 2)
    prop._addConstant("vpnv6-ucast", "vpnv6-unicast-address-family", 4)
    meta.props.add("type", prop)

    meta.namingProps.append(getattr(meta.props, "type"))

    def __init__(self, parentMoOrDn, type, markDirty=True, **creationProps):
        namingVals = [type]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

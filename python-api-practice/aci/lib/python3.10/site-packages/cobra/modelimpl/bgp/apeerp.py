# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class APeerP(Mo):
    meta = ClassMeta("cobra.model.bgp.APeerP")

    meta.isAbstract = True
    meta.moClassName = "bgpAPeerP"


    meta.moClassName = "bgpAPeerP"
    meta.rnFormat = ""
    meta.category = MoCategory.REGULAR
    meta.label = "Abstraction of Peer Connectivity Profile"
    meta.writeAccessMask = 0x20000001
    meta.readAccessMask = 0x20000001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.bgp.RsPeerPfxPol")
    meta.childClasses.add("cobra.model.fault.Delegate")

    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.RsPeerPfxPol", "rspeerPfxPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.superClasses.add("cobra.model.fabric.ProtoComp")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Comp")
    meta.superClasses.add("cobra.model.fabric.L3ProtoComp")
    meta.superClasses.add("cobra.model.naming.NamedObject")

    meta.concreteSubClasses.add("cobra.model.bgp.InfraPeerDef")
    meta.concreteSubClasses.add("cobra.model.bgp.PeerP")
    meta.concreteSubClasses.add("cobra.model.bgp.PeerDef")
    meta.concreteSubClasses.add("cobra.model.bgp.InfraPeerP")

    meta.rnPrefixes = [
    ]

    prop = PropMeta("str", "ConfigIssues", "ConfigIssues", 52317, PropCategory.REGULAR)
    prop.label = "Deployment Status"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("no-loopback-configured", "no-loopback-configured-under-node-profile", 1)
    prop._addConstant("none", "none", 0)
    meta.props.add("ConfigIssues", prop)

    prop = PropMeta("str", "addr", "addr", 818, PropCategory.REGULAR)
    prop.label = "Peer Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("addr", prop)

    prop = PropMeta("str", "addrTCtrl", "addrTCtrl", 50055, PropCategory.REGULAR)
    prop.label = "Address Type AF Controls"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "af-ucast"
    prop._addConstant("af-mcast", "af-mcast", 2)
    prop._addConstant("af-ucast", "af-ucast", 1)
    meta.props.add("addrTCtrl", prop)

    prop = PropMeta("str", "adminSt", "adminSt", 54121, PropCategory.REGULAR)
    prop.label = "Administrative State"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "allowedSelfAsCnt", "allowedSelfAsCnt", 18174, PropCategory.REGULAR)
    prop.label = "Allowed Self AS Count"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 10)]
    prop.defaultValue = 3
    prop.defaultValueStr = "3"
    meta.props.add("allowedSelfAsCnt", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 820, PropCategory.REGULAR)
    prop.label = "Peer AF Controls"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop._addConstant("allow-self-as", "allow-self-as", 32)
    prop._addConstant("as-override", "as-override", 64)
    prop._addConstant("dis-peer-as-check", "disable-peer-as-check", 16)
    prop._addConstant("nh-self", "next-hop-self", 8)
    prop._addConstant("send-com", "send-community", 1)
    prop._addConstant("send-ext-com", "send-extended-community", 2)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "descr", "descr", 5582, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "password", "password", 819, PropCategory.REGULAR)
    prop.label = "Password"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isPassword = True
    meta.props.add("password", prop)

    prop = PropMeta("str", "peerCtrl", "peerCtrl", 18173, PropCategory.REGULAR)
    prop.label = "Peer Controls"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop._addConstant("bfd", "bidirectional-forwarding-detection", 1)
    prop._addConstant("dis-conn-check", "disable-connected-check", 2)
    meta.props.add("peerCtrl", prop)

    prop = PropMeta("str", "privateASctrl", "privateASctrl", 22647, PropCategory.REGULAR)
    prop.label = "Private AS Control"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop._addConstant("remove-all", "remove-all-private-as", 2)
    prop._addConstant("remove-exclusive", "remove-private-as", 1)
    prop._addConstant("replace-as", "replace-private-as-with-local-as", 4)
    meta.props.add("privateASctrl", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "sessionT", "sessionT", 21364, PropCategory.REGULAR)
    prop.label = "Peer Session Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "peer"
    prop._addConstant("client", "client", 2)
    prop._addConstant("peer", "peer", 1)
    meta.props.add("sessionT", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "ttl", "ttl", 18175, PropCategory.REGULAR)
    prop.label = "eBGP Multihop TTL value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 255)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("ttl", prop)

    prop = PropMeta("str", "weight", "weight", 22646, PropCategory.REGULAR)
    prop.label = "Weight for routes from this neighbor"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("weight", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

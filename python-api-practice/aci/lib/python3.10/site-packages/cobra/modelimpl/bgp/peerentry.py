# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class PeerEntry(Mo):
    """
    The BGP peer status specifies the status of a relationship between BGP speakers. A BGP speaker does not discover another BGP speaker automatically.  You must configure the relationships between BGP speakers. A BGP peer is a BGP speaker that has an active TCP connection to another BGP speaker.

    """

    meta = ClassMeta("cobra.model.bgp.PeerEntry")

    meta.moClassName = "bgpPeerEntry"
    meta.rnFormat = "ent-[%(addr)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "BGP Peer Entry"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.bgp.GrSt")
    meta.childClasses.add("cobra.model.bgp.PeerAfEntry")
    meta.childClasses.add("cobra.model.bgp.PeerEntryStats")
    meta.childClasses.add("cobra.model.bgp.PeerEvents")

    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.PeerEntryStats", "peerstats"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.PeerAfEntry", "af-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.GrSt", "gr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.PeerEvents", "ev"))

    meta.parentClasses.add("cobra.model.bgp.Peer")

    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.nw.AdjEp")
    meta.superClasses.add("cobra.model.l3.ProtAdjEp")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.ProtAdjEp")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.rnPrefixes = [
        ('ent-', True),
    ]

    prop = PropMeta("str", "addr", "addr", 2587, PropCategory.REGULAR)
    prop.label = "Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("addr", prop)

    prop = PropMeta("str", "advCap", "advCap", 2594, PropCategory.REGULAR)
    prop.label = "Advertised Capability"
    prop.isOper = True
    prop._addConstant("as4", "as4-capable", 128)
    prop._addConstant("cap", "capability-parameter", 2048)
    prop._addConstant("dynamic", "dynamic", 1)
    prop._addConstant("dynamic-gr", "dynamic-graceful-restart", 4)
    prop._addConstant("dynamic-mp", "dynamic-multiprotocol", 2)
    prop._addConstant("dynamic-old", "dynamic-old", 16)
    prop._addConstant("dynamic-refresh", "dynamic-refresh", 8)
    prop._addConstant("gr", "graceful-restart", 256)
    prop._addConstant("gr-helper", "graceful-restart-helper", 16384)
    prop._addConstant("ipv4-mcast", "ipv4-multicast", 32768)
    prop._addConstant("ipv4-ucast", "ipv4-unicast", 512)
    prop._addConstant("ipv6-mcast", "ipv6-multicast", 65536)
    prop._addConstant("ipv6-ucast", "ipv6-unicast", 4096)
    prop._addConstant("l2vpn-evpn", "l2vpn-evpn-address-family", 131072)
    prop._addConstant("refresh", "refresh", 32)
    prop._addConstant("refresh-old", "refresh", 64)
    prop._addConstant("rtfilter-ucast", "ipv4-route-target-filter-address-family", 262144)
    prop._addConstant("vpnv4-ucast", "vpnv4-unicast", 1024)
    prop._addConstant("vpnv6-ucast", "vpnv6-unicast", 8192)
    meta.props.add("advCap", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "connAttempts", "connAttempts", 2610, PropCategory.REGULAR)
    prop.label = "Connection Attempts"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "na"
    prop._addConstant("na", None, 0)
    meta.props.add("connAttempts", prop)

    prop = PropMeta("str", "connDrop", "connDrop", 2604, PropCategory.REGULAR)
    prop.label = "Connections Dropped"
    prop.isOper = True
    prop.range = [(0, 65535)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("connDrop", prop)

    prop = PropMeta("str", "connEst", "connEst", 2603, PropCategory.REGULAR)
    prop.label = "Connections Established"
    prop.isOper = True
    prop.range = [(0, 65535)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("connEst", prop)

    prop = PropMeta("str", "connIf", "connIf", 2596, PropCategory.REGULAR)
    prop.label = "Directly Attached Interface"
    prop.isOper = True
    meta.props.add("connIf", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "fd", "fd", 2606, PropCategory.REGULAR)
    prop.label = "FD to Connect to Peer"
    prop.isOper = True
    meta.props.add("fd", prop)

    prop = PropMeta("str", "flags", "flags", 2593, PropCategory.REGULAR)
    prop.label = "Flags"
    prop.isOper = True
    prop._addConstant("cap-neg", "capability-negotiated", 2)
    prop._addConstant("cfg-peer", "configuration-peer", 16)
    prop._addConstant("direct-connect", "administratively-down", 1)
    prop._addConstant("gr-enabled", "graceful-restart-enabled", 4)
    prop._addConstant("no-mem", "memory-alert", 8)
    prop._addConstant("peer-restarted", "peer-restarted", 32)
    meta.props.add("flags", prop)

    prop = PropMeta("str", "holdIntvl", "holdIntvl", 2597, PropCategory.REGULAR)
    prop.label = "Hold Interval"
    prop.isOper = True
    prop.range = [(0, 0), (3, 3600)]
    prop.defaultValue = 180
    prop.defaultValueStr = "180"
    meta.props.add("holdIntvl", prop)

    prop = PropMeta("str", "kaIntvl", "kaIntvl", 2598, PropCategory.REGULAR)
    prop.label = "Keepalive Interval"
    prop.isOper = True
    prop.range = [(0, 3600)]
    prop.defaultValue = 60
    prop.defaultValueStr = "60"
    meta.props.add("kaIntvl", prop)

    prop = PropMeta("str", "lastFlapTs", "lastFlapTs", 2592, PropCategory.REGULAR)
    prop.label = "Last Flap Timestamp"
    prop.isOper = True
    meta.props.add("lastFlapTs", prop)

    prop = PropMeta("str", "localIp", "localIp", 2600, PropCategory.REGULAR)
    prop.label = "Local IP"
    prop.isOper = True
    meta.props.add("localIp", prop)

    prop = PropMeta("str", "localPort", "localPort", 2601, PropCategory.REGULAR)
    prop.label = "Local Port"
    prop.isOper = True
    prop.range = [(0, 65535)]
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("dns", "dns", 53)
    prop._addConstant("ftpData", "ftp-data", 20)
    prop._addConstant("http", "http", 80)
    prop._addConstant("https", "https", 443)
    prop._addConstant("pop3", "pop3", 110)
    prop._addConstant("rtsp", "rtsp", 554)
    prop._addConstant("smtp", "smtp", 25)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("localPort", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14450, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operSt", "operSt", 2589, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("active", "active", 5)
    prop._addConstant("closing", "closing", 9)
    prop._addConstant("connect", "connect", 4)
    prop._addConstant("error", "error", 10)
    prop._addConstant("established", "established", 8)
    prop._addConstant("idle", "idle", 3)
    prop._addConstant("illegal", "illegal", 1)
    prop._addConstant("open-confirm", "open-confirm", 7)
    prop._addConstant("open-sent", "open-sent", 6)
    prop._addConstant("shut", "shut", 2)
    prop._addConstant("unknown", "unknown", 11)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "passwdSet", "passwdSet", 2612, PropCategory.REGULAR)
    prop.label = "TCP MD5 Authentication"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", None, 0)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("passwdSet", prop)

    prop = PropMeta("str", "peerIdx", "peerIdx", 2607, PropCategory.REGULAR)
    prop.label = "Peer Index"
    prop.isOper = True
    meta.props.add("peerIdx", prop)

    prop = PropMeta("str", "prevOperSt", "prevOperSt", 2590, PropCategory.REGULAR)
    prop.label = "Previous Operational State"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("active", "active", 5)
    prop._addConstant("closing", "closing", 9)
    prop._addConstant("connect", "connect", 4)
    prop._addConstant("error", "error", 10)
    prop._addConstant("established", "established", 8)
    prop._addConstant("idle", "idle", 3)
    prop._addConstant("illegal", "illegal", 1)
    prop._addConstant("open-confirm", "open-confirm", 7)
    prop._addConstant("open-sent", "open-sent", 6)
    prop._addConstant("shut", "shut", 2)
    prop._addConstant("unknown", "unknown", 11)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("prevOperSt", prop)

    prop = PropMeta("str", "rcvCap", "rcvCap", 2595, PropCategory.REGULAR)
    prop.label = "Received Capability"
    prop.isOper = True
    prop._addConstant("as4", "as4-capable", 128)
    prop._addConstant("cap", "capability-parameter", 2048)
    prop._addConstant("dynamic", "dynamic", 1)
    prop._addConstant("dynamic-gr", "dynamic-graceful-restart", 4)
    prop._addConstant("dynamic-mp", "dynamic-multiprotocol", 2)
    prop._addConstant("dynamic-old", "dynamic-old", 16)
    prop._addConstant("dynamic-refresh", "dynamic-refresh", 8)
    prop._addConstant("gr", "graceful-restart", 256)
    prop._addConstant("gr-helper", "graceful-restart-helper", 16384)
    prop._addConstant("ipv4-mcast", "ipv4-multicast", 32768)
    prop._addConstant("ipv4-ucast", "ipv4-unicast", 512)
    prop._addConstant("ipv6-mcast", "ipv6-multicast", 65536)
    prop._addConstant("ipv6-ucast", "ipv6-unicast", 4096)
    prop._addConstant("l2vpn-evpn", "l2vpn-evpn-address-family", 131072)
    prop._addConstant("refresh", "refresh", 32)
    prop._addConstant("refresh-old", "refresh", 64)
    prop._addConstant("rtfilter-ucast", "ipv4-route-target-filter-address-family", 262144)
    prop._addConstant("vpnv4-ucast", "vpnv4-unicast", 1024)
    prop._addConstant("vpnv6-ucast", "vpnv6-unicast", 8192)
    meta.props.add("rcvCap", prop)

    prop = PropMeta("str", "remotePort", "remotePort", 2602, PropCategory.REGULAR)
    prop.label = "Remote Port"
    prop.isOper = True
    prop.range = [(0, 65535)]
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("dns", "dns", 53)
    prop._addConstant("ftpData", "ftp-data", 20)
    prop._addConstant("http", "http", 80)
    prop._addConstant("https", "https", 443)
    prop._addConstant("pop3", "pop3", 110)
    prop._addConstant("rtsp", "rtsp", 554)
    prop._addConstant("smtp", "smtp", 25)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("remotePort", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "rtrId", "rtrId", 2588, PropCategory.REGULAR)
    prop.label = "Router ID"
    prop.isOper = True
    meta.props.add("rtrId", prop)

    prop = PropMeta("str", "shutStQual", "shutStQual", 2591, PropCategory.REGULAR)
    prop.label = "Shut State Qualifier"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("admin", "administratively-down", 1)
    prop._addConstant("exceeded-pfxlimit", "exceeded-prefix-limit", 3)
    prop._addConstant("no-mem", "no-memory", 2)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("shutStQual", prop)

    prop = PropMeta("str", "stReason", "stReason", 2611, PropCategory.REGULAR)
    prop.label = "State Reason"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("no-mem", "nomem", 1)
    prop._addConstant("none", None, 0)
    meta.props.add("stReason", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "type", "type", 2586, PropCategory.REGULAR)
    prop.label = "Session Type"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "ibgp"
    prop._addConstant("ebgp", "ebgp", 2)
    prop._addConstant("ibgp", "ibgp", 1)
    meta.props.add("type", prop)

    prop = PropMeta("str", "updateElapsedTs", "updateElapsedTs", 2605, PropCategory.REGULAR)
    prop.label = "Last Update Received Timestamp"
    prop.isOper = True
    meta.props.add("updateElapsedTs", prop)

    meta.namingProps.append(getattr(meta.props, "addr"))
    getattr(meta.props, "addr").needDelimiter = True

    def __init__(self, parentMoOrDn, addr, markDirty=True, **creationProps):
        namingVals = [addr]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class PeerP(Mo):
    """
    The BGP peer connectivity profile contains the peer IP address and defines the peer connectivity control settings. These values are for BGP routers, which can only exchange routing information when they establish a peer connection between them.

    """

    meta = ClassMeta("cobra.model.bgp.PeerP")

    meta.moClassName = "bgpPeerP"
    meta.rnFormat = "peerP-[%(addr)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Peer Connectivity Profile"
    meta.writeAccessMask = 0x20000001
    meta.readAccessMask = 0x8020000001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.bgp.RsPeerPfxPol")
    meta.childClasses.add("cobra.model.bgp.AsP")
    meta.childClasses.add("cobra.model.bgp.RsPeerToProfile")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.tag.AliasDelInst")
    meta.childClasses.add("cobra.model.tag.ExtMngdInst")
    meta.childClasses.add("cobra.model.tag.AliasInst")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.tag.Inst")
    meta.childClasses.add("cobra.model.bgp.LocalAsnP")

    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.RsPeerToProfile", "rspeerToProfile-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.RsPeerPfxPol", "rspeerPfxPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasDelInst", "aliasdel-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.LocalAsnP", "localasn"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.ExtMngdInst", "extmngd"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasInst", "alias"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Inst", "tag-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.AsP", "as"))

    meta.parentClasses.add("cobra.model.l3ext.VirtualLIfP")
    meta.parentClasses.add("cobra.model.l3ext.RsPathL3OutAtt")
    meta.parentClasses.add("cobra.model.l3ext.LNodeP")

    meta.superClasses.add("cobra.model.pol.Comp")
    meta.superClasses.add("cobra.model.bgp.APeerP")
    meta.superClasses.add("cobra.model.fabric.L3ProtoComp")
    meta.superClasses.add("cobra.model.fabric.ProtoComp")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.naming.NamedObject")

    meta.rnPrefixes = [
        ('peerP-', True),
    ]

    prop = PropMeta("str", "ConfigIssues", "ConfigIssues", 52317, PropCategory.REGULAR)
    prop.label = "Deployment Status"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("no-loopback-configured", "no-loopback-configured-under-node-profile", 1)
    prop._addConstant("none", "none", 0)
    meta.props.add("ConfigIssues", prop)

    prop = PropMeta("str", "addr", "addr", 5883, PropCategory.REGULAR)
    prop.label = "Peer Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("addr", prop)

    prop = PropMeta("str", "addrTCtrl", "addrTCtrl", 50055, PropCategory.REGULAR)
    prop.label = "Address Type AF Controls"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "af-ucast"
    prop._addConstant("af-mcast", "af-mcast", 2)
    prop._addConstant("af-ucast", "af-ucast", 1)
    meta.props.add("addrTCtrl", prop)

    prop = PropMeta("str", "adminSt", "adminSt", 54121, PropCategory.REGULAR)
    prop.label = "Administrative State"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "allowedSelfAsCnt", "allowedSelfAsCnt", 18174, PropCategory.REGULAR)
    prop.label = "Allowed Self AS Count"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 10)]
    prop.defaultValue = 3
    prop.defaultValueStr = "3"
    meta.props.add("allowedSelfAsCnt", prop)

    prop = PropMeta("str", "annotation", "annotation", 37381, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 820, PropCategory.REGULAR)
    prop.label = "Peer AF Controls"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop._addConstant("allow-self-as", "allow-self-as", 32)
    prop._addConstant("as-override", "as-override", 64)
    prop._addConstant("dis-peer-as-check", "disable-peer-as-check", 16)
    prop._addConstant("nh-self", "next-hop-self", 8)
    prop._addConstant("send-com", "send-community", 1)
    prop._addConstant("send-ext-com", "send-extended-community", 2)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "descr", "descr", 5582, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 39520, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 13905, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "password", "password", 819, PropCategory.REGULAR)
    prop.label = "Password"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isPassword = True
    meta.props.add("password", prop)

    prop = PropMeta("str", "peerCtrl", "peerCtrl", 18173, PropCategory.REGULAR)
    prop.label = "Peer Controls"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop._addConstant("bfd", "bidirectional-forwarding-detection", 1)
    prop._addConstant("dis-conn-check", "disable-connected-check", 2)
    meta.props.add("peerCtrl", prop)

    prop = PropMeta("str", "privateASctrl", "privateASctrl", 22647, PropCategory.REGULAR)
    prop.label = "Private AS Control"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop._addConstant("remove-all", "remove-all-private-as", 2)
    prop._addConstant("remove-exclusive", "remove-private-as", 1)
    prop._addConstant("replace-as", "replace-private-as-with-local-as", 4)
    meta.props.add("privateASctrl", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "sessionT", "sessionT", 21364, PropCategory.REGULAR)
    prop.label = "Peer Session Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "peer"
    prop._addConstant("client", "client", 2)
    prop._addConstant("peer", "peer", 1)
    meta.props.add("sessionT", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "ttl", "ttl", 18175, PropCategory.REGULAR)
    prop.label = "eBGP Multihop TTL value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 255)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("ttl", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "weight", "weight", 22646, PropCategory.REGULAR)
    prop.label = "Weight for routes from this neighbor"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("weight", prop)

    meta.namingProps.append(getattr(meta.props, "addr"))
    getattr(meta.props, "addr").needDelimiter = True

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("L3ExtOutToNwIf", "Interface", "cobra.model.nw.If"))

    def __init__(self, parentMoOrDn, addr, markDirty=True, **creationProps):
        namingVals = [addr]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

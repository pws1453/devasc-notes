# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class PeerAfEntry(Mo):
    """
    The operational status information for a BGP peer address family. Each address family maintains a separate BGP database, which allows you to configure BGP policy on per-address family basis.

    """

    meta = ClassMeta("cobra.model.bgp.PeerAfEntry")

    meta.moClassName = "bgpPeerAfEntry"
    meta.rnFormat = "af-%(type)s"
    meta.category = MoCategory.REGULAR
    meta.label = "BGP Peer Address Family Entry"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.bgp.PeerEntry")

    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.CpDom")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.bgp.Af")
    meta.superClasses.add("cobra.model.nw.GEp")

    meta.rnPrefixes = [
        ('af-', True),
    ]

    prop = PropMeta("str", "acceptedPaths", "acceptedPaths", 2629, PropCategory.REGULAR)
    prop.label = "Accepted Paths"
    prop.isOper = True
    meta.props.add("acceptedPaths", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "firstEorRcvdTs", "firstEorRcvdTs", 2636, PropCategory.REGULAR)
    prop.label = "First EOR Received Timestamp"
    prop.isOper = True
    meta.props.add("firstEorRcvdTs", prop)

    prop = PropMeta("str", "flags", "flags", 2631, PropCategory.REGULAR)
    prop.label = "Flags"
    prop.isOper = True
    prop._addConstant("first-eor-rcvd", "first-eor-received", 2)
    prop._addConstant("fwdstate-saved", "forwarding-state-preserved-by-peer", 16)
    prop._addConstant("gr-cap", "address-families-received-from-peer", 8)
    prop._addConstant("gr-sent", "address-families-advertised-to-peer", 4)
    prop._addConstant("pfx-threshclear", "prefix-count-dropped-below-clear-threshold", 128)
    prop._addConstant("pfx-threshexceeded", "prefix-count-exceeded-warning-threshold", 64)
    prop._addConstant("pfxlimit-exceeded", "maximum-prefix-limit-exceeded", 32)
    prop._addConstant("soft-recfg", "soft-reconfiguration", 1)
    meta.props.add("flags", prop)

    prop = PropMeta("str", "lastEorRcvdTs", "lastEorRcvdTs", 2635, PropCategory.REGULAR)
    prop.label = "Last EOR Received Timestamp"
    prop.isOper = True
    meta.props.add("lastEorRcvdTs", prop)

    prop = PropMeta("str", "memAccPaths", "memAccPaths", 2630, PropCategory.REGULAR)
    prop.label = "Accepted Paths Memory"
    prop.isOper = True
    meta.props.add("memAccPaths", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14451, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 16434, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "peerTblVer", "peerTblVer", 2627, PropCategory.REGULAR)
    prop.label = "Peer Table Version"
    prop.isOper = True
    meta.props.add("peerTblVer", prop)

    prop = PropMeta("str", "pfxFlushed", "pfxFlushed", 2634, PropCategory.REGULAR)
    prop.label = "Prefixes Flushed"
    prop.isOper = True
    meta.props.add("pfxFlushed", prop)

    prop = PropMeta("str", "pfxSaved", "pfxSaved", 2633, PropCategory.REGULAR)
    prop.label = "Prefixes Saved"
    prop.isOper = True
    meta.props.add("pfxSaved", prop)

    prop = PropMeta("str", "pfxSent", "pfxSent", 2632, PropCategory.REGULAR)
    prop.label = "Prefixes Sent"
    prop.isOper = True
    meta.props.add("pfxSent", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tblSt", "tblSt", 2628, PropCategory.REGULAR)
    prop.label = "Table State"
    prop.isOper = True
    prop._addConstant("down", "down", 2)
    prop._addConstant("unknown", "unknown", 0)
    prop._addConstant("up", "up", 1)
    meta.props.add("tblSt", prop)

    prop = PropMeta("str", "tblVer", "tblVer", 2626, PropCategory.REGULAR)
    prop.label = "Table Version"
    prop.isOper = True
    meta.props.add("tblVer", prop)

    prop = PropMeta("str", "type", "type", 5881, PropCategory.REGULAR)
    prop.label = "Type"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 1
    prop.defaultValueStr = "ipv4-ucast"
    prop._addConstant("ipv4-mcast", "ipv4-multicast-address-family", 7)
    prop._addConstant("ipv4-ucast", "ipv4-unicast-address-family", 1)
    prop._addConstant("ipv6-mcast", "ipv6-multicast-address-family", 8)
    prop._addConstant("ipv6-ucast", "ipv6-unicast-address-family", 3)
    prop._addConstant("l2vpn-evpn", "l2vpn-evpn-address-family", 5)
    prop._addConstant("rtfilter-ucast", "route-target-filter-address-family", 6)
    prop._addConstant("vpnv4-ucast", "vpnv4-unicast-address-family", 2)
    prop._addConstant("vpnv6-ucast", "vpnv6-unicast-address-family", 4)
    meta.props.add("type", prop)

    meta.namingProps.append(getattr(meta.props, "type"))

    def __init__(self, parentMoOrDn, type, markDirty=True, **creationProps):
        namingVals = [type]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

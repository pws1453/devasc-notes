# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class DomAf(Mo):
    """
    The EIGRP address family domain (VRF) information.

    """

    meta = ClassMeta("cobra.model.eigrp.DomAf")

    meta.moClassName = "eigrpDomAf"
    meta.rnFormat = "af-%(type)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Address Family Domain"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.eigrp.Db")
    meta.childClasses.add("cobra.model.eigrp.Gr")
    meta.childClasses.add("cobra.model.eigrp.StubP")
    meta.childClasses.add("cobra.model.eigrp.DefRtLeakP")
    meta.childClasses.add("cobra.model.eigrp.DomAfStats")
    meta.childClasses.add("cobra.model.eigrp.InterLeakP")
    meta.childClasses.add("cobra.model.eigrp.RibLeakP")

    meta.childNamesAndRnPrefix.append(("cobra.model.eigrp.InterLeakP", "interleak-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eigrp.DefRtLeakP", "defrtleak"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eigrp.RibLeakP", "ribleak"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eigrp.DomAfStats", "stats"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eigrp.StubP", "stub"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eigrp.Db", "db-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eigrp.Gr", "gr"))

    meta.parentClasses.add("cobra.model.eigrp.Dom")

    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.CpDom")
    meta.superClasses.add("cobra.model.nw.GEp")
    meta.superClasses.add("cobra.model.eigrp.Af")

    meta.rnPrefixes = [
        ('af-', True),
    ]

    prop = PropMeta("str", "actIntvl", "actIntvl", 17376, PropCategory.REGULAR)
    prop.label = "Active timer"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 65535)]
    prop.defaultValue = 3
    prop.defaultValueStr = "3"
    meta.props.add("actIntvl", prop)

    prop = PropMeta("str", "asn", "asn", 17371, PropCategory.REGULAR)
    prop.label = "Autonomous System Number"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 65535)]
    meta.props.add("asn", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extDist", "extDist", 17374, PropCategory.REGULAR)
    prop.label = "External Distance"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 255)]
    prop.defaultValue = 170
    prop.defaultValueStr = "170"
    meta.props.add("extDist", prop)

    prop = PropMeta("str", "intDist", "intDist", 17373, PropCategory.REGULAR)
    prop.label = "Internal Distance"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 255)]
    prop.defaultValue = 90
    prop.defaultValueStr = "90"
    meta.props.add("intDist", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "maxPaths", "maxPaths", 17375, PropCategory.REGULAR)
    prop.label = "Maximum ECMP Paths"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 16)]
    prop.defaultValue = 8
    prop.defaultValueStr = "8"
    meta.props.add("maxPaths", prop)

    prop = PropMeta("str", "metricStyle", "metricStyle", 18020, PropCategory.REGULAR)
    prop.label = "Metric style used for EIGRP metric calculation"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "narrow"
    prop._addConstant("narrow", "narrow-metric", 1)
    prop._addConstant("wide", "wide-metric", 2)
    meta.props.add("metricStyle", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 16434, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "rtrId", "rtrId", 17372, PropCategory.REGULAR)
    prop.label = "Router ID"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("rtrId", prop)

    prop = PropMeta("str", "selfAdvRtTag", "selfAdvRtTag", 26218, PropCategory.REGULAR)
    prop.label = "Self Advertisement Route Tag"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 4294967295
    prop.defaultValueStr = "4294967295"
    meta.props.add("selfAdvRtTag", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "type", "type", 17448, PropCategory.REGULAR)
    prop.label = "Type"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 1
    prop.defaultValueStr = "ipv4-ucast"
    prop._addConstant("ipv4-ucast", "ipv4-unicast-address-family", 1)
    prop._addConstant("ipv6-ucast", "ipv6-unicast-address-family", 2)
    meta.props.add("type", prop)

    meta.namingProps.append(getattr(meta.props, "type"))

    def __init__(self, parentMoOrDn, type, markDirty=True, **creationProps):
        namingVals = [type]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Dom(Mo):
    """
     This objects hold per mld snooping domain information 

    """

    meta = ClassMeta("cobra.model.mldsnoop.Dom")

    meta.moClassName = "mldsnoopDom"
    meta.rnFormat = "dom-[%(encap)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "MLD Snooping Domain"
    meta.writeAccessMask = 0xc008020040001
    meta.readAccessMask = 0xc008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.mldsnoop.StRtrIf")
    meta.childClasses.add("cobra.model.mldsnoop.CktEp")
    meta.childClasses.add("cobra.model.mldsnoop.DomStats")
    meta.childClasses.add("cobra.model.mldsnoop.QuerierP")
    meta.childClasses.add("cobra.model.mldsnoop.QuerierSt")
    meta.childClasses.add("cobra.model.mldsnoop.RtrIf")
    meta.childClasses.add("cobra.model.mldsnoop.Db")

    meta.childNamesAndRnPrefix.append(("cobra.model.mldsnoop.QuerierSt", "querierst"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mldsnoop.StRtrIf", "strtrif-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mldsnoop.DomStats", "domstats"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mldsnoop.QuerierP", "querierp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mldsnoop.CktEp", "cktep-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mldsnoop.RtrIf", "rtrif-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mldsnoop.Db", "db-"))

    meta.parentClasses.add("cobra.model.mldsnoop.Inst")

    meta.superClasses.add("cobra.model.nw.ProtDom")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.CpDom")
    meta.superClasses.add("cobra.model.nw.GEp")
    meta.superClasses.add("cobra.model.ipmcsnoop.Dom")

    meta.rnPrefixes = [
        ('dom-', True),
    ]

    prop = PropMeta("str", "adminSt", "adminSt", 24341, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 16882, PropCategory.REGULAR)
    prop.label = "Controls"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop._addConstant("fast-leave", "fast-leave", 2)
    prop._addConstant("opt-flood", "optimize-flooding", 4)
    prop._addConstant("querier", "enable-querier", 1)
    prop._addConstant("routing", "enable-routing", 8)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "encap", "encap", 17463, PropCategory.REGULAR)
    prop.label = "L2 Domain Fabric Encap"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("encap", prop)

    prop = PropMeta("str", "flags", "flags", 16975, PropCategory.REGULAR)
    prop.label = "Flags"
    prop.isOper = True
    prop.defaultValue = "v1r-supr,v2r-supr,eht,llg-supr"
    prop.defaultValueStr = "v1r-supr,v2r-supr,eht,llg-supr"
    prop._addConstant("eht", "end-host-tracking", 4)
    prop._addConstant("llg-supr", "link-local-groups-suppression", 8)
    prop._addConstant("v1r-supr", "v1-report-suppression", 1)
    prop._addConstant("v2r-supr", "v2-report-suppression", 2)
    prop._addConstant("vpc", "vpc-enabled", 16)
    meta.props.add("flags", prop)

    prop = PropMeta("str", "fwdMode", "fwdMode", 16884, PropCategory.REGULAR)
    prop.label = "Fowarding Mode"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "ip"
    prop._addConstant("ip", "ip-based-forwarding", 1)
    prop._addConstant("mac", "mac-based-forwarding", 2)
    meta.props.add("fwdMode", prop)

    prop = PropMeta("str", "grpFlushTs", "grpFlushTs", 16888, PropCategory.REGULAR)
    prop.label = "Group Flush Timestamp"
    prop.isOper = True
    meta.props.add("grpFlushTs", prop)

    prop = PropMeta("str", "id", "id", 16880, PropCategory.REGULAR)
    prop.label = "ID"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 4096)]
    meta.props.add("id", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 47380, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "mrtrEpgId", "mrtrEpgId", 16891, PropCategory.REGULAR)
    prop.label = "Mrouter Endpoint Group ID"
    prop.isOper = True
    prop.range = [(1, 4096)]
    meta.props.add("mrtrEpgId", prop)

    prop = PropMeta("str", "name", "name", 16879, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "nextQueryExpTs", "nextQueryExpTs", 16890, PropCategory.REGULAR)
    prop.label = "Next Query Timestamp"
    prop.isOper = True
    meta.props.add("nextQueryExpTs", prop)

    prop = PropMeta("str", "nextQueryTs", "nextQueryTs", 16889, PropCategory.REGULAR)
    prop.label = "Next Query Timestamp"
    prop.isOper = True
    meta.props.add("nextQueryTs", prop)

    prop = PropMeta("str", "numMcGrp", "numMcGrp", 16886, PropCategory.REGULAR)
    prop.label = "Multicast Groups"
    prop.isOper = True
    meta.props.add("numMcGrp", prop)

    prop = PropMeta("str", "numRtrIf", "numRtrIf", 16885, PropCategory.REGULAR)
    prop.label = "Router Interfaces"
    prop.isOper = True
    meta.props.add("numRtrIf", prop)

    prop = PropMeta("str", "numSrcGrp", "numSrcGrp", 16887, PropCategory.REGULAR)
    prop.label = "Multicast Groups"
    prop.isOper = True
    meta.props.add("numSrcGrp", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "encap"))
    getattr(meta.props, "encap").needDelimiter = True

    def __init__(self, parentMoOrDn, encap, markDirty=True, **creationProps):
        namingVals = [encap]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class NicProfToDom(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.edm.NicProfToDom")

    meta.moClassName = "edmNicProfToDom"
    meta.rnFormat = "npd-[%(domainDn)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "NIC Profile to Domain Representation"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.edm.RtToNicProfToDom")
    meta.childClasses.add("cobra.model.health.Inst")

    meta.childNamesAndRnPrefix.append(("cobra.model.edm.RtToNicProfToDom", "rttoNicProfToDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.edm.NicProf")

    meta.superClasses.add("cobra.model.edm.Element")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.edm.Entity")
    meta.superClasses.add("cobra.model.naming.NamedIdentifiedObject")

    meta.rnPrefixes = [
        ('npd-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 43734, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "domEncapRef", "domEncapRef", 52328, PropCategory.REGULAR)
    prop.label = "Dn of related edmDomainEncap Mo"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("domEncapRef", prop)

    prop = PropMeta("str", "domainDn", "domainDn", 49795, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("domainDn", prop)

    prop = PropMeta("str", "id", "id", 43657, PropCategory.REGULAR)
    prop.label = "Id"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "issues", "issues", 43659, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("connection-fault", "failed-to-connect-with-integration-manager", 1)
    prop._addConstant("create-prefix-list-fault", "prefix-list-not-configured-on-remote-vmanage-device", 2048)
    prop._addConstant("create-prefix-mapping-fault", "prefix-mapping-not-configured-on-remote-vmanage-device", 32768)
    prop._addConstant("create-vpn-list-fault", "vpn-list-not-configured-on-remote-vmanage-device", 16384)
    prop._addConstant("encap-config-fault", "error-configuring-encaps-on-integration-manager", 8)
    prop._addConstant("nicprof-config-fault", "error-configuring-nic-profiles-on-integration-manager", 16)
    prop._addConstant("nicprof-missing-fault", "configured-nic-profile-does-not-exist-on-integration-manager", 2)
    prop._addConstant("none", "none", 0)
    prop._addConstant("partner-registration-fault", "error-registering-apic-as-partner", 64)
    prop._addConstant("sla-config-fault", "error-in-pushing-sla", 128)
    prop._addConstant("sla-dscp-fault", "error-in-pushing-sla-dscp-mapping-to-remote-vmanage-device", 8192)
    prop._addConstant("sla-policies-not-configured-fault", "sla-policies-are-not-configured-on-remote-vmanage-device", 1024)
    prop._addConstant("sla-polpull-fault", "error-in-pulling-sla-policies", 512)
    prop._addConstant("sla-statspull-fault", "error-in-pulling-sla-stats", 256)
    prop._addConstant("uplinkprof-config-fault", "error-configuring-uplink-profiles-on-integration-manager", 32)
    prop._addConstant("uplinkprof-missing-fault", "configured-uplink-profile-does-not-exist-on-integration-manager", 4)
    prop._addConstant("vpn-pull-fault", "error-in-pulling-vpns-from-remote-vmanage-device", 4096)
    meta.props.add("issues", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 49877, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 43658, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "userCreated", "userCreated", 49796, PropCategory.REGULAR)
    prop.label = "indicates MO is created by system (false) or by user action (true)"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("userCreated", prop)

    meta.namingProps.append(getattr(meta.props, "domainDn"))
    getattr(meta.props, "domainDn").needDelimiter = True

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EdmNicProfToDomToEdmEncapDef", "edmNicProfToDom to edm:EncapDef", "cobra.model.edm.EncapDef"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EdmNicProfToDomToEdmRtToNicProfToDom", "edmNicProfToDom To edmRtToNicProfToDom", "cobra.model.edm.RtToNicProfToDom"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EdmNicProfToDomToEdmNicProf", "edmNicProfToDom to edmNicProf", "cobra.model.edm.NicProf"))

    def __init__(self, parentMoOrDn, domainDn, markDirty=True, **creationProps):
        namingVals = [domainDn]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class CdpAdjEp(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.edm.CdpAdjEp")

    meta.moClassName = "edmCdpAdjEp"
    meta.rnFormat = "cdp-%(index)s"
    meta.category = MoCategory.REGULAR
    meta.label = "CDP Adjacency"
    meta.writeAccessMask = 0x6006010020001
    meta.readAccessMask = 0x6006010020001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.parentClasses.add("cobra.model.edm.PhysIf")

    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.nw.AdjEp")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.l2.ProtAdjEp")
    meta.superClasses.add("cobra.model.nw.ProtAdjEp")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.rnPrefixes = [
        ('cdp-', True),
    ]

    prop = PropMeta("str", "cap", "cap", 49747, PropCategory.REGULAR)
    prop.label = "Capabilities"
    prop.isOper = True
    prop._addConstant("host", "host", 16)
    prop._addConstant("igmp-filter", "igmp-filtering", 32)
    prop._addConstant("remote-manage", "remotely-managed", 256)
    prop._addConstant("repeater", "repeater", 64)
    prop._addConstant("router", "router", 1)
    prop._addConstant("src-bridge", "source-bridge", 4)
    prop._addConstant("stp-dispute", "stp-dispute", 512)
    prop._addConstant("switch", "switch", 8)
    prop._addConstant("trans-bridge", "trans-bridge", 2)
    prop._addConstant("voip", "voip-capability", 128)
    meta.props.add("cap", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "devId", "devId", 49744, PropCategory.REGULAR)
    prop.label = "Device ID"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("devId", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "duplex", "duplex", 49748, PropCategory.REGULAR)
    prop.label = "Duplex"
    prop.isOper = True
    prop._addConstant("full", "full-duplex", 2)
    prop._addConstant("half", "half-duplex", 1)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("duplex", prop)

    prop = PropMeta("str", "index", "index", 49741, PropCategory.REGULAR)
    prop.label = "Index"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("index", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mtu", "mtu", 49750, PropCategory.REGULAR)
    prop.label = "MTU"
    prop.isOper = True
    meta.props.add("mtu", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "nativeVlan", "nativeVlan", 49749, PropCategory.REGULAR)
    prop.label = "Native Vlan"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("nativeVlan", prop)

    prop = PropMeta("str", "platId", "platId", 49746, PropCategory.REGULAR)
    prop.label = "Platform ID"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("platId", prop)

    prop = PropMeta("str", "portId", "portId", 49745, PropCategory.REGULAR)
    prop.label = "Port ID"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("portId", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "stQual", "stQual", 49742, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop._addConstant("nativevlan-mismatch", "native-vlan-mismatch-with-neighbor", 1)
    meta.props.add("stQual", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "sysLoc", "sysLoc", 49752, PropCategory.REGULAR)
    prop.label = "System Location"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("sysLoc", prop)

    prop = PropMeta("str", "sysName", "sysName", 49751, PropCategory.REGULAR)
    prop.label = "System Name"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("sysName", prop)

    prop = PropMeta("str", "sysObjIdL", "sysObjIdL", 49754, PropCategory.REGULAR)
    prop.label = "System OID Length"
    prop.isOper = True
    meta.props.add("sysObjIdL", prop)

    prop = PropMeta("str", "sysObjIdV", "sysObjIdV", 49753, PropCategory.REGULAR)
    prop.label = "System OID Value"
    prop.isOper = True
    meta.props.add("sysObjIdV", prop)

    prop = PropMeta("str", "ver", "ver", 49743, PropCategory.REGULAR)
    prop.label = "Version"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("ver", prop)

    meta.namingProps.append(getattr(meta.props, "index"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EdmMgrToEdmNicProf", "edmMgr to edmNicProf", "cobra.model.edm.NicProf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EdmMgrToEdmNicProfToDom", "edmMgr to edmNicProfToDom", "cobra.model.edm.NicProfToDom"))

    def __init__(self, parentMoOrDn, index, markDirty=True, **creationProps):
        namingVals = [index]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

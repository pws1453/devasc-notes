# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class PhysicalIf(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.hcl1.PhysicalIf")

    meta.moClassName = "hcl1PhysicalIf"
    meta.rnFormat = "physical-%(id)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Layer 1 Physical Interface Configuration"
    meta.writeAccessMask = 0x108021002001
    meta.readAccessMask = 0x508421002001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.hcl1.PhysicalIfOper")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.hcl1.RtSourceIf")
    meta.childClasses.add("cobra.model.hcl1.RtPhysRoutedAtt")

    meta.childNamesAndRnPrefix.append(("cobra.model.hcl1.RtSourceIf", "rthctunnSourceIf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcl1.RtPhysRoutedAtt", "rtphysRoutedAtt"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcl1.PhysicalIfOper", "oper"))

    meta.parentClasses.add("cobra.model.hcloud.Csr")

    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.hcl1.GigEthIf")
    meta.superClasses.add("cobra.model.hcl1.BaseIf")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.rnPrefixes = [
        ('physical-', True),
    ]

    prop = PropMeta("str", "adminSt", "adminSt", 50256, PropCategory.REGULAR)
    prop.label = "Administrative State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "down"
    prop._addConstant("down", "down", 1)
    prop._addConstant("up", "up", 2)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "autoNeg", "autoNeg", 50258, PropCategory.REGULAR)
    prop.label = "Auto Negotiation"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "on"
    prop._addConstant("off", "off", 2)
    prop._addConstant("on", "on", 1)
    meta.props.add("autoNeg", prop)

    prop = PropMeta("str", "bw", "bw", 50260, PropCategory.REGULAR)
    prop.label = "Bandwidth"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 200000000)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("bw", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "id", "id", 50735, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "mac", "mac", 50261, PropCategory.REGULAR)
    prop.label = "MAC"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "not-applicable"
    prop._addConstant("not-applicable", "n/a", 0)
    meta.props.add("mac", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mtu", "mtu", 50259, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1400, 9216)]
    prop.defaultValue = 1400
    prop.defaultValueStr = "1400"
    meta.props.add("mtu", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "speed", "speed", 50257, PropCategory.REGULAR)
    prop.label = "Speed"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 3
    prop.defaultValueStr = "inherit"
    prop._addConstant("10G", "10-gbps", 2)
    prop._addConstant("1G", "1-gbps", 1)
    prop._addConstant("inherit", "inherit", 3)
    prop._addConstant("unknown", "unspecified", 0)
    meta.props.add("speed", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "id"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Path"

    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Class(Mo):
    """
    Represents a control plane policing (COPP) policy class, which contains  a set of rules describing policer rates.

    """

    meta = ClassMeta("cobra.model.copp.Class")

    meta.moClassName = "coppClass"
    meta.rnFormat = "classp-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Class"
    meta.writeAccessMask = 0x100000000000001
    meta.readAccessMask = 0x100000000000001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.copp.Dropped1w")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.copp.DroppedHist1mo")
    meta.childClasses.add("cobra.model.copp.DroppedHist15min")
    meta.childClasses.add("cobra.model.copp.DropHist15min")
    meta.childClasses.add("cobra.model.copp.AllowHist1w")
    meta.childClasses.add("cobra.model.copp.MatchProto")
    meta.childClasses.add("cobra.model.copp.AllowHist1year")
    meta.childClasses.add("cobra.model.copp.AllowHist5min")
    meta.childClasses.add("cobra.model.copp.Dropped1h")
    meta.childClasses.add("cobra.model.copp.DroppedHist1h")
    meta.childClasses.add("cobra.model.copp.AllowHist15min")
    meta.childClasses.add("cobra.model.copp.If")
    meta.childClasses.add("cobra.model.copp.Dropped1qtr")
    meta.childClasses.add("cobra.model.copp.DropHist1year")
    meta.childClasses.add("cobra.model.copp.DropHist1mo")
    meta.childClasses.add("cobra.model.copp.AllowHist1h")
    meta.childClasses.add("cobra.model.copp.DroppedHist1d")
    meta.childClasses.add("cobra.model.copp.DropHist5min")
    meta.childClasses.add("cobra.model.copp.Drop15min")
    meta.childClasses.add("cobra.model.copp.Allow1year")
    meta.childClasses.add("cobra.model.copp.AllowHist1qtr")
    meta.childClasses.add("cobra.model.copp.DroppedHist1qtr")
    meta.childClasses.add("cobra.model.copp.Drop1h")
    meta.childClasses.add("cobra.model.copp.Drop1mo")
    meta.childClasses.add("cobra.model.copp.DropHist1qtr")
    meta.childClasses.add("cobra.model.copp.DropHist1w")
    meta.childClasses.add("cobra.model.copp.Dropped1year")
    meta.childClasses.add("cobra.model.copp.Dropped5min")
    meta.childClasses.add("cobra.model.copp.Drop1d")
    meta.childClasses.add("cobra.model.copp.AllowHist1d")
    meta.childClasses.add("cobra.model.copp.DropHist1h")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.copp.DropHist1d")
    meta.childClasses.add("cobra.model.copp.Drop1w")
    meta.childClasses.add("cobra.model.copp.Drop5min")
    meta.childClasses.add("cobra.model.copp.AllowHist1mo")
    meta.childClasses.add("cobra.model.copp.Allow15min")
    meta.childClasses.add("cobra.model.copp.Dropped1mo")
    meta.childClasses.add("cobra.model.copp.Allow1qtr")
    meta.childClasses.add("cobra.model.copp.Allow1w")
    meta.childClasses.add("cobra.model.copp.Dropped15min")
    meta.childClasses.add("cobra.model.copp.Drop1qtr")
    meta.childClasses.add("cobra.model.copp.DroppedHist1w")
    meta.childClasses.add("cobra.model.copp.DroppedHist1year")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.copp.Allow1mo")
    meta.childClasses.add("cobra.model.copp.Dropped1d")
    meta.childClasses.add("cobra.model.copp.Allow1d")
    meta.childClasses.add("cobra.model.copp.DroppedHist5min")
    meta.childClasses.add("cobra.model.copp.Allow1h")
    meta.childClasses.add("cobra.model.copp.Allow5min")
    meta.childClasses.add("cobra.model.copp.Drop1year")

    meta.childNamesAndRnPrefix.append(("cobra.model.copp.DroppedHist15min", "HDcoppDropped15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.DroppedHist1year", "HDcoppDropped1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.DroppedHist1qtr", "HDcoppDropped1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Dropped1year", "CDcoppDropped1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Dropped15min", "CDcoppDropped15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.DroppedHist5min", "HDcoppDropped5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.DroppedHist1mo", "HDcoppDropped1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.AllowHist1year", "HDcoppAllow1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.AllowHist15min", "HDcoppAllow15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Dropped1qtr", "CDcoppDropped1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Dropped5min", "CDcoppDropped5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.DropHist15min", "HDcoppDrop15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.AllowHist5min", "HDcoppAllow5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.DroppedHist1h", "HDcoppDropped1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.DropHist1year", "HDcoppDrop1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.DroppedHist1d", "HDcoppDropped1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Allow1year", "CDcoppAllow1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.AllowHist1qtr", "HDcoppAllow1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Allow15min", "CDcoppAllow15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Dropped1mo", "CDcoppDropped1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.DroppedHist1w", "HDcoppDropped1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Dropped1w", "CDcoppDropped1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Dropped1h", "CDcoppDropped1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.DropHist5min", "HDcoppDrop5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Drop15min", "CDcoppDrop15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.DropHist1qtr", "HDcoppDrop1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.AllowHist1mo", "HDcoppAllow1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Allow1qtr", "CDcoppAllow1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Dropped1d", "CDcoppDropped1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Allow5min", "CDcoppAllow5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Drop1year", "CDcoppDrop1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.AllowHist1w", "HDcoppAllow1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.DropHist1mo", "HDcoppDrop1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.AllowHist1h", "HDcoppAllow1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.AllowHist1d", "HDcoppAllow1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Drop5min", "CDcoppDrop5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Drop1qtr", "CDcoppDrop1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Allow1mo", "CDcoppAllow1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Drop1mo", "CDcoppDrop1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.DropHist1w", "HDcoppDrop1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.DropHist1h", "HDcoppDrop1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.DropHist1d", "HDcoppDrop1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Allow1w", "CDcoppAllow1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Allow1d", "CDcoppAllow1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Allow1h", "CDcoppAllow1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Drop1h", "CDcoppDrop1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Drop1d", "CDcoppDrop1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Drop1w", "CDcoppDrop1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.MatchProto", "mproto"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.If", "if-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.copp.Entity")

    meta.superClasses.add("cobra.model.pol.Instr")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.policer.Class")

    meta.rnPrefixes = [
        ('classp-', True),
    ]

    prop = PropMeta("str", "burst", "burst", 2066, PropCategory.REGULAR)
    prop.label = "Burst"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 549755813760)]
    prop.defaultValue = 18446744073709551615
    prop.defaultValueStr = "unspecified"
    prop._addConstant("unspecified", "unspecified", 18446744073709551615)
    meta.props.add("burst", prop)

    prop = PropMeta("str", "burstUnit", "burstUnit", 22257, PropCategory.REGULAR)
    prop.label = "Burst Unit"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("giga", "giga-bytes/packets", 3)
    prop._addConstant("kilo", "kilo-bytes/packets", 1)
    prop._addConstant("mega", "mega-bytes/packets", 2)
    prop._addConstant("msec", "milli-seconds", 4)
    prop._addConstant("unspecified", "bytes/packets", 0)
    prop._addConstant("usec", "micro-seconds", 5)
    meta.props.add("burstUnit", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "defaultBurst", "defaultBurst", 30535, PropCategory.REGULAR)
    prop.label = "defaultBurst"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("defaultBurst", prop)

    prop = PropMeta("str", "defaultRate", "defaultRate", 30532, PropCategory.REGULAR)
    prop.label = "defaultRate"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("defaultRate", prop)

    prop = PropMeta("str", "descr", "descr", 5581, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "level", "level", 31107, PropCategory.REGULAR)
    prop.label = "Per proto or Per proto per interface"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "per-proto"
    prop._addConstant("per-proto", "per-proto", 0)
    prop._addConstant("per-proto-per-intf", "per-proto-per-intf", 1)
    meta.props.add("level", prop)

    prop = PropMeta("str", "maxBurst", "maxBurst", 30534, PropCategory.REGULAR)
    prop.label = "maxBurst"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("maxBurst", prop)

    prop = PropMeta("str", "maxRate", "maxRate", 30531, PropCategory.REGULAR)
    prop.label = "maxRate"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("maxRate", prop)

    prop = PropMeta("str", "minBurst", "minBurst", 30533, PropCategory.REGULAR)
    prop.label = "minBurst"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("minBurst", prop)

    prop = PropMeta("str", "minRate", "minRate", 30530, PropCategory.REGULAR)
    prop.label = "minRate"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("minRate", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 22945, PropCategory.REGULAR)
    prop.label = "Bit or Packet"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "packet"
    prop._addConstant("bit", "bit-policer", 1)
    prop._addConstant("packet", "packet-policer", 2)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 16801, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 6003, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "rate", "rate", 2065, PropCategory.REGULAR)
    prop.label = "Rate"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 4398046510080)]
    meta.props.add("rate", prop)

    prop = PropMeta("str", "rateUnit", "rateUnit", 22256, PropCategory.REGULAR)
    prop.label = "Rate Unit"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("giga", "giga-bits/packets-per-second", 3)
    prop._addConstant("kilo", "kilo-bits/packets-per-second", 1)
    prop._addConstant("mega", "mega-bits/packets-per-second", 2)
    prop._addConstant("unspecified", "bits/packets-per-second", 0)
    meta.props.add("rateUnit", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "type", "type", 22944, PropCategory.REGULAR)
    prop.label = "Aggregate or NonAggregate Policer"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "nonagg"
    prop._addConstant("agg", "agg", 1)
    prop._addConstant("nonagg", "nonagg", 0)
    meta.props.add("type", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

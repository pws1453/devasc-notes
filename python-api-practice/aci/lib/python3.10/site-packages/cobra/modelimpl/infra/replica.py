# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Replica(Mo):
    """
    The state of a data subset.

    """

    meta = ClassMeta("cobra.model.infra.Replica")

    meta.moClassName = "infraReplica"
    meta.rnFormat = "rpl-%(shrdId)s-%(rplId)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Data Shard Replica"
    meta.writeAccessMask = 0x80000000001
    meta.readAccessMask = 0x80000000001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.infra.PeReplica")
    meta.childClasses.add("cobra.model.infra.ReplicaStats5min")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.infra.ReplicaStats1mo")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.infra.ReplicaStatsHist1year")
    meta.childClasses.add("cobra.model.infra.ReplicaStatsHist1qtr")
    meta.childClasses.add("cobra.model.infra.ReplicaStats1d")
    meta.childClasses.add("cobra.model.infra.ReplicaStats1h")
    meta.childClasses.add("cobra.model.infra.ReplicaStatsHist5min")
    meta.childClasses.add("cobra.model.infra.ReplicaStats1w")
    meta.childClasses.add("cobra.model.infra.ReplicaStatsHist1d")
    meta.childClasses.add("cobra.model.infra.ReplicaStats1qtr")
    meta.childClasses.add("cobra.model.infra.ReplicaStats1year")
    meta.childClasses.add("cobra.model.infra.ReplicaStatsHist15min")
    meta.childClasses.add("cobra.model.infra.ReplicaStats15min")
    meta.childClasses.add("cobra.model.infra.ReplicaStatsHist1w")
    meta.childClasses.add("cobra.model.infra.ReplicaStatsHist1h")
    meta.childClasses.add("cobra.model.infra.ReplicaStatsHist1mo")

    meta.childNamesAndRnPrefix.append(("cobra.model.infra.ReplicaStatsHist1year", "HDinfraReplicaStats1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.ReplicaStatsHist15min", "HDinfraReplicaStats15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.ReplicaStatsHist1qtr", "HDinfraReplicaStats1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.ReplicaStatsHist5min", "HDinfraReplicaStats5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.ReplicaStats1year", "CDinfraReplicaStats1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.ReplicaStats15min", "CDinfraReplicaStats15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.ReplicaStats5min", "CDinfraReplicaStats5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.ReplicaStats1qtr", "CDinfraReplicaStats1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.ReplicaStatsHist1mo", "HDinfraReplicaStats1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.ReplicaStats1mo", "CDinfraReplicaStats1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.ReplicaStatsHist1d", "HDinfraReplicaStats1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.ReplicaStatsHist1w", "HDinfraReplicaStats1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.ReplicaStatsHist1h", "HDinfraReplicaStats1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.ReplicaStats1d", "CDinfraReplicaStats1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.ReplicaStats1h", "CDinfraReplicaStats1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.ReplicaStats1w", "CDinfraReplicaStats1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.PeReplica", "peer-"))

    meta.parentClasses.add("cobra.model.infra.Service")

    meta.superClasses.add("cobra.model.naming.NamedObject")

    meta.rnPrefixes = [
        ('rpl-', True),
        ('-', True),
    ]

    prop = PropMeta("str", "ReTxState", "ReTxState", 33455, PropCategory.REGULAR)
    prop.label = "Replicated Transaction State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("current", "transaction-current-across-replicas", 0)
    prop._addConstant("queued", "transactions-queued-to-replica", 1)
    meta.props.add("ReTxState", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "clState", "clState", 4919, PropCategory.REGULAR)
    prop.label = "Replication Commit Log State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("active", "active", 2)
    prop._addConstant("failed", "failed", 1)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("clState", prop)

    prop = PropMeta("str", "dbState", "dbState", 4920, PropCategory.REGULAR)
    prop.label = "Persistifaction Database State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("active", "active", 2)
    prop._addConstant("failed", "failed", 1)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("dbState", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "leCnnct", "leCnnct", 4922, PropCategory.REGULAR)
    prop.label = "Is Connected to Leader"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("leCnnct", prop)

    prop = PropMeta("str", "leState", "leState", 4921, PropCategory.REGULAR)
    prop.label = "Leader Election State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 255
    prop.defaultValueStr = "unknown"
    prop._addConstant("candidate", "candidate", 3)
    prop._addConstant("follower", "follower", 0)
    prop._addConstant("follower-in-election", "follower-in-election", 2)
    prop._addConstant("leader", "leader", 4)
    prop._addConstant("minority", "minority", 5)
    prop._addConstant("unknown", "unknown", 255)
    prop._addConstant("waiting-for-election-ready", "waiting-for-election-ready", 1)
    meta.props.add("leState", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14766, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 4915, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "rplId", "rplId", 4917, PropCategory.REGULAR)
    prop.label = "Shard Unique Replica ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(0, 3), (127, 127)]
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("local", "local", 127)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("rplId", prop)

    prop = PropMeta("str", "shrdId", "shrdId", 4916, PropCategory.REGULAR)
    prop.label = "Service Unique Shard ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(0, 64)]
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("local", "local", 255)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("shrdId", prop)

    prop = PropMeta("str", "ssState", "ssState", 44779, PropCategory.REGULAR)
    prop.label = "Replica Snapshot State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("active", "active", 2)
    prop._addConstant("failed", "failed", 1)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("ssState", prop)

    prop = PropMeta("str", "state", "state", 4918, PropCategory.REGULAR)
    prop.label = "Replica State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("down", "down", 2)
    prop._addConstant("failed", "failed", 1)
    prop._addConstant("initializing", "initializing", 5)
    prop._addConstant("recovery", "recovery", 4)
    prop._addConstant("stateless-recovery", "stateless-recovery", 3)
    prop._addConstant("unknown", "unknown", 0)
    prop._addConstant("up", "up", 6)
    meta.props.add("state", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "shrdId"))
    meta.namingProps.append(getattr(meta.props, "rplId"))

    def __init__(self, parentMoOrDn, shrdId, rplId, markDirty=True, **creationProps):
        namingVals = [shrdId, rplId]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class If(Mo):
    """
    A tunnel interface.

    """

    meta = ClassMeta("cobra.model.tunnel.If")

    meta.moClassName = "tunnelIf"
    meta.rnFormat = "tunnel-[%(id)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Tunnel Interface"
    meta.writeAccessMask = 0x400400002001
    meta.readAccessMask = 0x800581c00002025
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.opflex.ODev")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrs1d")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsHist1mo")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsHist1d")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrs1h")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrs5min")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrs1qtr")
    meta.childClasses.add("cobra.model.tunnel.TunnelFlapCntrs1d")
    meta.childClasses.add("cobra.model.opflex.IDEp")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrs1h")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsHist1w")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsHist15min")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrs1qtr")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrs1w")
    meta.childClasses.add("cobra.model.fv.VNode")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsHist15min")
    meta.childClasses.add("cobra.model.tunnel.TunnelFlapCntrs1w")
    meta.childClasses.add("cobra.model.tunnel.TunnelFlapCntrs1h")
    meta.childClasses.add("cobra.model.fv.DEp")
    meta.childClasses.add("cobra.model.tunnel.Cons")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsHist1w")
    meta.childClasses.add("cobra.model.tunnel.TunnelFlapCntrsHist15min")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrs1year")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrs1d")
    meta.childClasses.add("cobra.model.tunnel.Bank")
    meta.childClasses.add("cobra.model.tunnel.TunnelFlapCntrsHist1mo")
    meta.childClasses.add("cobra.model.tunnel.RsTunnelToLooseNode")
    meta.childClasses.add("cobra.model.tunnel.TunnelFlapCntrsHist1w")
    meta.childClasses.add("cobra.model.tunnel.TunnelFlapCntrs15min")
    meta.childClasses.add("cobra.model.tunnel.TunnelFlapCntrsHist1qtr")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrs1mo")
    meta.childClasses.add("cobra.model.tunnel.TunnelFlapCntrsHist1h")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrs1year")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsHist1mo")
    meta.childClasses.add("cobra.model.tunnel.TunnelFlapCntrs5min")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsHist1h")
    meta.childClasses.add("cobra.model.tunnel.TunnelFlapCntrsHist1d")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsHist5min")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsHist1d")
    meta.childClasses.add("cobra.model.tunnel.TunnelFlapCntrs1qtr")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsHist1h")
    meta.childClasses.add("cobra.model.ac.LatencyHist")
    meta.childClasses.add("cobra.model.tunnel.TunnelFlapCntrsHist5min")
    meta.childClasses.add("cobra.model.tunnel.TunnelFlapCntrsHist1year")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsHist1qtr")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrs1w")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsHist1year")
    meta.childClasses.add("cobra.model.ac.LatencyAvg")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrs15min")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsHist1qtr")
    meta.childClasses.add("cobra.model.eltm.TnnlIf")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrs15min")
    meta.childClasses.add("cobra.model.tunnel.TunnelFlapCntrs1mo")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsHist5min")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrs5min")
    meta.childClasses.add("cobra.model.tunnel.TunnelFlapCntrs1year")
    meta.childClasses.add("cobra.model.tunnel.PortIf")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrs1mo")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsHist1year")
    meta.childClasses.add("cobra.model.nw.RtPathToIf")
    meta.childClasses.add("cobra.model.tunnel.RsTunnelMbrIfs")

    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.TunnelFlapCntrsHist15min", "HDtunnelTunnelFlapCntrs15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.TunnelFlapCntrsHist1year", "HDtunnelTunnelFlapCntrs1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.TunnelFlapCntrs15min", "CDtunnelTunnelFlapCntrs15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.TunnelFlapCntrsHist1qtr", "HDtunnelTunnelFlapCntrs1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.TunnelFlapCntrsHist5min", "HDtunnelTunnelFlapCntrs5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.TunnelFlapCntrs1year", "CDtunnelTunnelFlapCntrs1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.TunnelFlapCntrsHist1mo", "HDtunnelTunnelFlapCntrs1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.TunnelFlapCntrs5min", "CDtunnelTunnelFlapCntrs5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.TunnelFlapCntrs1qtr", "CDtunnelTunnelFlapCntrs1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsHist15min", "HDtunnelIngrTepCntrs15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.TunnelFlapCntrsHist1w", "HDtunnelTunnelFlapCntrs1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.TunnelFlapCntrsHist1h", "HDtunnelTunnelFlapCntrs1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.TunnelFlapCntrsHist1d", "HDtunnelTunnelFlapCntrs1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.TunnelFlapCntrs1mo", "CDtunnelTunnelFlapCntrs1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsHist1year", "HDtunnelIngrTepCntrs1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.TunnelFlapCntrs1d", "CDtunnelTunnelFlapCntrs1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsHist15min", "HDtunnelEgrTepCntrs15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.TunnelFlapCntrs1w", "CDtunnelTunnelFlapCntrs1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.TunnelFlapCntrs1h", "CDtunnelTunnelFlapCntrs1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrs1year", "CDtunnelIngrTepCntrs1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsHist1year", "HDtunnelEgrTepCntrs1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrs15min", "CDtunnelIngrTepCntrs15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsHist1qtr", "HDtunnelIngrTepCntrs1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsHist5min", "HDtunnelIngrTepCntrs5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsHist1mo", "HDtunnelIngrTepCntrs1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrs5min", "CDtunnelIngrTepCntrs5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrs1qtr", "CDtunnelIngrTepCntrs1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrs1year", "CDtunnelEgrTepCntrs1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsHist5min", "HDtunnelEgrTepCntrs5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsHist1qtr", "HDtunnelEgrTepCntrs1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrs15min", "CDtunnelEgrTepCntrs15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsHist1d", "HDtunnelIngrTepCntrs1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrs1qtr", "CDtunnelEgrTepCntrs1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsHist1w", "HDtunnelIngrTepCntrs1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsHist1mo", "HDtunnelEgrTepCntrs1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsHist1h", "HDtunnelIngrTepCntrs1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrs5min", "CDtunnelEgrTepCntrs5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrs1mo", "CDtunnelIngrTepCntrs1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrs1d", "CDtunnelIngrTepCntrs1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrs1h", "CDtunnelIngrTepCntrs1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrs1w", "CDtunnelIngrTepCntrs1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsHist1w", "HDtunnelEgrTepCntrs1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrs1mo", "CDtunnelEgrTepCntrs1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsHist1h", "HDtunnelEgrTepCntrs1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsHist1d", "HDtunnelEgrTepCntrs1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrs1h", "CDtunnelEgrTepCntrs1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrs1d", "CDtunnelEgrTepCntrs1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrs1w", "CDtunnelEgrTepCntrs1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.RsTunnelToLooseNode", "rstunnelToLooseNode-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.RsTunnelMbrIfs", "rstunnelMbrIfs-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ac.LatencyHist", "latencyhist"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nw.RtPathToIf", "rtpathToIf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ac.LatencyAvg", "latencyavg"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eltm.TnnlIf", "eltmtnnlif"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.PortIf", "portif-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.VNode", "vnode-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.ODev", "odev-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.IDEp", "idep-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.Cons", "cons-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.Bank", "bank-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.DEp", "dep-"))

    meta.parentClasses.add("cobra.model.top.System")

    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.nw.If")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.LogicalIf")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.rnPrefixes = [
        ('tunnel-', True),
    ]

    prop = PropMeta("str", "aclTcamStQual", "aclTcamStQual", 45689, PropCategory.REGULAR)
    prop.label = "TCAM State Qualifier"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("aclTcamStQual", prop)

    prop = PropMeta("str", "adminSt", "adminSt", 4107, PropCategory.REGULAR)
    prop.label = "Administrative State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "up"
    prop._addConstant("down", "down", 2)
    prop._addConstant("up", "up", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "cfgdMtu", "cfgdMtu", 4104, PropCategory.REGULAR)
    prop.label = "MTU"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 9000)]
    prop.defaultValue = 9000
    prop.defaultValueStr = "9000"
    meta.props.add("cfgdMtu", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "delInProg", "delInProg", 4114, PropCategory.REGULAR)
    prop.label = "Deletion in Progress"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("delInProg", prop)

    prop = PropMeta("str", "descr", "descr", 5585, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dest", "dest", 4101, PropCategory.REGULAR)
    prop.label = "Tunnel Destination IP"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("dest", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "id", "id", 7286, PropCategory.REGULAR)
    prop.label = "Interface ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "idRequestorDn", "idRequestorDn", 33108, PropCategory.REGULAR)
    prop.label = "Id Requestor Dn"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("idRequestorDn", prop)

    prop = PropMeta("str", "iod", "iod", 4111, PropCategory.REGULAR)
    prop.label = "Interface Ordinal"
    prop.isOper = True
    meta.props.add("iod", prop)

    prop = PropMeta("str", "keepAlvIntvl", "keepAlvIntvl", 4105, PropCategory.REGULAR)
    prop.label = "Keep Alive Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 32767)]
    prop.defaultValue = 10
    prop.defaultValueStr = "10"
    meta.props.add("keepAlvIntvl", prop)

    prop = PropMeta("str", "keepAlvRetries", "keepAlvRetries", 4106, PropCategory.REGULAR)
    prop.label = "Keep Alive Retries"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 255)]
    prop.defaultValue = 3
    prop.defaultValueStr = "3"
    meta.props.add("keepAlvRetries", prop)

    prop = PropMeta("str", "lcC", "lcC", 27115, PropCategory.REGULAR)
    prop.label = "Life Cycle Control"
    prop.isOper = True
    prop._addConstant("learned", "learned", 2)
    prop._addConstant("static", "static", 4)
    prop._addConstant("vmm", "vmm", 1)
    meta.props.add("lcC", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "mac", "mac", 4110, PropCategory.REGULAR)
    prop.label = "Destination MAC"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("mac", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14565, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operSt", "operSt", 4112, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "down"
    prop._addConstant("down", "down", 2)
    prop._addConstant("up", "up", 1)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "operStQual", "operStQual", 4113, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("admin-down", "admin-state-is-down", 6)
    prop._addConstant("desip-unres", "destination-ip-address-unresolvable", 10)
    prop._addConstant("dest-unreach", "destination-unreachable", 11)
    prop._addConstant("dup-conf", "duplicate-tunnel-config", 4)
    prop._addConstant("hwprog-fail", "hardware-programming-failed", 16)
    prop._addConstant("incomp-conf", "tunnel-configuration-is-incomplete", 3)
    prop._addConstant("initing", "initializing-hardware", 2)
    prop._addConstant("mtu-error", "mtu-programming-failed", 15)
    prop._addConstant("no-dest", "destination-is-not-configured", 9)
    prop._addConstant("no-encap", "encap-type-is-not-configured", 5)
    prop._addConstant("none", "no-reason", 1)
    prop._addConstant("src-down", "tunnel-source-down", 7)
    prop._addConstant("src-unres", "source-ip-is-could-not-be-resolved", 8)
    prop._addConstant("unknown", "unknown", 0)
    prop._addConstant("vrf-down", "vrf-is-down", 14)
    prop._addConstant("vrf-fwdref", "tunnel-transport-vrf-is-forward-referencing", 13)
    prop._addConstant("vrf-mismatch", "source-interface-and-tunnl-vrf-mismatch", 12)
    meta.props.add("operStQual", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "src", "src", 4100, PropCategory.REGULAR)
    prop.label = "Tunnel Source IP"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("src", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tLayer", "tLayer", 4109, PropCategory.REGULAR)
    prop.label = "Layer"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "l2"
    prop._addConstant("l2", "l2-tunnel", 1)
    prop._addConstant("l3", "l3-tunnel", 2)
    meta.props.add("tLayer", prop)

    prop = PropMeta("str", "tType", "tType", 4102, PropCategory.REGULAR)
    prop.label = "Tunnel Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "ivxlan"
    prop._addConstant("ivxlan", "ivxlan", 1)
    prop._addConstant("unknown", "unknown", 0)
    prop._addConstant("vxlan", "vxlan", 2)
    meta.props.add("tType", prop)

    prop = PropMeta("str", "tmCfgFailedBmp", "tmCfgFailedBmp", 15002, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("tunnel:IfadminSt_failed_flag", None, 16)
    prop._addConstant("tunnel:IfcfgdMtu_failed_flag", None, 32)
    prop._addConstant("tunnel:Ifdescr_failed_flag", None, 2)
    prop._addConstant("tunnel:Ifdest_failed_flag", None, 128)
    prop._addConstant("tunnel:IfidRequestorDn_failed_flag", None, 256)
    prop._addConstant("tunnel:Ifid_failed_flag", None, 4)
    prop._addConstant("tunnel:IfkeepAlvIntvl_failed_flag", None, 1024)
    prop._addConstant("tunnel:IfkeepAlvRetries_failed_flag", None, 2048)
    prop._addConstant("tunnel:IflcC_failed_flag", None, 4096)
    prop._addConstant("tunnel:IflcOwn_failed_flag", None, -9223372036854775808)
    prop._addConstant("tunnel:Ifmac_failed_flag", None, 8192)
    prop._addConstant("tunnel:IfmodTs_failed_flag", None, 2305843009213693952)
    prop._addConstant("tunnel:IfmonPolDn_failed_flag", None, 16384)
    prop._addConstant("tunnel:Ifname_failed_flag", None, 1)
    prop._addConstant("tunnel:Ifsrc_failed_flag", None, 131072)
    prop._addConstant("tunnel:IftLayer_failed_flag", None, 262144)
    prop._addConstant("tunnel:IftType_failed_flag", None, 524288)
    prop._addConstant("tunnel:Iftype_failed_flag", None, 8388608)
    prop._addConstant("tunnel:IfunderlayVrfName_failed_flag", None, 16777216)
    prop._addConstant("tunnel:Ifv6Src_failed_flag", None, 33554432)
    prop._addConstant("tunnel:IfvrfName_failed_flag", None, 67108864)
    meta.props.add("tmCfgFailedBmp", prop)

    prop = PropMeta("str", "tmCfgFailedTs", "tmCfgFailedTs", 15004, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("tmCfgFailedTs", prop)

    prop = PropMeta("str", "tmCfgState", "tmCfgState", 15003, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("tmCfgState", prop)

    prop = PropMeta("str", "type", "type", 4108, PropCategory.REGULAR)
    prop.label = "Endpoint Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "physical"
    prop._addConstant("dci-mcast-hrep", "remote-site-dci-mcast", 512)
    prop._addConstant("dci-ucast", "remote-pod-dci-unicast", 256)
    prop._addConstant("fabric-ext", "fabric-external", 32)
    prop._addConstant("ivleaf", "ivleaf", 1048576)
    prop._addConstant("learn-disabled", "learn-disabled", 1024)
    prop._addConstant("non-fabric-golf", "non-fabric-golf", 4096)
    prop._addConstant("non-fabric-untrusted", "non-fabric-untrusted-node", 64)
    prop._addConstant("physical", "physical-ep", 1)
    prop._addConstant("proxy-acast-mac", "proxy-anycast-mac-ep", 16)
    prop._addConstant("proxy-acast-v4", "proxy-anycast-ipv4-ep", 4)
    prop._addConstant("proxy-acast-v6", "proxy-anycast-ipv6-ep", 8)
    prop._addConstant("rl-direct", "rl-direct-switching", 262144)
    prop._addConstant("rl-direct-pod", "rl-direct-switching-interpod", 524288)
    prop._addConstant("rl-mcast-hrep", "remote-leaf-multicast", 16384)
    prop._addConstant("rl-routable", "rl-routable", 2097152)
    prop._addConstant("rl-ss", "remote-leaf-shared-service", 2048)
    prop._addConstant("rl-ucast", "remote-leaf-unicast", 8192)
    prop._addConstant("rl-vpc", "remote-leaf-vpc", 32768)
    prop._addConstant("underlay-mcast", "underlay-multicast", 128)
    prop._addConstant("virtual", "virtual-ep", 2)
    prop._addConstant("vpod-mcast-hrep", "vpod-leaf-multicast", 131072)
    prop._addConstant("vpod-ucast", "vpod-leaf-unicast", 65536)
    meta.props.add("type", prop)

    prop = PropMeta("str", "underlayVrfName", "underlayVrfName", 24709, PropCategory.REGULAR)
    prop.label = "Underlay VRF"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("underlayVrfName", prop)

    prop = PropMeta("str", "v6Src", "v6Src", 47408, PropCategory.REGULAR)
    prop.label = "Tunnel Source IPv6"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("v6Src", prop)

    prop = PropMeta("str", "vrfName", "vrfName", 4103, PropCategory.REGULAR)
    prop.label = "VRF"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("vrfName", prop)

    meta.namingProps.append(getattr(meta.props, "id"))
    getattr(meta.props, "id").needDelimiter = True

    meta.deploymentCategory = DeploymentCategory("interface", "Interface")
    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

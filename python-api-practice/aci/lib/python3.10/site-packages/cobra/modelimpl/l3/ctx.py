# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Ctx(Mo):
    """
    The tenant context information is equivalent to a virtual routing and forwarding (VRF) instance created for the tenant's L3 network. Similar to a VRF in traditional Cisco routers, the tenant context isolates the IP addresses of the tenant, allowing different tenants to have overlapping IP addresses.

    """

    meta = ClassMeta("cobra.model.l3.Ctx")

    meta.moClassName = "l3Ctx"
    meta.rnFormat = "ctx-[%(encap)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Context"
    meta.writeAccessMask = 0x400000000001
    meta.readAccessMask = 0x708401002103
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.l3.LbRtdIf")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.l2.EpRetPol")
    meta.childClasses.add("cobra.model.l3.FwdCtx")
    meta.childClasses.add("cobra.model.svccopy.SvcDb")
    meta.childClasses.add("cobra.model.l3.CtxExtn")
    meta.childClasses.add("cobra.model.l3.RtToL3Dom")
    meta.childClasses.add("cobra.model.mgmt.RtdMgmtIf")
    meta.childClasses.add("cobra.model.l3.RtEPgDefToL3Dom")
    meta.childClasses.add("cobra.model.l2.BD")
    meta.childClasses.add("cobra.model.l3.StaticRtIpEp")
    meta.childClasses.add("cobra.model.l3.RtToInbL3Dom")
    meta.childClasses.add("cobra.model.l3.IpEp")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.l3.EncRtdIf")
    meta.childClasses.add("cobra.model.l3.RsCtxToEpP")
    meta.childClasses.add("cobra.model.l3.RtdIf")
    meta.childClasses.add("cobra.model.epm.Db")
    meta.childClasses.add("cobra.model.l3.RtTenConn")
    meta.childClasses.add("cobra.model.fmcast.Grp")
    meta.childClasses.add("cobra.model.l2.MacCktRef")
    meta.childClasses.add("cobra.model.actrl.PfxEntry")
    meta.childClasses.add("cobra.model.l3.RtUserCtx")

    meta.childNamesAndRnPrefix.append(("cobra.model.l3.RtEPgDefToL3Dom", "rtfvEPgDefToL3Dom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.RtUserCtx", "rtdbgexpUserCtx-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.RtToInbL3Dom", "rttoInbL3Dom"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.RsCtxToEpP", "rsctxToEpP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.RtToL3Dom", "rttoL3Dom"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.StaticRtIpEp", "strtipep-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.RtTenConn", "rttenConn"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.CtxExtn", "ctxextn-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.EncRtdIf", "encrtd-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.MacCktRef", "macref-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.FwdCtx", "fwdctx"))
    meta.childNamesAndRnPrefix.append(("cobra.model.svccopy.SvcDb", "svcdb-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fmcast.Grp", "fmgrp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EpRetPol", "epret"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mgmt.RtdMgmtIf", "mgmt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.RtdIf", "rtd-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.actrl.PfxEntry", "pfx-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.LbRtdIf", "lb-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.BD", "bd-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.IpEp", "ip-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.epm.Db", "db-"))

    meta.parentClasses.add("cobra.model.top.System")

    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.l3.Dom")
    meta.superClasses.add("cobra.model.nw.FwDom")
    meta.superClasses.add("cobra.model.nw.GEp")

    meta.rnPrefixes = [
        ('ctx-', True),
    ]

    prop = PropMeta("str", "adminState", "adminState", 4293, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "admin-up"
    prop._addConstant("admin-up", "admin-up", 2)
    prop._addConstant("shutdown", "shutdown", 1)
    meta.props.add("adminState", prop)

    prop = PropMeta("str", "bdEnforcedEnable", "bdEnforcedEnable", 32660, PropCategory.REGULAR)
    prop.label = "BD Enforcement Status"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("bdEnforcedEnable", prop)

    prop = PropMeta("str", "bgpRd", "bgpRd", 4315, PropCategory.REGULAR)
    prop.label = "BGP Route Distinguisher"
    prop.isOper = True
    meta.props.add("bgpRd", prop)

    prop = PropMeta("str", "bgpRdDisp", "bgpRdDisp", 4316, PropCategory.REGULAR)
    prop.label = "BGP Route Distinguisher for Display"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("bgpRdDisp", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "createTs", "createTs", 4313, PropCategory.REGULAR)
    prop.label = "Creation Timestamp"
    prop.isOper = True
    meta.props.add("createTs", prop)

    prop = PropMeta("str", "ctxPKey", "ctxPKey", 27050, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("ctxPKey", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "encap", "encap", 6844, PropCategory.REGULAR)
    prop.label = "Encapsulation"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("encap", prop)

    prop = PropMeta("str", "gsdbCtx", "gsdbCtx", 4297, PropCategory.REGULAR)
    prop.label = "GSDB Context"
    prop.isOper = True
    meta.props.add("gsdbCtx", prop)

    prop = PropMeta("str", "hwResourceId", "hwResourceId", 27718, PropCategory.REGULAR)
    prop.label = "Hardware Resource Identifier"
    prop.isOper = True
    prop.range = [(0, 32767)]
    meta.props.add("hwResourceId", prop)

    prop = PropMeta("str", "id", "id", 4289, PropCategory.REGULAR)
    prop.label = "VRF ID"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 65535)]
    meta.props.add("id", prop)

    prop = PropMeta("str", "ipLearnDisable", "ipLearnDisable", 44216, PropCategory.REGULAR)
    prop.label = "VRF IP Learn Disable"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("ipLearnDisable", prop)

    prop = PropMeta("str", "l3vmCfgFailedBmp", "l3vmCfgFailedBmp", 14930, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("l3vmCfgFailedBmp", prop)

    prop = PropMeta("str", "l3vmCfgFailedTs", "l3vmCfgFailedTs", 14932, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("l3vmCfgFailedTs", prop)

    prop = PropMeta("str", "l3vmCfgState", "l3vmCfgState", 14931, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("l3vmCfgState", prop)

    prop = PropMeta("str", "lastChgdTs", "lastChgdTs", 4314, PropCategory.REGULAR)
    prop.label = "Last State Change Timestamp"
    prop.isOper = True
    meta.props.add("lastChgdTs", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "mgmtPcTag", "mgmtPcTag", 4241, PropCategory.REGULAR)
    prop.label = "Management PC Tag"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("any", "any", 0)
    meta.props.add("mgmtPcTag", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14566, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 4291, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.range = [(0, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "ngAvs", "ngAvs", 35392, PropCategory.REGULAR)
    prop.label = "avs2 Controls"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "no"
    prop._addConstant("no", "non-ng-avs-mode", 0)
    prop._addConstant("yes", "ng-avs-mode", 1)
    meta.props.add("ngAvs", prop)

    prop = PropMeta("str", "oldOperStQual", "oldOperStQual", 4296, PropCategory.REGULAR)
    prop.label = "Old Operational State Qualifier"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "admin-down"
    prop._addConstant("admin-down", "admin-down", 1)
    prop._addConstant("admin-down-pending", "admin-down-pending", 2)
    prop._addConstant("create-pending", "create-pending", 6)
    prop._addConstant("delete-holddown", "delete-holddown", 3)
    prop._addConstant("delete-pending", "delete-pending", 4)
    prop._addConstant("invalid", "invalid", 5)
    meta.props.add("oldOperStQual", prop)

    prop = PropMeta("str", "operStQual", "operStQual", 4295, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "admin-down"
    prop._addConstant("admin-down", "admin-down", 1)
    prop._addConstant("admin-down-pending", "admin-down-pending", 2)
    prop._addConstant("create-pending", "create-pending", 6)
    prop._addConstant("delete-holddown", "delete-holddown", 3)
    prop._addConstant("delete-pending", "delete-pending", 4)
    prop._addConstant("invalid", "invalid", 5)
    meta.props.add("operStQual", prop)

    prop = PropMeta("str", "operState", "operState", 4294, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "down"
    prop._addConstant("down", "down", 2)
    prop._addConstant("up", "up", 1)
    meta.props.add("operState", prop)

    prop = PropMeta("str", "oui", "oui", 4318, PropCategory.REGULAR)
    prop.label = "OUI"
    prop.isOper = True
    meta.props.add("oui", prop)

    prop = PropMeta("str", "pcEnfDir", "pcEnfDir", 22982, PropCategory.REGULAR)
    prop.label = "context control flags"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "egress"
    prop._addConstant("egress", "egress-policy", 0)
    prop._addConstant("ingress", "ingress-policy", 1)
    meta.props.add("pcEnfDir", prop)

    prop = PropMeta("str", "pcEnfPref", "pcEnfPref", 15336, PropCategory.REGULAR)
    prop.label = "Policy Control Enforcement"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enforced"
    prop._addConstant("enforced", "enforced", 1)
    prop._addConstant("unenforced", "unenforced", 2)
    meta.props.add("pcEnfPref", prop)

    prop = PropMeta("str", "pcTag", "pcTag", 4240, PropCategory.REGULAR)
    prop.label = "PC Tag"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("any", "any", 0)
    meta.props.add("pcTag", prop)

    prop = PropMeta("str", "pending", "pending", 4298, PropCategory.REGULAR)
    prop.label = "Pending"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("pending", prop)

    prop = PropMeta("str", "prtclBmp", "prtclBmp", 4317, PropCategory.REGULAR)
    prop.label = "Protocol Bitmap"
    prop.isOper = True
    meta.props.add("prtclBmp", prop)

    prop = PropMeta("str", "resourceId", "resourceId", 15517, PropCategory.REGULAR)
    prop.label = "VRF ID"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 65535)]
    meta.props.add("resourceId", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "scope", "scope", 4292, PropCategory.REGULAR)
    prop.label = "Scope"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 16777215)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("scope", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "type", "type", 4239, PropCategory.REGULAR)
    prop.label = "Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 3
    prop.defaultValueStr = "tenant"
    prop._addConstant("inb-mgmt", "inband-management", 2)
    prop._addConstant("infra", "infra", 4)
    prop._addConstant("oob-mgmt", "out-of-band-management", 1)
    prop._addConstant("tenant", "tenant", 3)
    meta.props.add("type", prop)

    prop = PropMeta("str", "v4TibId", "v4TibId", 4300, PropCategory.REGULAR)
    prop.label = "IPV4 Table ID"
    prop.isOper = True
    meta.props.add("v4TibId", prop)

    prop = PropMeta("str", "v4TibName", "v4TibName", 4301, PropCategory.REGULAR)
    prop.label = "IPV4 Table Name"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("v4TibName", prop)

    prop = PropMeta("str", "v4TibOldOperStQual", "v4TibOldOperStQual", 4305, PropCategory.REGULAR)
    prop.label = "IPV4 Old Operational State Qualifier"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "admin-down"
    prop._addConstant("admin-down", "admin-down", 1)
    prop._addConstant("admin-down-pending", "admin-down-pending", 2)
    prop._addConstant("create-pending", "create-pending", 6)
    prop._addConstant("delete-holddown", "delete-holddown", 3)
    prop._addConstant("delete-pending", "delete-pending", 4)
    prop._addConstant("invalid", "invalid", 5)
    meta.props.add("v4TibOldOperStQual", prop)

    prop = PropMeta("str", "v4TibOperStQual", "v4TibOperStQual", 4304, PropCategory.REGULAR)
    prop.label = "IPV4 Table Operational State Qualifier"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "admin-down"
    prop._addConstant("admin-down", "admin-down", 1)
    prop._addConstant("admin-down-pending", "admin-down-pending", 2)
    prop._addConstant("create-pending", "create-pending", 6)
    prop._addConstant("delete-holddown", "delete-holddown", 3)
    prop._addConstant("delete-pending", "delete-pending", 4)
    prop._addConstant("invalid", "invalid", 5)
    meta.props.add("v4TibOperStQual", prop)

    prop = PropMeta("str", "v4TibOperState", "v4TibOperState", 4303, PropCategory.REGULAR)
    prop.label = "IPV4 Table Operational State"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "down"
    prop._addConstant("down", "down", 2)
    prop._addConstant("up", "up", 1)
    meta.props.add("v4TibOperState", prop)

    prop = PropMeta("str", "v4TibPending", "v4TibPending", 4302, PropCategory.REGULAR)
    prop.label = "IPV4 Table Pending"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("v4TibPending", prop)

    prop = PropMeta("str", "v4TibValid", "v4TibValid", 4299, PropCategory.REGULAR)
    prop.label = "IPV4 Table Validity"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("v4TibValid", prop)

    prop = PropMeta("str", "v6TibId", "v6TibId", 4307, PropCategory.REGULAR)
    prop.label = "IPV6 Table ID"
    prop.isOper = True
    meta.props.add("v6TibId", prop)

    prop = PropMeta("str", "v6TibName", "v6TibName", 4308, PropCategory.REGULAR)
    prop.label = "IPV6 Table Name"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("v6TibName", prop)

    prop = PropMeta("str", "v6TibOldOperStQual", "v6TibOldOperStQual", 4312, PropCategory.REGULAR)
    prop.label = "IPV6 Table Operational State Qualifer"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "admin-down"
    prop._addConstant("admin-down", "admin-down", 1)
    prop._addConstant("admin-down-pending", "admin-down-pending", 2)
    prop._addConstant("create-pending", "create-pending", 6)
    prop._addConstant("delete-holddown", "delete-holddown", 3)
    prop._addConstant("delete-pending", "delete-pending", 4)
    prop._addConstant("invalid", "invalid", 5)
    meta.props.add("v6TibOldOperStQual", prop)

    prop = PropMeta("str", "v6TibOperStQual", "v6TibOperStQual", 4311, PropCategory.REGULAR)
    prop.label = "IPV6 Table Operational State Qualifer"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "admin-down"
    prop._addConstant("admin-down", "admin-down", 1)
    prop._addConstant("admin-down-pending", "admin-down-pending", 2)
    prop._addConstant("create-pending", "create-pending", 6)
    prop._addConstant("delete-holddown", "delete-holddown", 3)
    prop._addConstant("delete-pending", "delete-pending", 4)
    prop._addConstant("invalid", "invalid", 5)
    meta.props.add("v6TibOperStQual", prop)

    prop = PropMeta("str", "v6TibOperState", "v6TibOperState", 4310, PropCategory.REGULAR)
    prop.label = "IPV6 Table Operational State"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "down"
    prop._addConstant("down", "down", 2)
    prop._addConstant("up", "up", 1)
    meta.props.add("v6TibOperState", prop)

    prop = PropMeta("str", "v6TibPending", "v6TibPending", 4309, PropCategory.REGULAR)
    prop.label = "IPV6 Table Pending"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("v6TibPending", prop)

    prop = PropMeta("str", "v6TibValid", "v6TibValid", 4306, PropCategory.REGULAR)
    prop.label = "IPV6 Table Validity"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("v6TibValid", prop)

    prop = PropMeta("str", "vpnId", "vpnId", 4319, PropCategory.REGULAR)
    prop.label = "VPN ID"
    prop.isOper = True
    meta.props.add("vpnId", prop)

    meta.namingProps.append(getattr(meta.props, "encap"))
    getattr(meta.props, "encap").needDelimiter = True

    def __init__(self, parentMoOrDn, encap, markDirty=True, **creationProps):
        namingVals = [encap]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class ViolationEvent(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.fhs.ViolationEvent")

    meta.moClassName = "fhsViolationEvent"
    meta.rnFormat = "feature-%(featureName)s-proto-%(origin)s-violation-%(violationType)s-ip-[%(epip)s]-pctag-%(pcTag)s-if-[%(if)s]-mac-%(epmac)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Violation Event"
    meta.writeAccessMask = 0xc408421042001
    meta.readAccessMask = 0xc408421042001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.fhs.BD")

    meta.rnPrefixes = [
        ('feature-', True),
        ('-proto-', True),
        ('-violation-', True),
        ('-ip-', True),
        ('-pctag-', True),
        ('-if-', True),
        ('-mac-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "epViolationCnt", "epViolationCnt", 32726, PropCategory.REGULAR)
    prop.label = "EP Violation Count"
    prop.isOper = True
    prop.range = [(1, 65535)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("epViolationCnt", prop)

    prop = PropMeta("str", "epgEncap", "epgEncap", 32724, PropCategory.REGULAR)
    prop.label = "EPG Encapsulation"
    prop.isOper = True
    meta.props.add("epgEncap", prop)

    prop = PropMeta("str", "epgMode", "epgMode", 32723, PropCategory.REGULAR)
    prop.label = "EPG Mode"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("ip", "ip-based-epg", 2)
    prop._addConstant("mac", "mac-based-epg", 3)
    prop._addConstant("unknown", "unknown-epg-mode", 0)
    prop._addConstant("vlan", "vlan-based-epg", 1)
    prop._addConstant("vxlan", "vxlan-based-epg", 4)
    meta.props.add("epgMode", prop)

    prop = PropMeta("str", "epip", "epip", 32719, PropCategory.REGULAR)
    prop.label = "EP IP Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("epip", prop)

    prop = PropMeta("str", "epmac", "epmac", 32720, PropCategory.REGULAR)
    prop.label = "EP MAC Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("epmac", prop)

    prop = PropMeta("str", "featureName", "featureName", 32715, PropCategory.REGULAR)
    prop.label = "Feature Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 0
    prop.defaultValueStr = "ipv4-inspect"
    prop._addConstant("ipv4-inspect", "ipv4-inspect", 0)
    prop._addConstant("ipv4-srcguard", "ipv4-srcguard", 3)
    prop._addConstant("ipv6-inspect", "ipv6-inspect", 1)
    prop._addConstant("ipv6-srcguard", "ipv6-srcguard", 4)
    prop._addConstant("raguard", "ra-guard", 2)
    meta.props.add("featureName", prop)

    prop = PropMeta("str", "if", "if", 32721, PropCategory.REGULAR)
    prop.label = "EP Interface"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("if", prop)

    prop = PropMeta("str", "lastViolationReason", "lastViolationReason", 32718, PropCategory.REGULAR)
    prop.label = "Violation Reason"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "internal-error"
    prop._addConstant("anchor-collision", "anchor-collision", 14)
    prop._addConstant("competing-move-collision", "another-competing-move-collision", 15)
    prop._addConstant("ep-limit-reached", "maximum-ep-limit-reached", 16)
    prop._addConstant("internal-error", "internal-error", 0)
    prop._addConstant("ip-mac-theft", "ip-and-mac-address-theft", 3)
    prop._addConstant("ip-theft", "ip-address-theft", 1)
    prop._addConstant("local-ep-collision", "local-ep-exists", 12)
    prop._addConstant("mac-collision", "mac-exists", 13)
    prop._addConstant("mac-theft", "mac-address-theft", 2)
    prop._addConstant("move-denied-since-reachable", "ep-move-denied-because-of-reachable-state", 17)
    prop._addConstant("ra-hoplimit-check-fail", "ra-advertised-hop-limit-check-failed", 7)
    prop._addConstant("ra-managed-cfg-check-fail", "ra-advertised-managed-cfg-flag-check-failed", 8)
    prop._addConstant("ra-other-cfg-check-fail", "ra-advertised-other-cfg-flag-check-failed", 9)
    prop._addConstant("ra-rtr-pref-level-check-fail", "ra-advertised-router-preference-level-check-failed", 10)
    prop._addConstant("rtr-role-check-fail", "router-role-check-failed", 6)
    prop._addConstant("srv-role-check-fail", "server-role-check-failed", 5)
    prop._addConstant("static-ep-collision", "static-ep-exists", 11)
    prop._addConstant("trust-check-fail", "trust-check-failed", 4)
    meta.props.add("lastViolationReason", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 32892, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "origin", "origin", 32716, PropCategory.REGULAR)
    prop.label = "EP Learn origin"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 0
    prop.defaultValueStr = "dhcp"
    prop._addConstant("arp", "arp", 2)
    prop._addConstant("data", "data", 5)
    prop._addConstant("dhcp", "dhcp", 0)
    prop._addConstant("local", "local", 4)
    prop._addConstant("nd", "ipv6-nd", 1)
    prop._addConstant("rd", "ipv6-rd", 6)
    prop._addConstant("static", "static", 3)
    meta.props.add("origin", prop)

    prop = PropMeta("str", "pcTag", "pcTag", 32722, PropCategory.REGULAR)
    prop.label = "EP Policy Control Tag"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop._addConstant("any", "any", 0)
    meta.props.add("pcTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "trustLevel", "trustLevel", 32725, PropCategory.REGULAR)
    prop.label = "Type"
    prop.isOper = True
    prop._addConstant("dhcp-assigned", "dhcp-assigned", 8)
    prop._addConstant("invalid", "invalid", 0)
    prop._addConstant("lla-mac-match", "lla-mac-match", 4)
    prop._addConstant("static-authenticated", "static-authenticated", 16)
    prop._addConstant("trusted-access", "trusted-access", 2)
    prop._addConstant("undetermined-trust", "undetermined-trust", 32)
    prop._addConstant("untrusted-access", "untrusted-access", 1)
    meta.props.add("trustLevel", prop)

    prop = PropMeta("str", "violationType", "violationType", 32717, PropCategory.REGULAR)
    prop.label = "Violation Type"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 0
    prop.defaultValueStr = "address-theft"
    prop._addConstant("address-theft", "address-theft-(local-leaf)", 0)
    prop._addConstant("address-theft-remote", "address-theft-(remote-leaf)", 1)
    prop._addConstant("internal", "internal", 4)
    prop._addConstant("policy", "policy", 3)
    prop._addConstant("role", "role", 2)
    meta.props.add("violationType", prop)

    meta.namingProps.append(getattr(meta.props, "featureName"))
    meta.namingProps.append(getattr(meta.props, "origin"))
    meta.namingProps.append(getattr(meta.props, "violationType"))
    meta.namingProps.append(getattr(meta.props, "epip"))
    getattr(meta.props, "epip").needDelimiter = True
    meta.namingProps.append(getattr(meta.props, "pcTag"))
    meta.namingProps.append(getattr(meta.props, "if"))
    getattr(meta.props, "if").needDelimiter = True
    meta.namingProps.append(getattr(meta.props, "epmac"))

    def __init__(self, parentMoOrDn, featureName, origin, violationType, epip, pcTag, if_, epmac, markDirty=True, **creationProps):
        namingVals = [featureName, origin, violationType, epip, pcTag, if_, epmac]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

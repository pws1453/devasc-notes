# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class PortCap(Mo):
    """
    Port runtime capabilities, for example maximum speed.

    """

    meta = ClassMeta("cobra.model.ethpm.PortCap")

    meta.moClassName = "ethpmPortCap"
    meta.rnFormat = "portcap"
    meta.category = MoCategory.REGULAR
    meta.label = "Port Capability"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.parentClasses.add("cobra.model.ethpm.PhysIf")
    meta.parentClasses.add("cobra.model.ethpm.AggrIf")

    meta.rnPrefixes = [
        ('portcap', False),
    ]

    prop = PropMeta("str", "autoneg", "autoneg", 3872, PropCategory.REGULAR)
    prop.label = "Auto-neg Capable"
    prop.isOper = True
    meta.props.add("autoneg", prop)

    prop = PropMeta("str", "channel", "channel", 3864, PropCategory.REGULAR)
    prop.label = "Channel Boolean"
    prop.isOper = True
    meta.props.add("channel", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cosRewrite", "cosRewrite", 3868, PropCategory.REGULAR)
    prop.label = "Cos Rewrite Boolean"
    prop.isOper = True
    meta.props.add("cosRewrite", prop)

    prop = PropMeta("str", "ctsCapable", "ctsCapable", 3879, PropCategory.REGULAR)
    prop.label = "Cts Capable"
    prop.isOper = True
    meta.props.add("ctsCapable", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "duplex", "duplex", 3862, PropCategory.REGULAR)
    prop.label = "Duplex Bitmask"
    prop.isOper = True
    meta.props.add("duplex", prop)

    prop = PropMeta("str", "eeeCapVal", "eeeCapVal", 3891, PropCategory.REGULAR)
    prop.label = "EEE Capability Value"
    prop.isOper = True
    meta.props.add("eeeCapVal", prop)

    prop = PropMeta("str", "eeeFlapFlags", "eeeFlapFlags", 3893, PropCategory.REGULAR)
    prop.label = "EEE Flap Flags"
    prop.isOper = True
    meta.props.add("eeeFlapFlags", prop)

    prop = PropMeta("str", "eeeWakeTimes10g", "eeeWakeTimes10g", 3892, PropCategory.REGULAR)
    prop.label = "EEE 10G Wake Times"
    prop.isOper = True
    meta.props.add("eeeWakeTimes10g", prop)

    prop = PropMeta("str", "fcotCapable", "fcotCapable", 3875, PropCategory.REGULAR)
    prop.label = "Fcot Capable"
    prop.isOper = True
    meta.props.add("fcotCapable", prop)

    prop = PropMeta("str", "id", "id", 3860, PropCategory.REGULAR)
    prop.label = "If-index"
    prop.isOper = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "linkDebounce", "linkDebounce", 3873, PropCategory.REGULAR)
    prop.label = "Link Debounce"
    prop.isOper = True
    meta.props.add("linkDebounce", prop)

    prop = PropMeta("str", "linkDebounceTime", "linkDebounceTime", 3874, PropCategory.REGULAR)
    prop.label = "Link Debounce Time"
    prop.isOper = True
    meta.props.add("linkDebounceTime", prop)

    prop = PropMeta("str", "mdix", "mdix", 3877, PropCategory.REGULAR)
    prop.label = "Mdix Capable"
    prop.isOper = True
    meta.props.add("mdix", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "model", "model", 3886, PropCategory.REGULAR)
    prop.label = "Model"
    prop.isOper = True
    meta.props.add("model", prop)

    prop = PropMeta("str", "portCap", "portCap", 3890, PropCategory.REGULAR)
    prop.label = "Port Capability Flags"
    prop.isOper = True
    meta.props.add("portCap", prop)

    prop = PropMeta("str", "portGroup", "portGroup", 3878, PropCategory.REGULAR)
    prop.label = "Port Group Value"
    prop.isOper = True
    meta.props.add("portGroup", prop)

    prop = PropMeta("str", "portGrpMbrs", "portGrpMbrs", 3888, PropCategory.REGULAR)
    prop.label = "Port-group Member"
    prop.isOper = True
    meta.props.add("portGrpMbrs", prop)

    prop = PropMeta("str", "protoSupport", "protoSupport", 3889, PropCategory.REGULAR)
    prop.label = "Protocol Support"
    prop.isOper = True
    meta.props.add("protoSupport", prop)

    prop = PropMeta("str", "qosRxPrio", "qosRxPrio", 3880, PropCategory.REGULAR)
    prop.label = "Qos Rx Priority Value"
    prop.isOper = True
    meta.props.add("qosRxPrio", prop)

    prop = PropMeta("str", "qosRxQueue", "qosRxQueue", 3881, PropCategory.REGULAR)
    prop.label = "Qos Rx Queue Value"
    prop.isOper = True
    meta.props.add("qosRxQueue", prop)

    prop = PropMeta("str", "qosRxThold", "qosRxThold", 3882, PropCategory.REGULAR)
    prop.label = "Qos Rx Threshold Value"
    prop.isOper = True
    meta.props.add("qosRxThold", prop)

    prop = PropMeta("str", "qosTxPrio", "qosTxPrio", 3883, PropCategory.REGULAR)
    prop.label = "Qos Tx Prority Value"
    prop.isOper = True
    meta.props.add("qosTxPrio", prop)

    prop = PropMeta("str", "qosTxQueue", "qosTxQueue", 3884, PropCategory.REGULAR)
    prop.label = "Qos Tx Queue Value"
    prop.isOper = True
    meta.props.add("qosTxQueue", prop)

    prop = PropMeta("str", "qosTxThold", "qosTxThold", 3885, PropCategory.REGULAR)
    prop.label = "Qos Tx Threshold Value"
    prop.isOper = True
    meta.props.add("qosTxThold", prop)

    prop = PropMeta("str", "rateMode", "rateMode", 3876, PropCategory.REGULAR)
    prop.label = "Rate Mode Bitmask"
    prop.isOper = True
    meta.props.add("rateMode", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "rxFlowControl", "rxFlowControl", 3866, PropCategory.REGULAR)
    prop.label = "Rx Flow Control Boolean"
    prop.isOper = True
    meta.props.add("rxFlowControl", prop)

    prop = PropMeta("str", "span", "span", 3870, PropCategory.REGULAR)
    prop.label = "Span Capable"
    prop.isOper = True
    meta.props.add("span", prop)

    prop = PropMeta("str", "speed", "speed", 3861, PropCategory.REGULAR)
    prop.label = "Speed Bitmask"
    prop.isOper = True
    prop._addConstant("10", "10", 1)
    prop._addConstant("100", "100", 2)
    prop._addConstant("1000", "1000", 4)
    prop._addConstant("10000", "10000", 8)
    prop._addConstant("100000", "100000", 64)
    prop._addConstant("25000", "25000", 128)
    prop._addConstant("40000", "40000", 32)
    prop._addConstant("auto", "auto", 16)
    meta.props.add("speed", prop)

    prop = PropMeta("str", "speed32", "speed32", 55942, PropCategory.REGULAR)
    prop.label = "Speed Capability Bitmask"
    prop.isOper = True
    prop._addConstant("10", "10", 1)
    prop._addConstant("100", "100", 2)
    prop._addConstant("1000", "1000", 4)
    prop._addConstant("10000", "10000", 8)
    prop._addConstant("100000", "100000", 64)
    prop._addConstant("200000", "200000", 512)
    prop._addConstant("25000", "25000", 128)
    prop._addConstant("40000", "40000", 32)
    prop._addConstant("400000", "400000", 256)
    prop._addConstant("50000", "50000", 1024)
    prop._addConstant("auto", "auto", 16)
    meta.props.add("speed32", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "suppression", "suppression", 3865, PropCategory.REGULAR)
    prop.label = "Suppression Bitmask"
    prop.isOper = True
    meta.props.add("suppression", prop)

    prop = PropMeta("str", "tosRewrite", "tosRewrite", 3869, PropCategory.REGULAR)
    prop.label = "Tos Rewrite Boolean"
    prop.isOper = True
    meta.props.add("tosRewrite", prop)

    prop = PropMeta("str", "trunkEncap", "trunkEncap", 3863, PropCategory.REGULAR)
    prop.label = "Trunk Encap Bitmask"
    prop.isOper = True
    meta.props.add("trunkEncap", prop)

    prop = PropMeta("str", "txFlowControl", "txFlowControl", 3867, PropCategory.REGULAR)
    prop.label = "Tx Flow Control Boolean"
    prop.isOper = True
    meta.props.add("txFlowControl", prop)

    prop = PropMeta("str", "type", "type", 3887, PropCategory.REGULAR)
    prop.label = "Type"
    prop.isOper = True
    meta.props.add("type", prop)

    prop = PropMeta("str", "udld", "udld", 3871, PropCategory.REGULAR)
    prop.label = "Udld Capable"
    prop.isOper = True
    meta.props.add("udld", prop)

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("l1EthIfToEPg", "EPG", "cobra.model.fv.EPg"))

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

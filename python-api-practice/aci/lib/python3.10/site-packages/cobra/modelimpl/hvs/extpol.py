# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class ExtPol(Mo):
    """
    The extended policies, which are common policies for VM interfaces. For example, when implementing VMware, this represents the distributed virtual port group.

    """

    meta = ClassMeta("cobra.model.hvs.ExtPol")

    meta.moClassName = "hvsExtPol"
    meta.rnFormat = "extpol-%(oid)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Portgroup"
    meta.writeAccessMask = 0x5
    meta.readAccessMask = 0x25
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.hvs.UplinkOrderCont")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.comp.PrimaryEncapDef")
    meta.childClasses.add("cobra.model.hvs.RsPvlan2")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.res.Consumer")
    meta.childClasses.add("cobra.model.hvs.RtMgmtPol")
    meta.childClasses.add("cobra.model.hvs.RtUlPol")
    meta.childClasses.add("cobra.model.hvs.RsExtPol")
    meta.childClasses.add("cobra.model.hvs.RsEpPD")
    meta.childClasses.add("cobra.model.hvs.Encap")
    meta.childClasses.add("cobra.model.hvs.ResCont")
    meta.childClasses.add("cobra.model.hvs.RtDlPol")
    meta.childClasses.add("cobra.model.comp.EpPConn")
    meta.childClasses.add("cobra.model.fvns.EncapBlkDef")
    meta.childClasses.add("cobra.model.hvs.RsPvlan")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.hvs.RtExtPol")

    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.UplinkOrderCont", "Uplinkordercont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.RtMgmtPol", "rtcompMgmtPol-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.RtUlPol", "rtcompUlPol-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.RtDlPol", "rtcompDlPol-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.PrimaryEncapDef", "primencap-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.RtExtPol", "rtextPol-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.RsPvlan2", "rsPvlan2"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.RsExtPol", "rsExtPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.EpPConn", "eppconn-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fvns.EncapBlkDef", "deffrom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.res.Consumer", "rescon-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.ResCont", "rescont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.RsPvlan", "rsPvlan"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.RsEpPD", "rsEpPD"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.Encap", "en-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.hvs.LNode")

    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Def")
    meta.superClasses.add("cobra.model.fabric.Def")

    meta.rnPrefixes = [
        ('extpol-', True),
    ]

    prop = PropMeta("str", "OperSt", "OperSt", 224, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("applied", "applied", 4)
    prop._addConstant("pendingApply", "pendingadd", 1)
    prop._addConstant("pendingDelete", "pendingdelete", 2)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("OperSt", prop)

    prop = PropMeta("str", "allowPromiscuous", "allowPromiscuous", 21282, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "reject"
    prop._addConstant("accept", "accept", 1)
    prop._addConstant("reject", "reject", 0)
    meta.props.add("allowPromiscuous", prop)

    prop = PropMeta("str", "bindingType", "bindingType", 44458, PropCategory.REGULAR)
    prop.label = "Binding Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("dynamicBinding", "dynamic-binding", 2)
    prop._addConstant("ephemeral", "ephemeral", 3)
    prop._addConstant("none", "default", 0)
    prop._addConstant("staticBinding", "static-binding", 1)
    meta.props.add("bindingType", prop)

    prop = PropMeta("str", "blockAllPorts", "blockAllPorts", 24094, PropCategory.REGULAR)
    prop.label = "Block All Ports Setting"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "Disabled"
    prop._addConstant("Disabled", "disabled", 1)
    prop._addConstant("Enabled", "enabled", 2)
    meta.props.add("blockAllPorts", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "corrEpPD", "corrEpPD", 56469, PropCategory.REGULAR)
    prop.label = "ExtPol's corresponding EpPD name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("corrEpPD", prop)

    prop = PropMeta("str", "descr", "descr", 5579, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "encapMode", "encapMode", 23400, PropCategory.REGULAR)
    prop.label = "Encapsulation mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "access"
    prop._addConstant("access", "access-mode", 0)
    prop._addConstant("none", "untagged-access-mode", 3)
    prop._addConstant("private", "private-mode", 2)
    prop._addConstant("trunk", "trunk-mode", 1)
    meta.props.add("encapMode", prop)

    prop = PropMeta("str", "endEncap", "endEncap", 221, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("endEncap", prop)

    prop = PropMeta("str", "eppdType", "eppdType", 225, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "Tenant"
    prop._addConstant("L3Out", "l3out", 4)
    prop._addConstant("Mgmt", "mgmt", 1)
    prop._addConstant("Services", "services", 3)
    prop._addConstant("Tenant", "tenant", 2)
    prop._addConstant("Uplink", "uplink", 5)
    meta.props.add("eppdType", prop)

    prop = PropMeta("str", "forgedTransmits", "forgedTransmits", 21283, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "reject"
    prop._addConstant("accept", "accept", 1)
    prop._addConstant("reject", "reject", 0)
    meta.props.add("forgedTransmits", prop)

    prop = PropMeta("str", "guid", "guid", 219, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("guid", prop)

    prop = PropMeta("str", "inherited", "inherited", 54146, PropCategory.REGULAR)
    prop.label = "Inherited"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("inherited", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "macChanges", "macChanges", 21284, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "reject"
    prop._addConstant("accept", "accept", 1)
    prop._addConstant("reject", "reject", 0)
    meta.props.add("macChanges", prop)

    prop = PropMeta("str", "mcastAddr", "mcastAddr", 222, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("mcastAddr", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 216, PropCategory.REGULAR)
    prop.label = "Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "default"
    prop._addConstant("cf", "cloud-foundry", 6)
    prop._addConstant("default", "distributed-switch", 0)
    prop._addConstant("k8s", "kubernetes", 4)
    prop._addConstant("n1kv", "cisco-avs", 1)
    prop._addConstant("openshift", "openshift", 7)
    prop._addConstant("ovs", "open-vswitch", 3)
    prop._addConstant("rhev", "rhev", 5)
    prop._addConstant("unknown", "unknown", 2)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 13776, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 215, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "netflowPref", "netflowPref", 27502, PropCategory.REGULAR)
    prop.label = "Netflow Policy Enforcement"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 1)
    prop._addConstant("enabled", "enabled", 2)
    meta.props.add("netflowPref", prop)

    prop = PropMeta("str", "numPorts", "numPorts", 44460, PropCategory.REGULAR)
    prop.label = "Number Of Ports"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("numPorts", prop)

    prop = PropMeta("str", "oid", "oid", 218, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 512)]
    meta.props.add("oid", prop)

    prop = PropMeta("str", "operIssues", "operIssues", 17948, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("invalid-extpol", "cannot-find-an-epg-policy-in-the-domain-for-the-portgroup.", 1)
    prop._addConstant("invalid-lag-policy-exist", "cannot-find-a-lacpenhancedlag-policy-in-the-domain-for-the-enhancedlag-policy-on-the-dvs", 4)
    prop._addConstant("invalid-secgrp", "epg-policy-and-security-group-mismatch.", 2)
    prop._addConstant("none", "none", 0)
    meta.props.add("operIssues", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15230, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15231, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "ownership", "ownership", 223, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "local"
    prop._addConstant("local", "local", 1)
    prop._addConstant("remote", "remote", 2)
    meta.props.add("ownership", prop)

    prop = PropMeta("str", "pgKey", "pgKey", 30548, PropCategory.REGULAR)
    prop.label = "Portgroup Key"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("pgKey", prop)

    prop = PropMeta("str", "portAllocation", "portAllocation", 44459, PropCategory.REGULAR)
    prop.label = "Port Allocation"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("elastic", "elastic", 2)
    prop._addConstant("fixed", "fixed", 1)
    prop._addConstant("none", "default", 0)
    meta.props.add("portAllocation", prop)

    prop = PropMeta("str", "primaryEncap", "primaryEncap", 23401, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("primaryEncap", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "startEncap", "startEncap", 220, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("startEncap", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "type", "type", 217, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "vnic"
    prop._addConstant("pnic", "pnic", 2)
    prop._addConstant("vnic", "vnic", 1)
    prop._addConstant("vsmgmt", "vsmgmt", 3)
    meta.props.add("type", prop)

    meta.namingProps.append(getattr(meta.props, "oid"))

    def __init__(self, parentMoOrDn, oid, markDirty=True, **creationProps):
        namingVals = [oid]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Adj(Mo):
    """
    The connectivity to an external network.

    """

    meta = ClassMeta("cobra.model.hvs.Adj")

    meta.moClassName = "hvsAdj"
    meta.rnFormat = "adj-[%(nbrKey)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Adjacency"
    meta.writeAccessMask = 0x5
    meta.readAccessMask = 0x5
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.hvs.RtNicAdj")
    meta.childClasses.add("cobra.model.hvs.RsLsNode")

    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.RtNicAdj", "rtcompNicAdj-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.RsLsNode", "rsLsNode"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.comp.Hv")

    meta.rnPrefixes = [
        ('adj-', True),
    ]

    prop = PropMeta("str", "addr", "addr", 234, PropCategory.REGULAR)
    prop.label = "Neighbor Address"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("addr", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "configIssues", "configIssues", 238, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("missing-mgmtip", "management-address-is-not-configured-on-loosenode-(unmanaged-switch)", 1)
    prop._addConstant("none", "none", 0)
    meta.props.add("configIssues", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "ifId", "ifId", 236, PropCategory.REGULAR)
    prop.label = "Interface Id"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ifId", prop)

    prop = PropMeta("str", "ifName", "ifName", 235, PropCategory.REGULAR)
    prop.label = "Neighbor Interface"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ifName", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 13777, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 229, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nbrDesc", "nbrDesc", 232, PropCategory.REGULAR)
    prop.label = "Neighbor Description"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("nbrDesc", prop)

    prop = PropMeta("str", "nbrId", "nbrId", 231, PropCategory.REGULAR)
    prop.label = "Neighbor Identifier"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("nbrId", prop)

    prop = PropMeta("str", "nbrKey", "nbrKey", 233, PropCategory.REGULAR)
    prop.label = "Neighbor Key"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 512)]
    meta.props.add("nbrKey", prop)

    prop = PropMeta("str", "nbrName", "nbrName", 230, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("nbrName", prop)

    prop = PropMeta("str", "nbrType", "nbrType", 237, PropCategory.REGULAR)
    prop.label = "Neighbor Type, Leaf or Loosenode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "leaf"
    prop._addConstant("leaf", "leaf", 1)
    prop._addConstant("loosenode", "loosenode", 2)
    meta.props.add("nbrType", prop)

    prop = PropMeta("str", "proto", "proto", 228, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("CDP", "cdp", 2)
    prop._addConstant("LLDP", "lldp", 1)
    prop._addConstant("none", "none", 0)
    meta.props.add("proto", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "nbrKey"))
    getattr(meta.props, "nbrKey").needDelimiter = True

    def __init__(self, parentMoOrDn, nbrKey, markDirty=True, **creationProps):
        namingVals = [nbrKey]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class ExtMngdInst(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.tag.ExtMngdInst")

    meta.moClassName = "tagExtMngdInst"
    meta.rnFormat = "extmngd"
    meta.category = MoCategory.REGULAR
    meta.label = "External tag instance"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.fv.RsNodeAtt")
    meta.parentClasses.add("cobra.model.fv.EpNlb")
    meta.parentClasses.add("cobra.model.vmm.InjectedReplSet")
    meta.parentClasses.add("cobra.model.poe.IfPol")
    meta.parentClasses.add("cobra.model.macsec.KeyChainPol")
    meta.parentClasses.add("cobra.model.fv.IPSLAMonitoringPol")
    meta.parentClasses.add("cobra.model.vns.EPpInfo")
    meta.parentClasses.add("cobra.model.fv.RsBd")
    meta.parentClasses.add("cobra.model.fabric.Heartbeat")
    meta.parentClasses.add("cobra.model.cloud.ISvcEPg")
    meta.parentClasses.add("cobra.model.fv.SiteConnP")
    meta.parentClasses.add("cobra.model.l3ext.Member")
    meta.parentClasses.add("cobra.model.vns.MscGraphXlateCont")
    meta.parentClasses.add("cobra.model.fv.NlbStaticGroup")
    meta.parentClasses.add("cobra.model.mgmt.OoB")
    meta.parentClasses.add("cobra.model.hostprot.Pol")
    meta.parentClasses.add("cobra.model.orchs.TnSvcsSubnet")
    meta.parentClasses.add("cobra.model.macsec.FabIfPol")
    meta.parentClasses.add("cobra.model.vns.RsNodeToLDev")
    meta.parentClasses.add("cobra.model.l3ext.RsPathL3OutAtt")
    meta.parentClasses.add("cobra.model.fabric.LinkFlapPol")
    meta.parentClasses.add("cobra.model.lacp.LagPol")
    meta.parentClasses.add("cobra.model.vns.SHEPpInfo")
    meta.parentClasses.add("cobra.model.cloudsec.Control")
    meta.parentClasses.add("cobra.model.l3ext.InstP")
    meta.parentClasses.add("cobra.model.infra.PEPg")
    meta.parentClasses.add("cobra.model.edm.RsExtDevDomP")
    meta.parentClasses.add("cobra.model.vns.LDevCtx")
    meta.parentClasses.add("cobra.model.fv.ExtRoutableUcastConnP")
    meta.parentClasses.add("cobra.model.fv.KeyChainPolDefCont")
    meta.parentClasses.add("cobra.model.ospf.IfPol")
    meta.parentClasses.add("cobra.model.fv.IntersiteMcastConnP")
    meta.parentClasses.add("cobra.model.eqpt.FabP")
    meta.parentClasses.add("cobra.model.vns.RsCIfAtt")
    meta.parentClasses.add("cobra.model.eqpt.FcP")
    meta.parentClasses.add("cobra.model.vz.InTerm")
    meta.parentClasses.add("cobra.model.lacp.EnhancedLagPol")
    meta.parentClasses.add("cobra.model.vns.RsRedirectHealthGroup")
    meta.parentClasses.add("cobra.model.fv.RsVrfValidationPol")
    meta.parentClasses.add("cobra.model.mgmt.InstPDef")
    meta.parentClasses.add("cobra.model.vns.AbsConnection")
    meta.parentClasses.add("cobra.model.vns.L1L2RedirectDest")
    meta.parentClasses.add("cobra.model.bgp.CtxPol")
    meta.parentClasses.add("cobra.model.eqpt.LeafP")
    meta.parentClasses.add("cobra.model.vns.SvcRedirectPol")
    meta.parentClasses.add("cobra.model.vmm.InjectedDepl")
    meta.parentClasses.add("cobra.model.fvns.VlanInstP")
    meta.parentClasses.add("cobra.model.cloud.LDevDef")
    meta.parentClasses.add("cobra.model.vns.RsDefaultScopeToTerm")
    meta.parentClasses.add("cobra.model.vns.LIf")
    meta.parentClasses.add("cobra.model.poe.RsPoeEpg")
    meta.parentClasses.add("cobra.model.bgp.PeerP")
    meta.parentClasses.add("cobra.model.vns.MgmtLIf")
    meta.parentClasses.add("cobra.model.eqpt.SysC")
    meta.parentClasses.add("cobra.model.ip.RsRouteTrack")
    meta.parentClasses.add("cobra.model.vns.RsToCIf")
    meta.parentClasses.add("cobra.model.macsec.IfPol")
    meta.parentClasses.add("cobra.model.vmm.InjectedNs")
    meta.parentClasses.add("cobra.model.ip.RouteP")
    meta.parentClasses.add("cobra.model.vns.RedirectDest")
    meta.parentClasses.add("cobra.model.l3ext.FabricExtRoutingP")
    meta.parentClasses.add("cobra.model.vz.BrCP")
    meta.parentClasses.add("cobra.model.fv.RsDomAtt")
    meta.parentClasses.add("cobra.model.fv.TnlCtx")
    meta.parentClasses.add("cobra.model.l3ext.InstPDef")
    meta.parentClasses.add("cobra.model.fv.RsProv")
    meta.parentClasses.add("cobra.model.auth.SvrGroup")
    meta.parentClasses.add("cobra.model.infra.AccPortP")
    meta.parentClasses.add("cobra.model.infra.RsVlanNs")
    meta.parentClasses.add("cobra.model.cloud.EPg")
    meta.parentClasses.add("cobra.model.infra.CEPg")
    meta.parentClasses.add("cobra.model.l3ext.InfraNodeP")
    meta.parentClasses.add("cobra.model.l3ext.VirtualLIfP")
    meta.parentClasses.add("cobra.model.l2ext.LIfP")
    meta.parentClasses.add("cobra.model.bgp.RRNodePEp")
    meta.parentClasses.add("cobra.model.l3ext.Ip")
    meta.parentClasses.add("cobra.model.fabric.Pod")
    meta.parentClasses.add("cobra.model.vmm.InjectedHost")
    meta.parentClasses.add("cobra.model.vmm.RsDomMcastAddrNs")
    meta.parentClasses.add("cobra.model.vmm.InjectedCont")
    meta.parentClasses.add("cobra.model.hostprot.RemoteIp")
    meta.parentClasses.add("cobra.model.l3ext.RsNodeL3OutAtt")
    meta.parentClasses.add("cobra.model.cloud.LB")
    meta.parentClasses.add("cobra.model.cloud.BgpAsP")
    meta.parentClasses.add("cobra.model.ospf.IfP")
    meta.parentClasses.add("cobra.model.fv.Subnet")
    meta.parentClasses.add("cobra.model.vz.Filter")
    meta.parentClasses.add("cobra.model.vns.LDevVip")
    meta.parentClasses.add("cobra.model.vz.CPIf")
    meta.parentClasses.add("cobra.model.l2ext.InstP")
    meta.parentClasses.add("cobra.model.vns.SvcEPgPol")
    meta.parentClasses.add("cobra.model.macsec.ParamPol")
    meta.parentClasses.add("cobra.model.infra.FcAccPortGrp")
    meta.parentClasses.add("cobra.model.fv.KeyPolDef")
    meta.parentClasses.add("cobra.model.vns.CopyConnector")
    meta.parentClasses.add("cobra.model.vns.HealthDest")
    meta.parentClasses.add("cobra.model.fabric.Node")
    meta.parentClasses.add("cobra.model.fvns.VsanInstP")
    meta.parentClasses.add("cobra.model.fabric.FIfPol")
    meta.parentClasses.add("cobra.model.infra.BrkoutPortGrp")
    meta.parentClasses.add("cobra.model.l3ext.Out")
    meta.parentClasses.add("cobra.model.fv.EpAnycast")
    meta.parentClasses.add("cobra.model.vns.RsCIfPathAtt")
    meta.parentClasses.add("cobra.model.l3ext.RsInstPToNatMappingEPg")
    meta.parentClasses.add("cobra.model.vns.REPpInfo")
    meta.parentClasses.add("cobra.model.fv.RsIpslaMonPol")
    meta.parentClasses.add("cobra.model.fv.RsConsIf")
    meta.parentClasses.add("cobra.model.extdev.GroupP")
    meta.parentClasses.add("cobra.model.vmm.InjectedOrg")
    meta.parentClasses.add("cobra.model.eqpt.LC")
    meta.parentClasses.add("cobra.model.fv.KeyChainPolDef")
    meta.parentClasses.add("cobra.model.vns.InTerm")
    meta.parentClasses.add("cobra.model.vns.AbsGraph")
    meta.parentClasses.add("cobra.model.vz.Entry")
    meta.parentClasses.add("cobra.model.fv.RsSecInherited")
    meta.parentClasses.add("cobra.model.vns.ConnectionInst")
    meta.parentClasses.add("cobra.model.l3ext.LIfP")
    meta.parentClasses.add("cobra.model.l2ext.Out")
    meta.parentClasses.add("cobra.model.l3ext.LoopBackIfP")
    meta.parentClasses.add("cobra.model.l3ext.IntersiteLoopBackIfP")
    meta.parentClasses.add("cobra.model.fvns.McastAddrBlk")
    meta.parentClasses.add("cobra.model.l3ext.VrfValidationPol")
    meta.parentClasses.add("cobra.model.vns.NodeInstDef")
    meta.parentClasses.add("cobra.model.fv.RsBgpCtxPol")
    meta.parentClasses.add("cobra.model.fv.IntersitePeeringP")
    meta.parentClasses.add("cobra.model.vz.RsInTermGraphAtt")
    meta.parentClasses.add("cobra.model.vz.RsGraphAtt")
    meta.parentClasses.add("cobra.model.vns.LIfCtx")
    meta.parentClasses.add("cobra.model.fv.RsCtx")
    meta.parentClasses.add("cobra.model.fv.BD")
    meta.parentClasses.add("cobra.model.fv.Ctx")
    meta.parentClasses.add("cobra.model.fabric.LeBrkoutPortGrp")
    meta.parentClasses.add("cobra.model.vns.RsLIfCtxToBD")
    meta.parentClasses.add("cobra.model.edm.RsEncapDef")
    meta.parentClasses.add("cobra.model.vns.OutTerm")
    meta.parentClasses.add("cobra.model.vns.RsALDevToPhysDomP")
    meta.parentClasses.add("cobra.model.fv.Ap")
    meta.parentClasses.add("cobra.model.vz.RsSubjGraphAtt")
    meta.parentClasses.add("cobra.model.cloud.RsIsakmpPhase1Pol")
    meta.parentClasses.add("cobra.model.fv.FabricExtConnP")
    meta.parentClasses.add("cobra.model.eqpt.Board")
    meta.parentClasses.add("cobra.model.bgp.ExtIntersiteRRP")
    meta.parentClasses.add("cobra.model.infra.AccPortGrp")
    meta.parentClasses.add("cobra.model.vns.RsIPSLAMonitoringPol")
    meta.parentClasses.add("cobra.model.vns.AbsFuncConn")
    meta.parentClasses.add("cobra.model.vns.EpgDefXlate")
    meta.parentClasses.add("cobra.model.cdp.IfPol")
    meta.parentClasses.add("cobra.model.vns.CDev")
    meta.parentClasses.add("cobra.model.hostprot.Subj")
    meta.parentClasses.add("cobra.model.fv.RsCons")
    meta.parentClasses.add("cobra.model.vns.RsL1L2RedirectHealthGroup")
    meta.parentClasses.add("cobra.model.bgp.LocalAsnP")
    meta.parentClasses.add("cobra.model.fv.AEPg")
    meta.parentClasses.add("cobra.model.vns.RsLIfCtxToSvcRedirectPol")
    meta.parentClasses.add("cobra.model.fv.ImplEpAnycast")
    meta.parentClasses.add("cobra.model.vmm.InjectedOrgUnit")
    meta.parentClasses.add("cobra.model.fabric.HIfPol")
    meta.parentClasses.add("cobra.model.extdev.MgrP")
    meta.parentClasses.add("cobra.model.hostprot.Rule")
    meta.parentClasses.add("cobra.model.ospf.RsIfPol")
    meta.parentClasses.add("cobra.model.cloud.CDevDef")
    meta.parentClasses.add("cobra.model.vz.RsOutTermGraphAtt")
    meta.parentClasses.add("cobra.model.vns.LDevIfLIf")
    meta.parentClasses.add("cobra.model.vmm.InjectedVnic")
    meta.parentClasses.add("cobra.model.vz.OutTerm")
    meta.parentClasses.add("cobra.model.vns.SDEPpInfo")
    meta.parentClasses.add("cobra.model.fv.RsEppBgpCtxPol")
    meta.parentClasses.add("cobra.model.mgmt.InstP")
    meta.parentClasses.add("cobra.model.vmm.InjectedContGrp")
    meta.parentClasses.add("cobra.model.fabric.SpBrkoutPortGrp")
    meta.parentClasses.add("cobra.model.eqpt.FC")
    meta.parentClasses.add("cobra.model.ip.NexthopEpP")
    meta.parentClasses.add("cobra.model.fv.ExtRoutableRemoteSitePodSubnet")
    meta.parentClasses.add("cobra.model.vns.AbsTermConn")
    meta.parentClasses.add("cobra.model.l2ext.LNodeP")
    meta.parentClasses.add("cobra.model.vmm.EpValidatorPol")
    meta.parentClasses.add("cobra.model.vz.Subj")
    meta.parentClasses.add("cobra.model.lldp.IfPol")
    meta.parentClasses.add("cobra.model.l3ext.RsEctx")
    meta.parentClasses.add("cobra.model.l3ext.LNodeP")
    meta.parentClasses.add("cobra.model.cloud.RsIsakmpPhase2Pol")
    meta.parentClasses.add("cobra.model.vmm.CtrlrP")
    meta.parentClasses.add("cobra.model.vns.RsLIfCtxToOut")
    meta.parentClasses.add("cobra.model.fv.RsOtmListMember")
    meta.parentClasses.add("cobra.model.fvns.EncapBlk")
    meta.parentClasses.add("cobra.model.vmm.InjectedSvcEp")
    meta.parentClasses.add("cobra.model.vns.AbsTermNodeProv")
    meta.parentClasses.add("cobra.model.l3ext.RsArpIfPol")
    meta.parentClasses.add("cobra.model.fv.CCg")
    meta.parentClasses.add("cobra.model.vns.LDevIf")
    meta.parentClasses.add("cobra.model.vns.RsLDevCtxToLDev")
    meta.parentClasses.add("cobra.model.bgp.ExtP")
    meta.parentClasses.add("cobra.model.vns.RedirectHealthGroup")
    meta.parentClasses.add("cobra.model.vmm.RsVxlanNs")
    meta.parentClasses.add("cobra.model.vns.SvcCont")
    meta.parentClasses.add("cobra.model.eqpt.Nic")
    meta.parentClasses.add("cobra.model.vns.NodeInst")
    meta.parentClasses.add("cobra.model.vz.RsFiltAtt")
    meta.parentClasses.add("cobra.model.edm.NicProf")
    meta.parentClasses.add("cobra.model.stp.IfPol")
    meta.parentClasses.add("cobra.model.fabric.FLinkFlapPol")
    meta.parentClasses.add("cobra.model.dhcp.CRelPg")
    meta.parentClasses.add("cobra.model.fv.KeyPol")
    meta.parentClasses.add("cobra.model.vz.RsFiltGraphAtt")
    meta.parentClasses.add("cobra.model.vns.BackupPol")
    meta.parentClasses.add("cobra.model.vns.RsLIfCtxToSvcEPgPol")
    meta.parentClasses.add("cobra.model.vns.RsBackupPol")
    meta.parentClasses.add("cobra.model.auth.Svr")
    meta.parentClasses.add("cobra.model.cloudsec.PreSharedKey")
    meta.parentClasses.add("cobra.model.vns.RsCDevToCtrlrP")
    meta.parentClasses.add("cobra.model.vns.NextHopInfo")
    meta.parentClasses.add("cobra.model.vns.RsLIfCtxToLIf")
    meta.parentClasses.add("cobra.model.fv.SlaDef")
    meta.parentClasses.add("cobra.model.vz.RsSubjFiltAtt")
    meta.parentClasses.add("cobra.model.vns.RsLIfCtxToInstP")
    meta.parentClasses.add("cobra.model.fv.TnlEPg")
    meta.parentClasses.add("cobra.model.l3ext.Subnet")
    meta.parentClasses.add("cobra.model.l3ext.ForwarderAddr")
    meta.parentClasses.add("cobra.model.eqpt.BrkoutP")
    meta.parentClasses.add("cobra.model.dhcp.PRelPg")
    meta.parentClasses.add("cobra.model.vns.PbrByPassCont")
    meta.parentClasses.add("cobra.model.infra.RsDomP")
    meta.parentClasses.add("cobra.model.vmm.InjectedSvcPort")
    meta.parentClasses.add("cobra.model.vmm.InjectedVm")
    meta.parentClasses.add("cobra.model.vns.RsCIfAttN")
    meta.parentClasses.add("cobra.model.vns.AbsNode")
    meta.parentClasses.add("cobra.model.vns.RsAbsConnectionConns")
    meta.parentClasses.add("cobra.model.fv.RsPathAtt")
    meta.parentClasses.add("cobra.model.ip.NexthopP")
    meta.parentClasses.add("cobra.model.eqpt.SupC")
    meta.parentClasses.add("cobra.model.macsec.KeyPol")
    meta.parentClasses.add("cobra.model.vns.CIf")
    meta.parentClasses.add("cobra.model.macsec.FabParamPol")
    meta.parentClasses.add("cobra.model.eqpt.ExtChHP")
    meta.parentClasses.add("cobra.model.fv.KeyChainPol")
    meta.parentClasses.add("cobra.model.l3ext.OutDef")
    meta.parentClasses.add("cobra.model.bgp.AsP")
    meta.parentClasses.add("cobra.model.vns.TermNodeInst")
    meta.parentClasses.add("cobra.model.vns.RsALDevToDomP")
    meta.parentClasses.add("cobra.model.vmm.DomP")
    meta.parentClasses.add("cobra.model.vmm.InjectedSvc")
    meta.parentClasses.add("cobra.model.fv.IntersiteConnP")
    meta.parentClasses.add("cobra.model.vns.ByPassChain")
    meta.parentClasses.add("cobra.model.eqpt.ExtChFP")
    meta.parentClasses.add("cobra.model.fv.RsIntraEpg")
    meta.parentClasses.add("cobra.model.vns.RsLIfCtxToOutDef")
    meta.parentClasses.add("cobra.model.cloud.ExtEPg")
    meta.parentClasses.add("cobra.model.vns.FuncConnInst")
    meta.parentClasses.add("cobra.model.eqpt.ExtChCard")
    meta.parentClasses.add("cobra.model.infra.SpAccPortGrp")
    meta.parentClasses.add("cobra.model.ospf.ExtP")
    meta.parentClasses.add("cobra.model.fv.EpReachability")
    meta.parentClasses.add("cobra.model.fv.RsBDToOut")
    meta.parentClasses.add("cobra.model.stormctrl.IfPol")
    meta.parentClasses.add("cobra.model.mgmt.InB")
    meta.parentClasses.add("cobra.model.vns.RsLDevCtxToRtrCfg")
    meta.parentClasses.add("cobra.model.cloud.LIfDef")
    meta.parentClasses.add("cobra.model.fv.Tenant")
    meta.parentClasses.add("cobra.model.fvns.McastAddrInstP")
    meta.parentClasses.add("cobra.model.ip.RsNexthopRouteTrack")
    meta.parentClasses.add("cobra.model.lacp.IfPol")
    meta.parentClasses.add("cobra.model.fabric.PathEp")
    meta.parentClasses.add("cobra.model.l3ext.RsL3DomAtt")
    meta.parentClasses.add("cobra.model.infra.SpAccPortP")
    meta.parentClasses.add("cobra.model.nd.PfxP")
    meta.parentClasses.add("cobra.model.l3ext.VirtualLIfPDef")
    meta.parentClasses.add("cobra.model.l3ext.RsNdIfPol")
    meta.parentClasses.add("cobra.model.vns.AbsTermNodeCon")
    meta.parentClasses.add("cobra.model.vns.RsNodeToCloudLDev")
    meta.parentClasses.add("cobra.model.vns.TermConnInst")
    meta.parentClasses.add("cobra.model.datetime.Ntpq")
    meta.parentClasses.add("cobra.model.bgp.InfraPeerP")

    meta.superClasses.add("cobra.model.tag.Obj")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.tag.AInst")

    meta.rnPrefixes = [
        ('extmngd', False),
    ]

    prop = PropMeta("str", "annotation", "annotation", 38713, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 40852, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "isMsc", "isMsc", 33472, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("isMsc", prop)

    prop = PropMeta("str", "isShadow", "isShadow", 35486, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("isShadow", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 1502, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9=!#$%()*,-.:;@ _{|}~?&+]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FLinkFlapPolToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("LinkFlapPolToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FIfPolToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToHcloudIgw", "Tenant to IGW", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToHcloudSecurityGroup", "Tenant to Security Group", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzCPIfToVzFilterViaVzRsFiltAtt", "Imported Contracts to Filters", "cobra.model.vz.Filter"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzCPIfToVzFilterViaVzRsSubjFiltAtt", "Imported Contracts to Filters", "cobra.model.vz.Filter"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCpToVzFilterViaVzRsFiltAtt", "From contract to vzFilter", "cobra.model.vz.Filter"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCpToVzFilterViaVzRsSubjFiltAtt", "From contract to vzFilter", "cobra.model.vz.Filter"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToVzCPIf", "Tenant to vzCPIf", "cobra.model.vz.CPIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzCPIfToHcloudEndPointCons", "Imported Contracts to Consumer End Points", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzCPIfToHcloudEndPointProv", "Imported Contracts to Provider End Points", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzCPIfToProvCloudEPg", "Imported Contracts to Provider Cloud EPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzCPIfToConsCloudEPg", "Imported Contract to Consumer EPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzCPIfToVzSubj", "Imported Contracts to Subjects", "cobra.model.vz.Subj"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHcloudIgw", "From fv:Ctx to hcloud:Igw", "cobra.model.hcloud.Igw"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHcloudVgw", "From fv:Ctx to hcloud:Vgw", "cobra.model.hcloud.Vgw"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHcbgpPeerOper", "cloud:L3TunnelIfP to hcbgp:PeerOper", "cobra.model.hcbgp.PeerOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHcbgpPeer", "cloud:L3TunnelIfP to hcbgp:Peer", "cobra.model.hcbgp.Peer"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHcl3LoopbackRoutedIfOper", "cloud:L3TunnelIfP to hcl3:LoopbackRoutedIfOper", "cobra.model.hcl3.LoopbackRoutedIfOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHcl3LoopbackRoutedIf", "cloud:L3TunnelIfP to hcl3:LoopbackRoutedIf", "cobra.model.hcl3.LoopbackRoutedIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHcloudCsr", "cloud:L3TunnelIfP to hcloud:Csr", "cobra.model.hcloud.Csr"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHcospfRsTunnIf", "cloud:L3TunnelIfP to hcospf:OspfTunnIf", "cobra.model.hcospf.RsTunnIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHcospfOspfTunnIfOper", "cloud:L3TunnelIfP to hcospf:OspfTunnIfOper", "cobra.model.hcospf.OspfTunnIfOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHctunnIfOper", "cloud:L3TunnelIfP to hctunn:IfOper", "cobra.model.hctunn.IfOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToCloudRegion", "cloud:L3TunnelIfP to cloud:Region", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHctunnIf", "cloud:L3TunnelIfP to hctunn:If", "cobra.model.hctunn.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzFilterToConsCloudExtEPg", "From Filter to cloudExtEPg", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzFilterToProvCloudExtEPg", "From Filter to cloudExtEPg", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzFilterToConsCloudEPg", "From Filter to cloudEPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzFilterToProvCloudEPg", "From Filter to cloudEPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzFilterToVzBrCP", "From Filter to Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzFilterToVzEntry", "From Filter to Entry", "cobra.model.vz.Entry"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToVzFilter", "From fvTenant to vzFilter", "cobra.model.vz.Filter"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToConsVzBrCP", "From cloud ExtEPg to Consumer Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToProvVzBrCP", "From cloud ExtEPg to Provider Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToConsVzBrCP", "From EPg to Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToProvVzBrCP", "From EPg to Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EdmMgrToEdmNicProf", "edmMgr to edmNicProf", "cobra.model.edm.NicProf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EdmMgrToEdmNicProfToDom", "edmMgr to edmNicProfToDom", "cobra.model.edm.NicProfToDom"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToVnsAbsGraph", "From fvTenant to vnsAbsGraph", "cobra.model.vns.AbsGraph"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToCloudLB", "From fvTenant to cloudLB", "cobra.model.cloud.LB"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToCloudZone", "From fvTenant to cloudZone", "cobra.model.cloud.Zone"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VnsAbsGraphToHcloudSecurityGroup", "From vnsAbsGraph to hcloudSecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VnsAbsGraphToVzBrCP", "From vnsAbsGraph to vzBrCP", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VnsAbsGraphToCloudLB", "From vnsAbsGraph to cloudLB", "cobra.model.cloud.LB"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudLBToHcloudSecurityGroup", "From cloudLB to hcloudSecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudLBToVnsAbsGraph", "From cloudLB to vnsAbsGraph", "cobra.model.vns.AbsGraph"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudExtEPg", "From fvCtx (VRF) to cloudExtEPg", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToFvCtx", "cloud:ExtEPg to fv:Ctx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToHCloudEndPoint", "cloud:ExtEPg to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToHcloudSecurityGroup", "cloud:ExtEPg to hcloud:SecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToHCloudCtx", "From cloud ExtEPg to VPCs hCloudCtx", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCPToConsCloudExtEPg", "From contract to Consumer Ext EPG", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCPToProvCloudExtEPg", "From contract to Provider Ext EPG", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudCtxProfile", "Tenant to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToVzBrCP", "Tenant to vzBrCP", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHcloudCsr", "Tenant to hcloudCsr", "cobra.model.hcloud.Csr"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudExtEPg", "fv:Tenant to cloud:ExtEPg", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudRegion", "From fvTenant to cloudRegion", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudRegion", "From fvCtx (VRF) to CloudRegion", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHcloudCsr", "From fvCtx (VRF) to hcloudCsr (CSR)", "cobra.model.hcloud.Csr"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToHcloudSecurityGroup", "cloud:EPg to hcloud:SecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCpToHcloudEndPointCons", "From contract to Consumer end point", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCpToHcloudEndPointProv", "From contract to Provider EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHcloudRegion", "Tenant to hcloudRegion", "cobra.model.hcloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToFvCtx", "fvTenant to fvCtx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToFvCtx", "cloud:EPg to fv:Ctx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCPToConsCloudEPg", "From contract to Consumer EPG", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCPToProvCloudEPg", "From contract to Provider EPG", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCPToVzSubj", "From contract to Filters which refer to this contract", "cobra.model.vz.Subj"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHcloudCtx", "Tenant to Hcloud context", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHCloudEndPoint", "From fvCtx (VRF) to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToHCloudEndPoint", "cloud:EPg to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHCloudCtx", "From fvCtx (VRF) to hcloudCtx (VPC)", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudCtxProfile", "From fvCtx (VRF) to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudEPg", "From fvCtx (VRF) to cloud EPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToHCloudCtx", "From cloud EPg to VPCs hCloudCtx", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCPToFvRsProv", "From contract to Providers", "cobra.model.fv.RsProv"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCPToFvRsCons", "From contract to Consumers", "cobra.model.fv.RsCons"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCPToVzRtSubjFiltAtt", "From contract to Filters which refer to this contract", "cobra.model.vz.RtSubjFiltAtt"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("cloudEpgToApp", "cloudEpgToApp", "cobra.model.cloud.App"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHCloudEndPoint", "Tenant to hcloudEndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudApp", "Tenant to Application profile", "cobra.model.cloud.App"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudEPg", "Tenant to cloud EPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CtxToRegion", "Vrf to cloud Region", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("fvKeyChainPolToNwIf", "Tenant level Keychain Policy", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("SvcEPgPolToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("IPSLAMonitoringPolToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("RedirectHealthGroupToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("macsecKeyChainPolToEthIf", "MACsec Policy to Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("macsecParamPolToEthIf", "MACsec Policy to Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("L3IfPolToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("SvcRedirectPolToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VsanNsToInterface", "Interfaces", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VsanNsToVmmPortGroups", "Portgroups", "cobra.model.vmm.EpPD"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VsanNsToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("SpAccPortPToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AbsGraphToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AbsNodeToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CIfToNwIf", "Physical Interfaces", "cobra.model.fabric.PathEp"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CDevToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ALIfToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("LDevIfToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("LDevVipToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("LIfCtxToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("LDevCtxToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("NodeInstToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ATgToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVmmOrchsProvPlan", "Provider Plans", "cobra.model.vmm.OrchsProvPlan"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CtrctIfToEPgCons", "Contract Interface EPG Consumer", "cobra.model.fv.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CtrctIfToEPgConsNwIf", "Contract Interface EPG Consumer Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CPIfAnyToConsIf", "Any Consumer Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ABrCPToAnyProv", "Any To Provider", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ABrCPToAnyCons", "Any To Consumer", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("LDevIfToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("LDevVipToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ALDevIfToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AbsGraphToCompVNic", "Virtual Nics", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AbsNodeToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CIfToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ALIfToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("LIfCtxToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("LDevCtxToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("NodeInstToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("LDevCtxToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EqptPortToEPg", "EPG", "cobra.model.fv.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EqptSlotToEPg", "EPG", "cobra.model.fv.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FabricPathEPToEPg", "EPG", "cobra.model.fv.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FiltToTSubjEPg", "Taboo Subject EPG", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("McastAddrToInterface", "Interfaces", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VxlanNsToInterface", "Interfaces", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VlanNsToInterface", "Interfaces", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FiltToCtrctTermEPgProv", "Terminal EPG Provider", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FiltToCtrctTermEPgCons", "Terminal EPG Consumer", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FiltToSubjEPgProv", "Subject EPG Provider", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FiltToSubjEPgCons", "Subject EPG Consumer", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("APortPGrpToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcIpEpgPolToLocale3", "Fabric Nodes(EP)", "cobra.model.fabric.Node"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcIpEpgPolToLocale2", "Fabric Nodes(Service EPg)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcIpEpgPolToLocale1", "Fabric Nodes(EPg)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpgIpPolToLocale3", "Fabric Nodes(EP)", "cobra.model.fabric.Node"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpgIpPolToLocale2", "Fabric Nodes(Service EPg)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpgIpPolToLocale1", "Fabric Nodes(EPg)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpEpgPolToLocale3", "Fabric Nodes(EP)", "cobra.model.fabric.Node"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpEpgPolToLocale2", "Fabric Nodes(Service EPg)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpEpgPolToLocale1", "Fabric Nodes(EPg)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpgEpPolToLocale3", "Fabric Nodes(EP)", "cobra.model.fabric.Node"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpgEpPolToLocale2", "Fabric Nodes(Service EPg)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpgEpPolToLocale1", "Fabric Nodes(EPg)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpgEpgPolToLocale", "Fabric Nodes", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ADomPToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AbsGraphToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("stpIfPolToPortGroups", "Portgroups", "cobra.model.vmm.EpPD"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("stpIfPolToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("lldpIfPolToPortGroups", "Portgroups", "cobra.model.vmm.EpPD"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("lldpIfPolToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("cdpIfPolToPortGroups", "Portgroups", "cobra.model.vmm.EpPD"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("cdpIfPolToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("lacpLagPolToPortGroups", "Portgroups", "cobra.model.vmm.EpPD"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("lacpLagPolToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AttEntityPToPortGroups", "Portgroups", "cobra.model.vmm.EpPD"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AttEntityPToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("McastAddrToVmmPortGroups", "Portgroups", "cobra.model.vmm.EpPD"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("McastAddrToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VxlanNsToVmmPortGroups", "Portgroups", "cobra.model.vmm.EpPD"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VxlanNsToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AEPgToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("MgmtInstPToNode", "External Management Network EPG to Node", "cobra.model.fv.Locale"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("OoBToNode", "Out-of-band Management EPG to Node", "cobra.model.fv.Locale"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("OspfIfPolToNwIf", "OSPF Interface Policy to Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AttEntityPToPthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AccBaseGrpToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AccPortPToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ApToNwIf", "Application Profile to Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ABrCPToEPgProv", "EPG Provider", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ABrCPToEPgCons", "EPG Consumer", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("BgpCtxPolToNwIf", "BGP Timers Policy to Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("InBToNode", "Node", "cobra.model.fv.Locale"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("L3ExtOutToNwIf", "Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("L2ExtOutToNwIf", "Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EPgToNwIf", "Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VlanNsToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ControllerToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ControllerToVmmEpPD", "Portgroups", "cobra.model.vmm.EpPD"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CtxToNwIf", "Private Network to Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("BDToNwIf", "Bridge Domain to Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("L1IfPolToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HIfPolToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("L2IfPolToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("GraphInstancesinacontract", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VlanNsToVmmPortGroups", "Portgroups", "cobra.model.vmm.EpPD"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVmmEpPD", "Portgroups", "cobra.model.vmm.EpPD"))

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

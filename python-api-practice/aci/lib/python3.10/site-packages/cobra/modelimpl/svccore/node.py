# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Node(Mo):
    """
    A core node.

    """

    meta = ClassMeta("cobra.model.svccore.Node")

    meta.moClassName = "svccoreNode"
    meta.rnFormat = "node-%(nodeId)s-card-%(cardId)s-svc-%(svcName)s-ts-%(createTime)s"
    meta.category = MoCategory.REGULAR
    meta.label = "History of metadata for a core generated at a Fabric Node"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = True

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.svccore.CoreState")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.svccore.CoreState", "expstate"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))

    meta.parentClasses.add("cobra.model.dbg.Cores")

    meta.superClasses.add("cobra.model.svccore.ACore")

    meta.rnPrefixes = [
        ('node-', True),
        ('-card-', True),
        ('-svc-', True),
        ('-ts-', True),
    ]

    prop = PropMeta("str", "ack", "ack", 4756, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("ack", prop)

    prop = PropMeta("str", "annotation", "annotation", 37816, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "cardId", "cardId", 4758, PropCategory.REGULAR)
    prop.label = "Module ID where the Core File was Created"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 255)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("cardId", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "corefileUri", "corefileUri", 4741, PropCategory.REGULAR)
    prop.label = "Original location of Core File"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("corefileUri", prop)

    prop = PropMeta("str", "createTime", "createTime", 7225, PropCategory.REGULAR)
    prop.label = "Core Creation Time from where the Core was Created"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("createTime", prop)

    prop = PropMeta("str", "deathRsn", "deathRsn", 15494, PropCategory.REGULAR)
    prop.label = "Death Reason of the process"
    prop.isOper = True
    prop._addConstant("Default", "check-return-code", 0)
    prop._addConstant("MemoryOverrun", "cgroup-memory-violation", 1)
    meta.props.add("deathRsn", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "executableName", "executableName", 4752, PropCategory.REGULAR)
    prop.label = "Name of the Executable Binary Fine"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("executableName", prop)

    prop = PropMeta("str", "exitCode", "exitCode", 4744, PropCategory.REGULAR)
    prop.label = "Exit Code of the Process"
    prop.isOper = True
    prop._addConstant("placeHolderTBD", "describe-the-const", 0)
    meta.props.add("exitCode", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 39955, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "fileSize", "fileSize", 4736, PropCategory.REGULAR)
    prop.label = "Core File Size"
    prop.isOper = True
    prop.range = [(1, 100000)]
    meta.props.add("fileSize", prop)

    prop = PropMeta("str", "lastHbSeconds", "lastHbSeconds", 15495, PropCategory.REGULAR)
    prop.label = "Seconds since the last heartbeat receieved from                                   the process"
    prop.isOper = True
    meta.props.add("lastHbSeconds", prop)

    prop = PropMeta("str", "md5CkSum", "md5CkSum", 4737, PropCategory.REGULAR)
    prop.label = "MD5 Checksum of the File"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("md5CkSum", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 15557, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "nodeId", "nodeId", 4757, PropCategory.REGULAR)
    prop.label = "Node ID where the Core File was Created"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 16000)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("nodeId", prop)

    prop = PropMeta("str", "procId", "procId", 4739, PropCategory.REGULAR)
    prop.label = "Process ID of the Service that Cored"
    prop.isOper = True
    prop.range = [(10, 100)]
    meta.props.add("procId", prop)

    prop = PropMeta("str", "procStartTime", "procStartTime", 4746, PropCategory.REGULAR)
    prop.label = "Wall Clock Time when the Cored Instance of                                   the Process was Started"
    prop.isOper = True
    meta.props.add("procStartTime", prop)

    prop = PropMeta("str", "procUptimeSeconds", "procUptimeSeconds", 4747, PropCategory.REGULAR)
    prop.label = "How Long the Process was Up in Seconds before                                   it Cored"
    prop.isOper = True
    meta.props.add("procUptimeSeconds", prop)

    prop = PropMeta("str", "restartCnt", "restartCnt", 4740, PropCategory.REGULAR)
    prop.label = "Restart Count of the Service that Cored"
    prop.isOper = True
    meta.props.add("restartCnt", prop)

    prop = PropMeta("str", "rlimit", "rlimit", 4749, PropCategory.REGULAR)
    prop.label = "Rlimit of the Process in KB"
    prop.isOper = True
    meta.props.add("rlimit", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "stackMem", "stackMem", 4754, PropCategory.REGULAR)
    prop.label = "Memory in Use for Process Stack in KB"
    prop.isOper = True
    meta.props.add("stackMem", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "svcName", "svcName", 7224, PropCategory.REGULAR)
    prop.label = "Name of Service that Cored"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 512)]
    meta.props.add("svcName", prop)

    prop = PropMeta("str", "sysImgName", "sysImgName", 4750, PropCategory.REGULAR)
    prop.label = "System Image Name"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("sysImgName", prop)

    prop = PropMeta("str", "sysImgVer", "sysImgVer", 4751, PropCategory.REGULAR)
    prop.label = "System Image Version"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("sysImgVer", prop)

    prop = PropMeta("str", "virtMem", "virtMem", 4753, PropCategory.REGULAR)
    prop.label = "Total Virtual Memory Held in KB when Cored"
    prop.isOper = True
    meta.props.add("virtMem", prop)

    meta.namingProps.append(getattr(meta.props, "nodeId"))
    meta.namingProps.append(getattr(meta.props, "cardId"))
    meta.namingProps.append(getattr(meta.props, "svcName"))
    meta.namingProps.append(getattr(meta.props, "createTime"))

    def __init__(self, parentMoOrDn, nodeId, cardId, svcName, createTime, markDirty=True, **creationProps):
        namingVals = [nodeId, cardId, svcName, createTime]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

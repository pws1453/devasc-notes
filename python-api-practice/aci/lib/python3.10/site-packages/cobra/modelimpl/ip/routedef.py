# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class RouteDef(Mo):
    """
    The route definitions, which are are used for pushing subnets and static routes to PE. They also push subnets under EpPD to VMMMGR  (for configuring external networks in vCD).

    """

    meta = ClassMeta("cobra.model.ip.RouteDef")

    meta.moClassName = "ipRouteDef"
    meta.rnFormat = "rt-[%(ip)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Abstraction of Match Ip Rule"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x400401002001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.ip.RtRtDefIpAddr")
    meta.childClasses.add("cobra.model.ip.NexthopDef")
    meta.childClasses.add("cobra.model.ip.RtRouteToRouteDef")
    meta.childClasses.add("cobra.model.nd.PfxPolDef")
    meta.childClasses.add("cobra.model.ip.NexthopEpPDef")
    meta.childClasses.add("cobra.model.ip.EpAnycastDef")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.ip.EpNlbDef")

    meta.childNamesAndRnPrefix.append(("cobra.model.ip.RtRouteToRouteDef", "rtrouteToRouteDef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ip.RtRtDefIpAddr", "rtrtDefIpAddr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nd.PfxPolDef", "ndpfxpold"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ip.NexthopEpPDef", "nexthop-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ip.EpNlbDef", "nlbmac-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ip.EpAnycastDef", "mac-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ip.NexthopDef", "nh-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.fv.AEPgCont")
    meta.parentClasses.add("cobra.model.comp.EpPD")
    meta.parentClasses.add("cobra.model.l3ext.RsNodeDefL3OutAtt")
    meta.parentClasses.add("cobra.model.vns.EPgSubnetCont")
    meta.parentClasses.add("cobra.model.vmm.EpPD")
    meta.parentClasses.add("cobra.model.telemetry.Provider")
    meta.parentClasses.add("cobra.model.span.EpgSummary")
    meta.parentClasses.add("cobra.model.fv.BDHolder")
    meta.parentClasses.add("cobra.model.fv.ConnDef")
    meta.parentClasses.add("cobra.model.fv.BDDef")

    meta.superClasses.add("cobra.model.rtctrl.AMatchIpRule")
    meta.superClasses.add("cobra.model.pol.Comp")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.fabric.L3ProtoComp")
    meta.superClasses.add("cobra.model.fabric.ProtoComp")
    meta.superClasses.add("cobra.model.ip.ARouteP")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.rtctrl.AMatchRule")

    meta.rnPrefixes = [
        ('rt-', True),
    ]

    prop = PropMeta("str", "aggregate", "aggregate", 19877, PropCategory.REGULAR)
    prop.label = "Aggregated Route"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("aggregate", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 4862, PropCategory.REGULAR)
    prop.label = "Subnet Control"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "nd"
    prop._addConstant("nd", "nd-ra-prefix", 2)
    prop._addConstant("no-default-gateway", "no-default-svi-gateway", 4)
    prop._addConstant("querier", "querier-ip", 1)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "descr", "descr", 5582, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "fromPfxLen", "fromPfxLen", 56472, PropCategory.REGULAR)
    prop.label = "Start of Prefix Length"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("fromPfxLen", prop)

    prop = PropMeta("str", "ip", "ip", 6675, PropCategory.REGULAR)
    prop.label = "Match IP Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("ip", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "pcTag", "pcTag", 4861, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("any", "any", 0)
    meta.props.add("pcTag", prop)

    prop = PropMeta("str", "pref", "pref", 18037, PropCategory.REGULAR)
    prop.label = "Preference"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 255)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("pref", prop)

    prop = PropMeta("str", "preferred", "preferred", 18262, PropCategory.REGULAR)
    prop.label = "Preferred as primary subnet"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("preferred", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "rtCtrl", "rtCtrl", 23074, PropCategory.REGULAR)
    prop.label = "Route Controls"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("bfd", "bfd", 1)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("rtCtrl", prop)

    prop = PropMeta("str", "scope", "scope", 4860, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "private"
    prop._addConstant("private", "private-to-vrf", 2)
    prop._addConstant("public", "advertised-externally", 1)
    prop._addConstant("shared", "shared-between-vrfs", 4)
    meta.props.add("scope", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "toPfxLen", "toPfxLen", 56473, PropCategory.REGULAR)
    prop.label = "End of Prefix Length"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("toPfxLen", prop)

    prop = PropMeta("str", "trackListDn", "trackListDn", 49421, PropCategory.REGULAR)
    prop.label = "DN of Tracker"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("trackListDn", prop)

    prop = PropMeta("str", "type", "type", 4859, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 7
    prop.defaultValueStr = "rt-static"
    prop._addConstant("community", "community", 1)
    prop._addConstant("community-regex", "community-regex", 8)
    prop._addConstant("ip-multicast", "ip-multicast", 9)
    prop._addConstant("rt-dst", "route-destination", 2)
    prop._addConstant("rt-nh", "route-nexthop", 3)
    prop._addConstant("rt-src", "route-source", 4)
    prop._addConstant("rt-static", "static-route", 7)
    prop._addConstant("rt-tag", "route-tag", 6)
    prop._addConstant("rt-type", "route-type", 5)
    meta.props.add("type", prop)

    prop = PropMeta("str", "virtual", "virtual", 21206, PropCategory.REGULAR)
    prop.label = "Treated as virtual IP address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("virtual", prop)

    meta.namingProps.append(getattr(meta.props, "ip"))
    getattr(meta.props, "ip").needDelimiter = True

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToHcloudIgw", "Tenant to IGW", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToHcloudSecurityGroup", "Tenant to Security Group", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToVzCPIf", "Tenant to vzCPIf", "cobra.model.vz.CPIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToVzFilter", "From fvTenant to vzFilter", "cobra.model.vz.Filter"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToVnsAbsGraph", "From fvTenant to vnsAbsGraph", "cobra.model.vns.AbsGraph"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToCloudLB", "From fvTenant to cloudLB", "cobra.model.cloud.LB"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToCloudZone", "From fvTenant to cloudZone", "cobra.model.cloud.Zone"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudCtxProfile", "Tenant to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToVzBrCP", "Tenant to vzBrCP", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHcloudCsr", "Tenant to hcloudCsr", "cobra.model.hcloud.Csr"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudExtEPg", "fv:Tenant to cloud:ExtEPg", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudRegion", "From fvTenant to cloudRegion", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHcloudRegion", "Tenant to hcloudRegion", "cobra.model.hcloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToFvCtx", "fvTenant to fvCtx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHcloudCtx", "Tenant to Hcloud context", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHCloudEndPoint", "Tenant to hcloudEndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudApp", "Tenant to Application profile", "cobra.model.cloud.App"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudEPg", "Tenant to cloud EPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("LIfCtxToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVmmOrchsProvPlan", "Provider Plans", "cobra.model.vmm.OrchsProvPlan"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("SpanDestGrpToEthIf", "Fabric Nodes or Interfaces", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("LIfCtxToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcIpEpgPolToLocale3", "Fabric Nodes(EP)", "cobra.model.fabric.Node"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcIpEpgPolToLocale2", "Fabric Nodes(Service EPg)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcIpEpgPolToLocale1", "Fabric Nodes(EPg)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpgIpPolToLocale3", "Fabric Nodes(EP)", "cobra.model.fabric.Node"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpgIpPolToLocale2", "Fabric Nodes(Service EPg)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpgIpPolToLocale1", "Fabric Nodes(EPg)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpEpgPolToLocale3", "Fabric Nodes(EP)", "cobra.model.fabric.Node"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpEpgPolToLocale2", "Fabric Nodes(Service EPg)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpEpgPolToLocale1", "Fabric Nodes(EPg)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpgEpPolToLocale3", "Fabric Nodes(EP)", "cobra.model.fabric.Node"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpgEpPolToLocale2", "Fabric Nodes(Service EPg)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpgEpPolToLocale1", "Fabric Nodes(EPg)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AcEpgEpgPolToLocale", "Fabric Nodes", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ADomPToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVmmEpPD", "Portgroups", "cobra.model.vmm.EpPD"))

    def __init__(self, parentMoOrDn, ip, markDirty=True, **creationProps):
        namingVals = [ip]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class NlbVip(Mo):
    meta = ClassMeta("cobra.model.ip.NlbVip")

    meta.isAbstract = True
    meta.moClassName = "ipNlbVip"


    meta.moClassName = "ipNlbVip"
    meta.rnFormat = ""
    meta.category = MoCategory.REGULAR
    meta.label = "Config Load Balancer VIP Mode"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.concreteSubClasses.add("cobra.model.ipv4.NlbVip")
    meta.concreteSubClasses.add("cobra.model.ipv6.NlbVip")

    meta.rnPrefixes = [
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "encapPgmOperSt", "encapPgmOperSt", 45606, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 4
    prop.defaultValueStr = "down"
    prop._addConstant("down", "configuration-down", 4)
    prop._addConstant("dst-info-pgmed", "egress-dest-info-programmed", 2)
    prop._addConstant("unsupported", "feature-not-supported", 1)
    prop._addConstant("up", "operational-programming-succeeded", 8)
    meta.props.add("encapPgmOperSt", prop)

    prop = PropMeta("str", "encapPgmOperStQual", "encapPgmOperStQual", 51776, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop._addConstant("bd-proxy-unsupported", "bd-proxy-not-supported", 16)
    prop._addConstant("dst-info-not-pgmed", "egress-dst-info-not-programmed", 1)
    prop._addConstant("igmp-group-in-use", "igmp-group-in-use", 64)
    prop._addConstant("mac-used-for-anycast", "mac-is-used-as-anycast", 128)
    prop._addConstant("max-nlb-limit", "max-nlb-vip-limit-reached", 8)
    prop._addConstant("pim-unsupported", "pim-not-supported", 32)
    prop._addConstant("unspecified", "unknown-error", 2)
    prop._addConstant("unsupported", "feature-not-supported-on-this-h/w", 4)
    prop._addConstant("vip-used-for-anycast-vip", "vip-is-used-for-anycast-vip", 1024)
    prop._addConstant("vip-used-for-ep-reachability", "vip-is-used-for-ep-reachability-vip", 512)
    prop._addConstant("vip-used-for-svi-ip", "vip-is-used-for-svi-ip", 256)
    meta.props.add("encapPgmOperStQual", prop)

    prop = PropMeta("str", "epmVipOperStQual", "epmVipOperStQual", 52167, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop._addConstant("bd-proxy-unsupported", "bd-proxy-not-supported", 16)
    prop._addConstant("dst-info-not-pgmed", "egress-dst-info-not-programmed", 1)
    prop._addConstant("igmp-group-in-use", "igmp-group-in-use", 64)
    prop._addConstant("mac-used-for-anycast", "mac-is-used-as-anycast", 128)
    prop._addConstant("max-nlb-limit", "max-nlb-vip-limit-reached", 8)
    prop._addConstant("pim-unsupported", "pim-not-supported", 32)
    prop._addConstant("unspecified", "unknown-error", 2)
    prop._addConstant("unsupported", "feature-not-supported-on-this-h/w", 4)
    prop._addConstant("vip-used-for-anycast-vip", "vip-is-used-for-anycast-vip", 1024)
    prop._addConstant("vip-used-for-ep-reachability", "vip-is-used-for-ep-reachability-vip", 512)
    prop._addConstant("vip-used-for-svi-ip", "vip-is-used-for-svi-ip", 256)
    meta.props.add("epmVipOperStQual", prop)

    prop = PropMeta("str", "fabEncap", "fabEncap", 45604, PropCategory.REGULAR)
    prop.label = "Fabric Encapsulation"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("fabEncap", prop)

    prop = PropMeta("str", "fabEncapGrpIp", "fabEncapGrpIp", 49637, PropCategory.REGULAR)
    prop.label = "Multicast Group IP address corresponding to BD VNID (BD GIPo)"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("fabEncapGrpIp", prop)

    prop = PropMeta("str", "group", "group", 45603, PropCategory.REGULAR)
    prop.label = "Multicast Group IP address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("group", prop)

    prop = PropMeta("str", "mac", "mac", 45602, PropCategory.REGULAR)
    prop.label = "MAC address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("mac", prop)

    prop = PropMeta("str", "mode", "mode", 45601, PropCategory.REGULAR)
    prop.label = "NLB mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "mode-uc"
    prop._addConstant("mode-mcast--static", "nlb-in-static-multicast-mode", 2)
    prop._addConstant("mode-mcast-igmp", "nlb-in-igmp-mode", 3)
    prop._addConstant("mode-uc", "nlb-in-unicast-mode", 1)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operSt", "operSt", 45605, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 4
    prop.defaultValueStr = "down"
    prop._addConstant("down", "configuration-down", 4)
    prop._addConstant("dst-info-pgmed", "egress-dest-info-programmed", 2)
    prop._addConstant("unsupported", "feature-not-supported", 1)
    prop._addConstant("up", "operational-programming-succeeded", 8)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "pcTag", "pcTag", 51775, PropCategory.REGULAR)
    prop.label = "Policy Control Tag"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("any", "any", 0)
    meta.props.add("pcTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class EpToAny(Mo):
    """
     Ep to Any latency, On-demand, Entry 

    """

    meta = ClassMeta("cobra.model.latency.EpToAny")

    meta.moClassName = "latencyEpToAny"
    meta.rnFormat = "lEpToAny-tn-%(tenantName)s-r-%(ruleName)s-%(type)s-l-%(localNodeId)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Ep to any latency Entry Stats"
    meta.writeAccessMask = 0xc001
    meta.readAccessMask = 0x80008180000c001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.latency.Histogram")
    meta.childClasses.add("cobra.model.latency.Average")

    meta.childNamesAndRnPrefix.append(("cobra.model.latency.Histogram", "hist"))
    meta.childNamesAndRnPrefix.append(("cobra.model.latency.Average", "avg"))

    meta.parentClasses.add("cobra.model.latency.OnDemandCont")
    meta.parentClasses.add("cobra.model.dbg.Profile")

    meta.superClasses.add("cobra.model.latency.OdEntry")

    meta.rnPrefixes = [
        ('lEpToAny-', False),
        ('tn-', True),
        ('-r-', True),
        ('-', True),
        ('-l-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "createTs", "createTs", 28845, PropCategory.REGULAR)
    prop.label = "Creation Timestamp in Milliseconds Since Epoch"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("createTs", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "filtEnt", "filtEnt", 28843, PropCategory.REGULAR)
    prop.label = "Filter Indicating Layer 4 Ports"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("filtEnt", prop)

    prop = PropMeta("str", "latencyCollect", "latencyCollect", 30507, PropCategory.REGULAR)
    prop.label = "Latency Collection"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "avg"
    prop._addConstant("avg", "avg", 1)
    prop._addConstant("histogram", "histogram", 2)
    meta.props.add("latencyCollect", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "localNodeId", "localNodeId", 28948, PropCategory.REGULAR)
    prop.label = "Source Fabric Node ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 16000)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("localNodeId", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "ruleId", "ruleId", 28846, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("ruleId", prop)

    prop = PropMeta("str", "ruleId2", "ruleId2", 28847, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("ruleId2", prop)

    prop = PropMeta("str", "ruleName", "ruleName", 28949, PropCategory.REGULAR)
    prop.label = "Policy Rule Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("ruleName", prop)

    prop = PropMeta("str", "seqNo", "seqNo", 28850, PropCategory.REGULAR)
    prop.label = "Sequence Number, Increamented by One after every Collection"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("seqNo", prop)

    prop = PropMeta("str", "src", "src", 28859, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("src", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tenantName", "tenantName", 28950, PropCategory.REGULAR)
    prop.label = "Tenant Name for this latency Rule"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("tenantName", prop)

    prop = PropMeta("str", "type", "type", 28947, PropCategory.REGULAR)
    prop.label = "latency Rule Type"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("anyToEp", "anytoep", 70)
    prop._addConstant("apDdEpgToEpg", "apddepgtoepg", 81)
    prop._addConstant("apEpgToEpg", "apepgtoepg", 82)
    prop._addConstant("epToAny", "eptoany", 50)
    prop._addConstant("epToEp", "eptoep", 30)
    prop._addConstant("epToEpg", "eptoepg", 40)
    prop._addConstant("epToIp", "eptoip", 31)
    prop._addConstant("epgToEp", "epgtoep", 60)
    prop._addConstant("epgToEpg", "epgtoepg", 80)
    prop._addConstant("epgToEpgDdEpToEp", "epgtoepgddeptoep", 33)
    prop._addConstant("epgToIp", "epgtoip", 61)
    prop._addConstant("expert", "expert", 10)
    prop._addConstant("fiveTuple", "fivetuple", 20)
    prop._addConstant("ipToEp", "iptoep", 32)
    prop._addConstant("ipToEpg", "iptoepg", 41)
    prop._addConstant("ipToIp", "iptoip", 36)
    prop._addConstant("tnDdEpgToEpg", "tnddepgtoepg", 83)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("type", prop)

    meta.namingProps.append(getattr(meta.props, "tenantName"))
    meta.namingProps.append(getattr(meta.props, "ruleName"))
    meta.namingProps.append(getattr(meta.props, "type"))
    meta.namingProps.append(getattr(meta.props, "localNodeId"))

    def __init__(self, parentMoOrDn, tenantName, ruleName, type, localNodeId, markDirty=True, **creationProps):
        namingVals = [tenantName, ruleName, type, localNodeId]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

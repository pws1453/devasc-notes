# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class AData(Mo):
    meta = ClassMeta("cobra.model.latency.AData")

    meta.isAbstract = True
    meta.moClassName = "latencyAData"


    meta.moClassName = "latencyAData"
    meta.rnFormat = ""
    meta.category = MoCategory.REGULAR
    meta.label = "Abstract class containing latency data"
    meta.writeAccessMask = 0x800081800000001
    meta.readAccessMask = 0x800081800000001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.concreteSubClasses.add("cobra.model.latency.Path")

    meta.rnPrefixes = [
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dstNodeId", "dstNodeId", 28878, PropCategory.REGULAR)
    prop.label = "Destination Fabric Node ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 16000)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("dstNodeId", prop)

    prop = PropMeta("str", "pathDn", "pathDn", 28874, PropCategory.REGULAR)
    prop.label = "DN of the path"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("pathDn", prop)

    prop = PropMeta("str", "pathType", "pathType", 28875, PropCategory.REGULAR)
    prop.label = "Type of path"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "nodeToNode"
    prop._addConstant("nodeToNode", "nodetonode", 0)
    prop._addConstant("nodeToVpc", "nodetovpc", 3)
    prop._addConstant("vpcToNode", "vpctonode", 2)
    prop._addConstant("vpcToVpc", "vpctovpc", 1)
    meta.props.add("pathType", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "srcNodeId", "srcNodeId", 28876, PropCategory.REGULAR)
    prop.label = "Source Fabric Node ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 16000)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("srcNodeId", prop)

    prop = PropMeta("str", "srcNodeId2", "srcNodeId2", 28877, PropCategory.REGULAR)
    prop.label = "Source VPC peer Fabric Node ID; valid only if pathType is vpcToVpc or vpcToNode"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 16000)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("srcNodeId2", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class PtpMode(Mo):
    """
    Precision Time Protocol enable/disable flag

    """

    meta = ClassMeta("cobra.model.latency.PtpMode")

    meta.moClassName = "latencyPtpMode"
    meta.rnFormat = "ptpmode"
    meta.category = MoCategory.REGULAR
    meta.label = "Precision Time Protocol Enabled/Disabled"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.latency.RtLatencyPtpMode")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.latency.RtRelPtpMode")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.latency.RtLatencyPtpMode", "rtptpLatencyPtpMode-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.latency.RtRelPtpMode", "rtdbgRelPtpMode-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))

    meta.parentClasses.add("cobra.model.fabric.Inst")

    meta.rnPrefixes = [
        ('ptpmode', False),
    ]

    prop = PropMeta("str", "annotation", "annotation", 38622, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "canPtpBeDisabled", "canPtpBeDisabled", 36347, PropCategory.REGULAR)
    prop.label = "Flag to tell if ptp can be enabled or not"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = True
    prop.defaultValueStr = "yes"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("canPtpBeDisabled", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 40761, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "fabAnnounceIntvl", "fabAnnounceIntvl", 56283, PropCategory.REGULAR)
    prop.label = "Announce Interval"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(-3, 4)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("fabAnnounceIntvl", prop)

    prop = PropMeta("str", "fabAnnounceTimeout", "fabAnnounceTimeout", 56286, PropCategory.REGULAR)
    prop.label = "Announce Timeout"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(2, 10)]
    prop.defaultValue = 3
    prop.defaultValueStr = "3"
    meta.props.add("fabAnnounceTimeout", prop)

    prop = PropMeta("str", "fabDelayIntvl", "fabDelayIntvl", 56284, PropCategory.REGULAR)
    prop.label = "Delay Request Interval"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(-4, 6)]
    prop.defaultValue = -2
    prop.defaultValueStr = "-2"
    meta.props.add("fabDelayIntvl", prop)

    prop = PropMeta("str", "fabProfileTemplate", "fabProfileTemplate", 56282, PropCategory.REGULAR)
    prop.label = "PTP profile Template"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "aes67"
    prop._addConstant("aes67", "aes67-2015", 2)
    prop._addConstant("default", "default", 1)
    prop._addConstant("smpte", "smpte-2059-2", 3)
    meta.props.add("fabProfileTemplate", prop)

    prop = PropMeta("str", "fabSyncIntvl", "fabSyncIntvl", 56285, PropCategory.REGULAR)
    prop.label = "Sync Interval"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(-4, 1)]
    prop.defaultValue = -3
    prop.defaultValueStr = "-3"
    meta.props.add("fabSyncIntvl", prop)

    prop = PropMeta("str", "globalDomain", "globalDomain", 56111, PropCategory.REGULAR)
    prop.label = "PTP global Domain"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("globalDomain", prop)

    prop = PropMeta("str", "isCountValid", "isCountValid", 33252, PropCategory.REGULAR)
    prop.label = "Flag to tell if the latency policy count is valid or not"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("isCountValid", prop)

    prop = PropMeta("str", "latencyPolCount", "latencyPolCount", 33251, PropCategory.REGULAR)
    prop.label = "Latency Policy Count"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("latencyPolCount", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 36349, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "prio1", "prio1", 56109, PropCategory.REGULAR)
    prop.label = "PTP global priority 1 value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 255)]
    prop.defaultValue = 255
    prop.defaultValueStr = "255"
    meta.props.add("prio1", prop)

    prop = PropMeta("str", "prio2", "prio2", 56110, PropCategory.REGULAR)
    prop.label = "PTP global  priority 2 value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 255)]
    prop.defaultValue = 255
    prop.defaultValueStr = "255"
    meta.props.add("prio2", prop)

    prop = PropMeta("str", "raiseFault", "raiseFault", 36348, PropCategory.REGULAR)
    prop.label = "Flag to tell if a fault has been raisen or not, usually if ptp is being disabled with active latency policies"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("raiseFault", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "state", "state", 28839, PropCategory.REGULAR)
    prop.label = "Precision Time Protocol State(enabled/disabled)"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("state", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "systemResolution", "systemResolution", 42737, PropCategory.REGULAR)
    prop.label = "System resolution factor for max Latency"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("systemResolution", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class ReceiveFecCounters15min(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = StatsClassMeta("cobra.model.fc.ReceiveFecCounters15min", "Fec counters")

    counter = CounterMeta("uncorrected", CounterCategory.COUNTER, "frames", "Uncorrected counters")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "uncorrectedLast"
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "uncorrectedCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "uncorrectedPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "uncorrectedMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "uncorrectedMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "uncorrectedAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "uncorrectedSpct"
    counter._propRefs[PropCategory.IMPLICIT_BASELINE] = "uncorrectedBase"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "uncorrectedThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "uncorrectedTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "uncorrectedTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "uncorrectedRate"
    meta._counters.append(counter)

    counter = CounterMeta("corrected", CounterCategory.COUNTER, "frames", "Corrected counters")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "correctedLast"
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "correctedCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "correctedPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "correctedMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "correctedMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "correctedAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "correctedSpct"
    counter._propRefs[PropCategory.IMPLICIT_BASELINE] = "correctedBase"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "correctedThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "correctedTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "correctedTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "correctedRate"
    meta._counters.append(counter)

    meta.moClassName = "fcReceiveFecCounters15min"
    meta.rnFormat = "CDfcReceiveFecCounters15min"
    meta.category = MoCategory.STATS_CURRENT
    meta.label = "current Fec counters stats in 15 minute"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.parentClasses.add("cobra.model.l1.FcPhysIf")
    meta.parentClasses.add("cobra.model.pc.FcAggrIf")

    meta.superClasses.add("cobra.model.fc.ReceiveFecCounters")
    meta.superClasses.add("cobra.model.stats.Item")
    meta.superClasses.add("cobra.model.stats.Curr")

    meta.rnPrefixes = [
        ('CDfcReceiveFecCounters15min', False),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cnt", "cnt", 16212, PropCategory.REGULAR)
    prop.label = "Number of Collections During this Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("cnt", prop)

    prop = PropMeta("str", "correctedAvg", "correctedAvg", 45172, PropCategory.IMPLICIT_AVG)
    prop.label = "Corrected counters average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("correctedAvg", prop)

    prop = PropMeta("str", "correctedBase", "correctedBase", 45167, PropCategory.IMPLICIT_BASELINE)
    prop.label = "Corrected counters baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("correctedBase", prop)

    prop = PropMeta("str", "correctedCum", "correctedCum", 45168, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "Corrected counters cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("correctedCum", prop)

    prop = PropMeta("str", "correctedLast", "correctedLast", 45166, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "Corrected counters current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("correctedLast", prop)

    prop = PropMeta("str", "correctedMax", "correctedMax", 45171, PropCategory.IMPLICIT_MAX)
    prop.label = "Corrected counters maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("correctedMax", prop)

    prop = PropMeta("str", "correctedMin", "correctedMin", 45170, PropCategory.IMPLICIT_MIN)
    prop.label = "Corrected counters minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("correctedMin", prop)

    prop = PropMeta("str", "correctedPer", "correctedPer", 45169, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "Corrected counters periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("correctedPer", prop)

    prop = PropMeta("str", "correctedRate", "correctedRate", 45177, PropCategory.IMPLICIT_RATE)
    prop.label = "Corrected counters rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("correctedRate", prop)

    prop = PropMeta("str", "correctedSpct", "correctedSpct", 45173, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "Corrected counters suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("correctedSpct", prop)

    prop = PropMeta("str", "correctedThr", "correctedThr", 45174, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "Corrected counters thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("correctedThr", prop)

    prop = PropMeta("str", "correctedTr", "correctedTr", 45176, PropCategory.IMPLICIT_TREND)
    prop.label = "Corrected counters trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("correctedTr", prop)

    prop = PropMeta("str", "correctedTrBase", "correctedTrBase", 45175, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "Corrected counters trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("correctedTrBase", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lastCollOffset", "lastCollOffset", 111, PropCategory.REGULAR)
    prop.label = "Collection Length"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("lastCollOffset", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "repIntvEnd", "repIntvEnd", 110, PropCategory.REGULAR)
    prop.label = "Reporting End Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvEnd", prop)

    prop = PropMeta("str", "repIntvStart", "repIntvStart", 109, PropCategory.REGULAR)
    prop.label = "Reporting Start Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvStart", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uncorrectedAvg", "uncorrectedAvg", 45193, PropCategory.IMPLICIT_AVG)
    prop.label = "Uncorrected counters average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("uncorrectedAvg", prop)

    prop = PropMeta("str", "uncorrectedBase", "uncorrectedBase", 45188, PropCategory.IMPLICIT_BASELINE)
    prop.label = "Uncorrected counters baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("uncorrectedBase", prop)

    prop = PropMeta("str", "uncorrectedCum", "uncorrectedCum", 45189, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "Uncorrected counters cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("uncorrectedCum", prop)

    prop = PropMeta("str", "uncorrectedLast", "uncorrectedLast", 45187, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "Uncorrected counters current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("uncorrectedLast", prop)

    prop = PropMeta("str", "uncorrectedMax", "uncorrectedMax", 45192, PropCategory.IMPLICIT_MAX)
    prop.label = "Uncorrected counters maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("uncorrectedMax", prop)

    prop = PropMeta("str", "uncorrectedMin", "uncorrectedMin", 45191, PropCategory.IMPLICIT_MIN)
    prop.label = "Uncorrected counters minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("uncorrectedMin", prop)

    prop = PropMeta("str", "uncorrectedPer", "uncorrectedPer", 45190, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "Uncorrected counters periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("uncorrectedPer", prop)

    prop = PropMeta("str", "uncorrectedRate", "uncorrectedRate", 45198, PropCategory.IMPLICIT_RATE)
    prop.label = "Uncorrected counters rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("uncorrectedRate", prop)

    prop = PropMeta("str", "uncorrectedSpct", "uncorrectedSpct", 45194, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "Uncorrected counters suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("uncorrectedSpct", prop)

    prop = PropMeta("str", "uncorrectedThr", "uncorrectedThr", 45195, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "Uncorrected counters thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("uncorrectedThr", prop)

    prop = PropMeta("str", "uncorrectedTr", "uncorrectedTr", 45197, PropCategory.IMPLICIT_TREND)
    prop.label = "Uncorrected counters trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("uncorrectedTr", prop)

    prop = PropMeta("str", "uncorrectedTrBase", "uncorrectedTrBase", 45196, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "Uncorrected counters trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("uncorrectedTrBase", prop)

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("l1FcIfToEPg", "EPG", "cobra.model.fv.EPg"))

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

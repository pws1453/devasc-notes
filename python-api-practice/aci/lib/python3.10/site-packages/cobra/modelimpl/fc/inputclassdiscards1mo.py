# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class InputClassDiscards1mo(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = StatsClassMeta("cobra.model.fc.InputClassDiscards1mo", "input class discards")

    counter = CounterMeta("cfDiscards", CounterCategory.COUNTER, "frames", "input classf discards")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "cfDiscardsLast"
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "cfDiscardsCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "cfDiscardsPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "cfDiscardsMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "cfDiscardsMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "cfDiscardsAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "cfDiscardsSpct"
    counter._propRefs[PropCategory.IMPLICIT_BASELINE] = "cfDiscardsBase"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "cfDiscardsThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "cfDiscardsTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "cfDiscardsTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "cfDiscardsRate"
    meta._counters.append(counter)

    counter = CounterMeta("c3Discards", CounterCategory.COUNTER, "frames", "input class3 discards")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "c3DiscardsLast"
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "c3DiscardsCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "c3DiscardsPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "c3DiscardsMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "c3DiscardsMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "c3DiscardsAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "c3DiscardsSpct"
    counter._propRefs[PropCategory.IMPLICIT_BASELINE] = "c3DiscardsBase"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "c3DiscardsThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "c3DiscardsTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "c3DiscardsTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "c3DiscardsRate"
    meta._counters.append(counter)

    counter = CounterMeta("c2Discards", CounterCategory.COUNTER, "frames", "input class2 discards")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "c2DiscardsLast"
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "c2DiscardsCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "c2DiscardsPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "c2DiscardsMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "c2DiscardsMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "c2DiscardsAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "c2DiscardsSpct"
    counter._propRefs[PropCategory.IMPLICIT_BASELINE] = "c2DiscardsBase"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "c2DiscardsThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "c2DiscardsTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "c2DiscardsTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "c2DiscardsRate"
    meta._counters.append(counter)

    meta.moClassName = "fcInputClassDiscards1mo"
    meta.rnFormat = "CDfcInputClassDiscards1mo"
    meta.category = MoCategory.STATS_CURRENT
    meta.label = "current input class discards stats in 1 month"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.parentClasses.add("cobra.model.l1.FcPhysIf")
    meta.parentClasses.add("cobra.model.pc.FcAggrIf")

    meta.superClasses.add("cobra.model.stats.Item")
    meta.superClasses.add("cobra.model.stats.Curr")
    meta.superClasses.add("cobra.model.fc.InputClassDiscards")

    meta.rnPrefixes = [
        ('CDfcInputClassDiscards1mo', False),
    ]

    prop = PropMeta("str", "c2DiscardsAvg", "c2DiscardsAvg", 42985, PropCategory.IMPLICIT_AVG)
    prop.label = "input class2 discards average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c2DiscardsAvg", prop)

    prop = PropMeta("str", "c2DiscardsBase", "c2DiscardsBase", 42980, PropCategory.IMPLICIT_BASELINE)
    prop.label = "input class2 discards baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c2DiscardsBase", prop)

    prop = PropMeta("str", "c2DiscardsCum", "c2DiscardsCum", 42981, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "input class2 discards cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c2DiscardsCum", prop)

    prop = PropMeta("str", "c2DiscardsLast", "c2DiscardsLast", 42979, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "input class2 discards current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c2DiscardsLast", prop)

    prop = PropMeta("str", "c2DiscardsMax", "c2DiscardsMax", 42984, PropCategory.IMPLICIT_MAX)
    prop.label = "input class2 discards maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c2DiscardsMax", prop)

    prop = PropMeta("str", "c2DiscardsMin", "c2DiscardsMin", 42983, PropCategory.IMPLICIT_MIN)
    prop.label = "input class2 discards minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c2DiscardsMin", prop)

    prop = PropMeta("str", "c2DiscardsPer", "c2DiscardsPer", 42982, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "input class2 discards periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c2DiscardsPer", prop)

    prop = PropMeta("str", "c2DiscardsRate", "c2DiscardsRate", 42990, PropCategory.IMPLICIT_RATE)
    prop.label = "input class2 discards rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c2DiscardsRate", prop)

    prop = PropMeta("str", "c2DiscardsSpct", "c2DiscardsSpct", 42986, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "input class2 discards suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c2DiscardsSpct", prop)

    prop = PropMeta("str", "c2DiscardsThr", "c2DiscardsThr", 42987, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "input class2 discards thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("c2DiscardsThr", prop)

    prop = PropMeta("str", "c2DiscardsTr", "c2DiscardsTr", 42989, PropCategory.IMPLICIT_TREND)
    prop.label = "input class2 discards trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c2DiscardsTr", prop)

    prop = PropMeta("str", "c2DiscardsTrBase", "c2DiscardsTrBase", 42988, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "input class2 discards trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c2DiscardsTrBase", prop)

    prop = PropMeta("str", "c3DiscardsAvg", "c3DiscardsAvg", 43006, PropCategory.IMPLICIT_AVG)
    prop.label = "input class3 discards average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c3DiscardsAvg", prop)

    prop = PropMeta("str", "c3DiscardsBase", "c3DiscardsBase", 43001, PropCategory.IMPLICIT_BASELINE)
    prop.label = "input class3 discards baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c3DiscardsBase", prop)

    prop = PropMeta("str", "c3DiscardsCum", "c3DiscardsCum", 43002, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "input class3 discards cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c3DiscardsCum", prop)

    prop = PropMeta("str", "c3DiscardsLast", "c3DiscardsLast", 43000, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "input class3 discards current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c3DiscardsLast", prop)

    prop = PropMeta("str", "c3DiscardsMax", "c3DiscardsMax", 43005, PropCategory.IMPLICIT_MAX)
    prop.label = "input class3 discards maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c3DiscardsMax", prop)

    prop = PropMeta("str", "c3DiscardsMin", "c3DiscardsMin", 43004, PropCategory.IMPLICIT_MIN)
    prop.label = "input class3 discards minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c3DiscardsMin", prop)

    prop = PropMeta("str", "c3DiscardsPer", "c3DiscardsPer", 43003, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "input class3 discards periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c3DiscardsPer", prop)

    prop = PropMeta("str", "c3DiscardsRate", "c3DiscardsRate", 43011, PropCategory.IMPLICIT_RATE)
    prop.label = "input class3 discards rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c3DiscardsRate", prop)

    prop = PropMeta("str", "c3DiscardsSpct", "c3DiscardsSpct", 43007, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "input class3 discards suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c3DiscardsSpct", prop)

    prop = PropMeta("str", "c3DiscardsThr", "c3DiscardsThr", 43008, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "input class3 discards thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("c3DiscardsThr", prop)

    prop = PropMeta("str", "c3DiscardsTr", "c3DiscardsTr", 43010, PropCategory.IMPLICIT_TREND)
    prop.label = "input class3 discards trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c3DiscardsTr", prop)

    prop = PropMeta("str", "c3DiscardsTrBase", "c3DiscardsTrBase", 43009, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "input class3 discards trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("c3DiscardsTrBase", prop)

    prop = PropMeta("str", "cfDiscardsAvg", "cfDiscardsAvg", 43027, PropCategory.IMPLICIT_AVG)
    prop.label = "input classf discards average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cfDiscardsAvg", prop)

    prop = PropMeta("str", "cfDiscardsBase", "cfDiscardsBase", 43022, PropCategory.IMPLICIT_BASELINE)
    prop.label = "input classf discards baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cfDiscardsBase", prop)

    prop = PropMeta("str", "cfDiscardsCum", "cfDiscardsCum", 43023, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "input classf discards cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cfDiscardsCum", prop)

    prop = PropMeta("str", "cfDiscardsLast", "cfDiscardsLast", 43021, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "input classf discards current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cfDiscardsLast", prop)

    prop = PropMeta("str", "cfDiscardsMax", "cfDiscardsMax", 43026, PropCategory.IMPLICIT_MAX)
    prop.label = "input classf discards maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cfDiscardsMax", prop)

    prop = PropMeta("str", "cfDiscardsMin", "cfDiscardsMin", 43025, PropCategory.IMPLICIT_MIN)
    prop.label = "input classf discards minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cfDiscardsMin", prop)

    prop = PropMeta("str", "cfDiscardsPer", "cfDiscardsPer", 43024, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "input classf discards periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cfDiscardsPer", prop)

    prop = PropMeta("str", "cfDiscardsRate", "cfDiscardsRate", 43032, PropCategory.IMPLICIT_RATE)
    prop.label = "input classf discards rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cfDiscardsRate", prop)

    prop = PropMeta("str", "cfDiscardsSpct", "cfDiscardsSpct", 43028, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "input classf discards suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cfDiscardsSpct", prop)

    prop = PropMeta("str", "cfDiscardsThr", "cfDiscardsThr", 43029, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "input classf discards thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("cfDiscardsThr", prop)

    prop = PropMeta("str", "cfDiscardsTr", "cfDiscardsTr", 43031, PropCategory.IMPLICIT_TREND)
    prop.label = "input classf discards trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cfDiscardsTr", prop)

    prop = PropMeta("str", "cfDiscardsTrBase", "cfDiscardsTrBase", 43030, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "input classf discards trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cfDiscardsTrBase", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cnt", "cnt", 16212, PropCategory.REGULAR)
    prop.label = "Number of Collections During this Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("cnt", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lastCollOffset", "lastCollOffset", 111, PropCategory.REGULAR)
    prop.label = "Collection Length"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("lastCollOffset", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "repIntvEnd", "repIntvEnd", 110, PropCategory.REGULAR)
    prop.label = "Reporting End Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvEnd", prop)

    prop = PropMeta("str", "repIntvStart", "repIntvStart", 109, PropCategory.REGULAR)
    prop.label = "Reporting Start Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvStart", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("l1FcIfToEPg", "EPG", "cobra.model.fv.EPg"))

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

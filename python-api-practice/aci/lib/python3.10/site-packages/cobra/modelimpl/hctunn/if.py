# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class If(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.hctunn.If")

    meta.moClassName = "hctunnIf"
    meta.rnFormat = "tunn-%(id)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Tunnel Interface"
    meta.writeAccessMask = 0x400401002001
    meta.readAccessMask = 0x8408421042001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.hctunn.RsIpsecProfile")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.hctunn.RtBgpPeerTohctunnIf")
    meta.childClasses.add("cobra.model.hctunn.RsIkev2Profile")
    meta.childClasses.add("cobra.model.hctunn.RsSourceIf")
    meta.childClasses.add("cobra.model.hctunn.TunnelIfStats")
    meta.childClasses.add("cobra.model.hctunn.RsIsakmpProfile")
    meta.childClasses.add("cobra.model.hctunn.IfOper")
    meta.childClasses.add("cobra.model.hctunn.RtTunnIf")

    meta.childNamesAndRnPrefix.append(("cobra.model.hctunn.RtBgpPeerTohctunnIf", "rtbgpPeerTohctunnIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hctunn.RsIsakmpProfile", "rsisakmpProfile"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hctunn.RsIpsecProfile", "rsipsecProfile"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hctunn.RsIkev2Profile", "rsikev2Profile"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hctunn.TunnelIfStats", "tunnelifstats-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hctunn.RsSourceIf", "rssourceIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hctunn.RtTunnIf", "rttunnIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hctunn.IfOper", "oper"))

    meta.parentClasses.add("cobra.model.hcloud.Csr")

    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.rnPrefixes = [
        ('tunn-', True),
    ]

    prop = PropMeta("str", "addr", "addr", 50451, PropCategory.REGULAR)
    prop.label = "Tunnel Inner IP"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("addr", prop)

    prop = PropMeta("str", "adminSt", "adminSt", 50457, PropCategory.REGULAR)
    prop.label = "Administrative State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "up"
    prop._addConstant("down", "down", 2)
    prop._addConstant("up", "up", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dest", "dest", 50450, PropCategory.REGULAR)
    prop.label = "Tunnel Destination IP"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("dest", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "id", "id", 50448, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "keepAlvIntvl", "keepAlvIntvl", 50456, PropCategory.REGULAR)
    prop.label = "Keep Alive Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 32767)]
    prop.defaultValue = 10
    prop.defaultValueStr = "10"
    meta.props.add("keepAlvIntvl", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "logicalDn", "logicalDn", 52209, PropCategory.REGULAR)
    prop.label = "Logical Model Mo Dn"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("logicalDn", prop)

    prop = PropMeta("str", "mac", "mac", 50458, PropCategory.REGULAR)
    prop.label = "Destination MAC"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("mac", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mss", "mss", 50455, PropCategory.REGULAR)
    prop.label = "Maximum Segment Size"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(500, 1460)]
    prop.defaultValue = 1400
    prop.defaultValueStr = "1400"
    meta.props.add("mss", prop)

    prop = PropMeta("str", "mtu", "mtu", 50454, PropCategory.REGULAR)
    prop.label = "MTU"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 9000)]
    prop.defaultValue = 1400
    prop.defaultValueStr = "1400"
    meta.props.add("mtu", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "src", "src", 50449, PropCategory.REGULAR)
    prop.label = "Tunnel Source IP"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("src", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tType", "tType", 50452, PropCategory.REGULAR)
    prop.label = "Tunnel Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 4
    prop.defaultValueStr = "gre"
    prop._addConstant("gre", "generic-route-encapsulation-protocol", 4)
    prop._addConstant("ipsec", "ipsec", 3)
    prop._addConstant("ivxlan", "ivxlan", 1)
    prop._addConstant("unknown", "unknown", 0)
    prop._addConstant("vxlan", "vxlan", 2)
    meta.props.add("tType", prop)

    prop = PropMeta("str", "targetRegion", "targetRegion", 52859, PropCategory.REGULAR)
    prop.label = "Tunnel's Target Region"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("targetRegion", prop)

    prop = PropMeta("str", "tunnelDestinationType", "tunnelDestinationType", 55536, PropCategory.REGULAR)
    prop.label = "Tunnel's Destination Type: On-prem/Cloud-to-cloud/Internal"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "internal"
    prop._addConstant("cloud", "cloud-to-cloud", 2)
    prop._addConstant("internal", "internal", 0)
    prop._addConstant("on-prem", "on-prem", 1)
    meta.props.add("tunnelDestinationType", prop)

    prop = PropMeta("str", "vrfName", "vrfName", 50453, PropCategory.REGULAR)
    prop.label = "VRF"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("vrfName", prop)

    meta.namingProps.append(getattr(meta.props, "id"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcbgpPeer", "From hcloudCsr to hcbgpPeer", "cobra.model.hcbgp.Peer"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcl3LoopbackRoutedIf", "From hcloudCsr to hcl3LoopbackRoutedIf", "cobra.model.hcl3.LoopbackRoutedIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcospfRsTunnIf", "From hcloudCsr to hcospfRsTunnIf", "cobra.model.hcospf.RsTunnIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHctunnIf", "From hcloudCsr to hctunnIf", "cobra.model.hctunn.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcloudNetworkInterface", "From hcloudCsr to hcloudNetworkInterface", "cobra.model.hcloud.NetworkInterface"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcloudEndPointOper", "From hcloudCsr to hcloudEndPointOper", "cobra.model.hcloud.EndPointOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcl1PhysicalIf", "From hcloudCsr to hcl1PhysicalIf", "cobra.model.hcl1.PhysicalIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToCloudCtxProfile", "From hcloudCsr to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcl3Vrf", "From hcloudCsr to hcl3Vrf", "cobra.model.hcl3.Vrf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcloudInstanceOper", "From hcloudCsr to hcloudInstanceOper", "cobra.model.hcloud.InstanceOper"))

    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

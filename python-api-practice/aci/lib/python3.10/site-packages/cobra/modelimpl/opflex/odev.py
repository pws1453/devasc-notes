# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class ODev(Mo):
    """
    This is generated and used only by internal processes.

    """

    meta = ClassMeta("cobra.model.opflex.ODev")

    meta.moClassName = "opflexODev"
    meta.rnFormat = "odev-%(devId)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Openflex Device"
    meta.writeAccessMask = 0x25
    meta.readAccessMask = 0x25
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.opflexp.VmmODevFaultInfo")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fv.VNode")
    meta.childClasses.add("cobra.model.opflex.ODevFaultInfo")
    meta.childClasses.add("cobra.model.opflex.RsODevToIDEp")
    meta.childClasses.add("cobra.model.opflex.RtTsODev")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.opflex.OPNic")
    meta.childClasses.add("cobra.model.opflex.ODevCliCmdCont")
    meta.childClasses.add("cobra.model.opflex.RsODevToTunnelIDEp")
    meta.childClasses.add("cobra.model.opflex.ODevCap")
    meta.childClasses.add("cobra.model.opflex.OVm")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.RsODevToTunnelIDEp", "rsoDevToTunnelIDEp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.RtTsODev", "rtdbgexpTsODev-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflexp.VmmODevFaultInfo", "vmmodevfault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.RsODevToIDEp", "rsoDevToIDEp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.ODevFaultInfo", "odevfault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.ODevCliCmdCont", "clicmdcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.ODevCap", "odevcap"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.VNode", "vnode-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.OPNic", "opnic-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.OVm", "ovm-"))

    meta.parentClasses.add("cobra.model.tunnel.If")
    meta.parentClasses.add("cobra.model.l2.BrIf")
    meta.parentClasses.add("cobra.model.l2.ExtIf")
    meta.parentClasses.add("cobra.model.l2.InbandIf")

    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.naming.NamedIdentifiedObject")

    meta.rnPrefixes = [
        ('odev-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 37460, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "compHvDn", "compHvDn", 21518, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("compHvDn", prop)

    prop = PropMeta("str", "ctrlrName", "ctrlrName", 16465, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ctrlrName", prop)

    prop = PropMeta("str", "devId", "devId", 938, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("devId", prop)

    prop = PropMeta("str", "devOperIssues", "devOperIssues", 950, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("hb-miss", "incompatible-device-software-version", 3)
    prop._addConstant("incompatible-sw", "incompatible-device-software-version", 2)
    prop._addConstant("invalid-dvs", "inventory-not-available-on-the-node-at-this-time", 1)
    prop._addConstant("missing-interface", "missing-valid-interface-for-the-domain-associated-with-this-device", 8)
    prop._addConstant("none", "none", 0)
    meta.props.add("devOperIssues", prop)

    prop = PropMeta("str", "devType", "devType", 939, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "n1kv"
    prop._addConstant("ave", "ave", 5)
    prop._addConstant("ave-ng", "ave-ng", 8)
    prop._addConstant("cf", "cf", 6)
    prop._addConstant("hyperv", "hyperv", 2)
    prop._addConstant("k8s", "k8s", 4)
    prop._addConstant("n1kv", "n1kv", 1)
    prop._addConstant("openshift", "openshift", 7)
    prop._addConstant("ovs", "ovs", 3)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("devType", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "domName", "domName", 16464, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("domName", prop)

    prop = PropMeta("str", "encap", "encap", 943, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("encap", prop)

    prop = PropMeta("str", "epStatsBulkAckStatus", "epStatsBulkAckStatus", 26208, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "processed"
    prop._addConstant("failed", "failed", 1)
    prop._addConstant("processed", "processed", 2)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("epStatsBulkAckStatus", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 39599, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "fabricPathDn", "fabricPathDn", 33557, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("fabricPathDn", prop)

    prop = PropMeta("str", "features", "features", 20339, PropCategory.REGULAR)
    prop.label = "Least common features"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("features", prop)

    prop = PropMeta("str", "handle", "handle", 25898, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("handle", prop)

    prop = PropMeta("str", "hbPeriod", "hbPeriod", 20440, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("hbPeriod", prop)

    prop = PropMeta("str", "hbStatus", "hbStatus", 948, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "valid-dvs"
    prop._addConstant("invalid-dvs", "invalid-dvs", 1)
    prop._addConstant("unknown", "unknown", 0)
    prop._addConstant("valid-dvs", "valid-dvs", 2)
    meta.props.add("hbStatus", prop)

    prop = PropMeta("str", "hostName", "hostName", 945, PropCategory.REGULAR)
    prop.label = "Fqdn of the Host"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("hostName", prop)

    prop = PropMeta("str", "id", "id", 5586, PropCategory.REGULAR)
    prop.label = "Id"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "ip", "ip", 941, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("ip", prop)

    prop = PropMeta("str", "ipAddr", "ipAddr", 946, PropCategory.REGULAR)
    prop.label = "IPAddress of the Host"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ipAddr", prop)

    prop = PropMeta("str", "isSecondary", "isSecondary", 18629, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("isSecondary", prop)

    prop = PropMeta("str", "lNodeDn", "lNodeDn", 940, PropCategory.REGULAR)
    prop.label = "LNode Dn"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("lNodeDn", prop)

    prop = PropMeta("str", "lastHandshakeTime", "lastHandshakeTime", 18193, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("lastHandshakeTime", prop)

    prop = PropMeta("str", "lastNumHB", "lastNumHB", 15358, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("lastNumHB", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "mac", "mac", 942, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("mac", prop)

    prop = PropMeta("str", "maxMissHb", "maxMissHb", 15213, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("maxMissHb", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14049, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 5577, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "numHB", "numHB", 947, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("numHB", prop)

    prop = PropMeta("str", "operSt", "operSt", 949, PropCategory.REGULAR)
    prop.label = "Status"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 3
    prop.defaultValueStr = "identified"
    prop._addConstant("compatible", "compatible", 4)
    prop._addConstant("identified", "identified", 3)
    prop._addConstant("incompatible", "incompatible", 5)
    prop._addConstant("offline", "offline", 2)
    prop._addConstant("online", "online", 1)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "pcIfId", "pcIfId", 15335, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("pcIfId", prop)

    prop = PropMeta("str", "portId", "portId", 16466, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("portId", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "state", "state", 16467, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 8
    prop.defaultValueStr = "unknown"
    prop._addConstant("connected", "connected", 1)
    prop._addConstant("deployPending", "service-vm-pending-deployment", 10)
    prop._addConstant("disconnected", "disconnected", 3)
    prop._addConstant("maintReq", "maintenance-required", 9)
    prop._addConstant("maintenance", "maintenance-mode", 0)
    prop._addConstant("noresponse", "not-responding", 2)
    prop._addConstant("poweredOff", "powered-off", 5)
    prop._addConstant("poweredOn", "powered-on", 4)
    prop._addConstant("quarantine", "quarantine-mode", 11)
    prop._addConstant("standBy", "standby", 6)
    prop._addConstant("suspended", "suspended", 7)
    prop._addConstant("unknown", "unknown", 8)
    meta.props.add("state", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "transitionStatus", "transitionStatus", 16078, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "attached"
    prop._addConstant("attached", "attached", 1)
    prop._addConstant("detached", "detached", 2)
    prop._addConstant("nacked", "nacked", 3)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("transitionStatus", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "updateTs", "updateTs", 944, PropCategory.REGULAR)
    prop.label = "Update Timestamp"
    prop.isOper = True
    meta.props.add("updateTs", prop)

    prop = PropMeta("str", "uuid", "uuid", 18689, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("uuid", prop)

    prop = PropMeta("str", "version", "version", 20368, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("version", prop)

    prop = PropMeta("str", "vmmCtrlrPKey", "vmmCtrlrPKey", 23048, PropCategory.REGULAR)
    prop.label = "vmmCtrlrP DN"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("vmmCtrlrPKey", prop)

    meta.namingProps.append(getattr(meta.props, "devId"))

    def __init__(self, parentMoOrDn, devId, markDirty=True, **creationProps):
        namingVals = [devId]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class OvsContractPart1year(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = StatsClassMeta("cobra.model.opflex.OvsContractPart1year", "ovs contract stats")

    counter = CounterMeta("revBytes", CounterCategory.COUNTER, "bytes", "received bytes (reverse)")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "revBytesLast"
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "revBytesCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "revBytesPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "revBytesMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "revBytesMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "revBytesAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "revBytesSpct"
    counter._propRefs[PropCategory.IMPLICIT_BASELINE] = "revBytesBase"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "revBytesThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "revBytesTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "revBytesTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "revBytesRate"
    meta._counters.append(counter)

    counter = CounterMeta("revPkts", CounterCategory.COUNTER, "packets", "received packets (reverse)")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "revPktsLast"
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "revPktsCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "revPktsPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "revPktsMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "revPktsMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "revPktsAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "revPktsSpct"
    counter._propRefs[PropCategory.IMPLICIT_BASELINE] = "revPktsBase"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "revPktsThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "revPktsTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "revPktsTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "revPktsRate"
    meta._counters.append(counter)

    counter = CounterMeta("bytes", CounterCategory.COUNTER, "bytes", "received bytes")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "bytesLast"
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "bytesCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "bytesPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "bytesMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "bytesMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "bytesAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "bytesSpct"
    counter._propRefs[PropCategory.IMPLICIT_BASELINE] = "bytesBase"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "bytesThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "bytesTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "bytesTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "bytesRate"
    meta._counters.append(counter)

    counter = CounterMeta("pkts", CounterCategory.COUNTER, "packets", "received packets")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "pktsLast"
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "pktsCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "pktsPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "pktsMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "pktsMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "pktsAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "pktsSpct"
    counter._propRefs[PropCategory.IMPLICIT_BASELINE] = "pktsBase"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "pktsThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "pktsTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "pktsTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "pktsRate"
    meta._counters.append(counter)

    meta.moClassName = "opflexOvsContractPart1year"
    meta.rnFormat = "CDopflexOvsContractPart1year-%(nodeId)s"
    meta.category = MoCategory.STATS_CURRENT
    meta.label = "current portion of the ovs contract stats stats in 1 year"
    meta.writeAccessMask = 0x601
    meta.readAccessMask = 0x601
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.parentClasses.add("cobra.model.fv.RInfoHolder")

    meta.superClasses.add("cobra.model.stats.CurrAgPart")
    meta.superClasses.add("cobra.model.stats.Curr")
    meta.superClasses.add("cobra.model.stats.Item")
    meta.superClasses.add("cobra.model.opflex.OvsContractPart")

    meta.rnPrefixes = [
        ('CDopflexOvsContractPart1year-', True),
    ]

    prop = PropMeta("str", "bytesAvg", "bytesAvg", 34961, PropCategory.IMPLICIT_AVG)
    prop.label = "received bytes average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("bytesAvg", prop)

    prop = PropMeta("str", "bytesBase", "bytesBase", 34956, PropCategory.IMPLICIT_BASELINE)
    prop.label = "received bytes baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("bytesBase", prop)

    prop = PropMeta("str", "bytesCum", "bytesCum", 34957, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "received bytes cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("bytesCum", prop)

    prop = PropMeta("str", "bytesLast", "bytesLast", 34955, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "received bytes current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("bytesLast", prop)

    prop = PropMeta("str", "bytesMax", "bytesMax", 34960, PropCategory.IMPLICIT_MAX)
    prop.label = "received bytes maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("bytesMax", prop)

    prop = PropMeta("str", "bytesMin", "bytesMin", 34959, PropCategory.IMPLICIT_MIN)
    prop.label = "received bytes minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("bytesMin", prop)

    prop = PropMeta("str", "bytesPer", "bytesPer", 34958, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "received bytes periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("bytesPer", prop)

    prop = PropMeta("str", "bytesRate", "bytesRate", 34966, PropCategory.IMPLICIT_RATE)
    prop.label = "received bytes rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("bytesRate", prop)

    prop = PropMeta("str", "bytesSpct", "bytesSpct", 34962, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "received bytes suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("bytesSpct", prop)

    prop = PropMeta("str", "bytesThr", "bytesThr", 34963, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "received bytes thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("bytesThr", prop)

    prop = PropMeta("str", "bytesTr", "bytesTr", 34965, PropCategory.IMPLICIT_TREND)
    prop.label = "received bytes trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("bytesTr", prop)

    prop = PropMeta("str", "bytesTrBase", "bytesTrBase", 34964, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "received bytes trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("bytesTrBase", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cnt", "cnt", 16212, PropCategory.REGULAR)
    prop.label = "Number of Collections During this Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("cnt", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lastCollOffset", "lastCollOffset", 111, PropCategory.REGULAR)
    prop.label = "Collection Length"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("lastCollOffset", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "nodeId", "nodeId", 34766, PropCategory.REGULAR)
    prop.label = "Node Id"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("nodeId", prop)

    prop = PropMeta("str", "pktsAvg", "pktsAvg", 35016, PropCategory.IMPLICIT_AVG)
    prop.label = "received packets average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("pktsAvg", prop)

    prop = PropMeta("str", "pktsBase", "pktsBase", 35011, PropCategory.IMPLICIT_BASELINE)
    prop.label = "received packets baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("pktsBase", prop)

    prop = PropMeta("str", "pktsCum", "pktsCum", 35012, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "received packets cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("pktsCum", prop)

    prop = PropMeta("str", "pktsLast", "pktsLast", 35010, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "received packets current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("pktsLast", prop)

    prop = PropMeta("str", "pktsMax", "pktsMax", 35015, PropCategory.IMPLICIT_MAX)
    prop.label = "received packets maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("pktsMax", prop)

    prop = PropMeta("str", "pktsMin", "pktsMin", 35014, PropCategory.IMPLICIT_MIN)
    prop.label = "received packets minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("pktsMin", prop)

    prop = PropMeta("str", "pktsPer", "pktsPer", 35013, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "received packets periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("pktsPer", prop)

    prop = PropMeta("str", "pktsRate", "pktsRate", 35021, PropCategory.IMPLICIT_RATE)
    prop.label = "received packets rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("pktsRate", prop)

    prop = PropMeta("str", "pktsSpct", "pktsSpct", 35017, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "received packets suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("pktsSpct", prop)

    prop = PropMeta("str", "pktsThr", "pktsThr", 35018, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "received packets thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("pktsThr", prop)

    prop = PropMeta("str", "pktsTr", "pktsTr", 35020, PropCategory.IMPLICIT_TREND)
    prop.label = "received packets trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("pktsTr", prop)

    prop = PropMeta("str", "pktsTrBase", "pktsTrBase", 35019, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "received packets trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("pktsTrBase", prop)

    prop = PropMeta("str", "repIntvEnd", "repIntvEnd", 110, PropCategory.REGULAR)
    prop.label = "Reporting End Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvEnd", prop)

    prop = PropMeta("str", "repIntvStart", "repIntvStart", 109, PropCategory.REGULAR)
    prop.label = "Reporting Start Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvStart", prop)

    prop = PropMeta("str", "revBytesAvg", "revBytesAvg", 35071, PropCategory.IMPLICIT_AVG)
    prop.label = "received bytes (reverse) average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revBytesAvg", prop)

    prop = PropMeta("str", "revBytesBase", "revBytesBase", 35066, PropCategory.IMPLICIT_BASELINE)
    prop.label = "received bytes (reverse) baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revBytesBase", prop)

    prop = PropMeta("str", "revBytesCum", "revBytesCum", 35067, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "received bytes (reverse) cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revBytesCum", prop)

    prop = PropMeta("str", "revBytesLast", "revBytesLast", 35065, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "received bytes (reverse) current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revBytesLast", prop)

    prop = PropMeta("str", "revBytesMax", "revBytesMax", 35070, PropCategory.IMPLICIT_MAX)
    prop.label = "received bytes (reverse) maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revBytesMax", prop)

    prop = PropMeta("str", "revBytesMin", "revBytesMin", 35069, PropCategory.IMPLICIT_MIN)
    prop.label = "received bytes (reverse) minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revBytesMin", prop)

    prop = PropMeta("str", "revBytesPer", "revBytesPer", 35068, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "received bytes (reverse) periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revBytesPer", prop)

    prop = PropMeta("str", "revBytesRate", "revBytesRate", 35076, PropCategory.IMPLICIT_RATE)
    prop.label = "received bytes (reverse) rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revBytesRate", prop)

    prop = PropMeta("str", "revBytesSpct", "revBytesSpct", 35072, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "received bytes (reverse) suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revBytesSpct", prop)

    prop = PropMeta("str", "revBytesThr", "revBytesThr", 35073, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "received bytes (reverse) thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("revBytesThr", prop)

    prop = PropMeta("str", "revBytesTr", "revBytesTr", 35075, PropCategory.IMPLICIT_TREND)
    prop.label = "received bytes (reverse) trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revBytesTr", prop)

    prop = PropMeta("str", "revBytesTrBase", "revBytesTrBase", 35074, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "received bytes (reverse) trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revBytesTrBase", prop)

    prop = PropMeta("str", "revPktsAvg", "revPktsAvg", 35126, PropCategory.IMPLICIT_AVG)
    prop.label = "received packets (reverse) average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revPktsAvg", prop)

    prop = PropMeta("str", "revPktsBase", "revPktsBase", 35121, PropCategory.IMPLICIT_BASELINE)
    prop.label = "received packets (reverse) baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revPktsBase", prop)

    prop = PropMeta("str", "revPktsCum", "revPktsCum", 35122, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "received packets (reverse) cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revPktsCum", prop)

    prop = PropMeta("str", "revPktsLast", "revPktsLast", 35120, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "received packets (reverse) current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revPktsLast", prop)

    prop = PropMeta("str", "revPktsMax", "revPktsMax", 35125, PropCategory.IMPLICIT_MAX)
    prop.label = "received packets (reverse) maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revPktsMax", prop)

    prop = PropMeta("str", "revPktsMin", "revPktsMin", 35124, PropCategory.IMPLICIT_MIN)
    prop.label = "received packets (reverse) minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revPktsMin", prop)

    prop = PropMeta("str", "revPktsPer", "revPktsPer", 35123, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "received packets (reverse) periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revPktsPer", prop)

    prop = PropMeta("str", "revPktsRate", "revPktsRate", 35131, PropCategory.IMPLICIT_RATE)
    prop.label = "received packets (reverse) rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revPktsRate", prop)

    prop = PropMeta("str", "revPktsSpct", "revPktsSpct", 35127, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "received packets (reverse) suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revPktsSpct", prop)

    prop = PropMeta("str", "revPktsThr", "revPktsThr", 35128, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "received packets (reverse) thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("revPktsThr", prop)

    prop = PropMeta("str", "revPktsTr", "revPktsTr", 35130, PropCategory.IMPLICIT_TREND)
    prop.label = "received packets (reverse) trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revPktsTr", prop)

    prop = PropMeta("str", "revPktsTrBase", "revPktsTrBase", 35129, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "received packets (reverse) trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("revPktsTrBase", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "nodeId"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHcloudIgw", "From fv:Ctx to hcloud:Igw", "cobra.model.hcloud.Igw"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHcloudVgw", "From fv:Ctx to hcloud:Vgw", "cobra.model.hcloud.Vgw"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToConsVzBrCP", "From cloud ExtEPg to Consumer Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToProvVzBrCP", "From cloud ExtEPg to Provider Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToConsVzBrCP", "From EPg to Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToProvVzBrCP", "From EPg to Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudExtEPg", "From fvCtx (VRF) to cloudExtEPg", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToFvCtx", "cloud:ExtEPg to fv:Ctx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToHCloudEndPoint", "cloud:ExtEPg to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToHcloudSecurityGroup", "cloud:ExtEPg to hcloud:SecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToHCloudCtx", "From cloud ExtEPg to VPCs hCloudCtx", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudRegion", "From fvCtx (VRF) to CloudRegion", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHcloudCsr", "From fvCtx (VRF) to hcloudCsr (CSR)", "cobra.model.hcloud.Csr"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToHcloudSecurityGroup", "cloud:EPg to hcloud:SecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToFvCtx", "cloud:EPg to fv:Ctx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHCloudEndPoint", "From fvCtx (VRF) to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToHCloudEndPoint", "cloud:EPg to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHCloudCtx", "From fvCtx (VRF) to hcloudCtx (VPC)", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudCtxProfile", "From fvCtx (VRF) to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudEPg", "From fvCtx (VRF) to cloud EPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToHCloudCtx", "From cloud EPg to VPCs hCloudCtx", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("cloudEpgToApp", "cloudEpgToApp", "cobra.model.cloud.App"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CtxToRegion", "Vrf to cloud Region", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ATgToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AEPgToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("MgmtInstPToNode", "External Management Network EPG to Node", "cobra.model.fv.Locale"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("OoBToNode", "Out-of-band Management EPG to Node", "cobra.model.fv.Locale"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("InBToNode", "Node", "cobra.model.fv.Locale"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EPgToNwIf", "Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CtxToNwIf", "Private Network to Interface", "cobra.model.nw.If"))

    def __init__(self, parentMoOrDn, nodeId, markDirty=True, **creationProps):
        namingVals = [nodeId]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class DomP(Mo):
    """
    The external routed domain profile is a policy for managing the physical infrastructure, such as ports/VLANS, that can be used by an L3 routed outside network.

    """

    meta = ClassMeta("cobra.model.l3ext.DomP")

    meta.moClassName = "l3extDomP"
    meta.rnFormat = "l3dom-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "L3 Domain Profile"
    meta.writeAccessMask = 0x1000001
    meta.readAccessMask = 0x80384001000603
    meta.isDomainable = True
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = True

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.extnw.RtL3InstPToDomP")
    meta.childClasses.add("cobra.model.infra.RsVlanNs")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.infra.RtNicProfToDomP")
    meta.childClasses.add("cobra.model.infra.RtDomRef")
    meta.childClasses.add("cobra.model.infra.RsVlanNsDef")
    meta.childClasses.add("cobra.model.infra.RtDomP")
    meta.childClasses.add("cobra.model.infra.RsVipAddrNs")
    meta.childClasses.add("cobra.model.infra.RtDynPathAtt")
    meta.childClasses.add("cobra.model.infra.RtDomAtt")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.extnw.RtL3DomAtt")
    meta.childClasses.add("cobra.model.extnw.RsOut")
    meta.childClasses.add("cobra.model.l3ext.RtFromRPToL3Dom")
    meta.childClasses.add("cobra.model.infra.RsDomVxlanNsDef")
    meta.childClasses.add("cobra.model.aaa.DomainRef")
    meta.childClasses.add("cobra.model.extnw.LblCont")
    meta.childClasses.add("cobra.model.infra.RtLDevDomP")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.infra.RtExtDevDomP")
    meta.childClasses.add("cobra.model.infra.RtDomDef")

    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtNicProfToDomP", "rtextdevNicProfToDomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.extnw.RtL3InstPToDomP", "rtl3extL3InstPToDomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3ext.RtFromRPToL3Dom", "rtorchsFromRPToL3Dom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtDynPathAtt", "rtl3extDynPathAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.extnw.RtL3DomAtt", "rtl3extL3DomAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtExtDevDomP", "rtedmExtDevDomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RsDomVxlanNsDef", "rsdomVxlanNsDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtDomDef", "rtextdevDomDef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtLDevDomP", "rtvnsLDevDomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtDomRef", "rtedmDomRef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RsVlanNsDef", "rsvlanNsDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RsVipAddrNs", "rsvipAddrNs"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtDomAtt", "rtfvDomAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RsVlanNs", "rsvlanNs"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtDomP", "rtdomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.DomainRef", "domain-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.extnw.LblCont", "lblcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.extnw.RsOut", "rsout-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.pol.Uni")

    meta.superClasses.add("cobra.model.infra.ADomP")
    meta.superClasses.add("cobra.model.infra.DomP")
    meta.superClasses.add("cobra.model.l3ext.ADomP")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Dom")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.fv.ADomP")
    meta.superClasses.add("cobra.model.pol.Cont")
    meta.superClasses.add("cobra.model.extnw.DomP")

    meta.rnPrefixes = [
        ('l3dom-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 37609, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "configIssues", "configIssues", 4941, PropCategory.REGULAR)
    prop.label = "Configuration Issues"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("cdp-lldp-collision", "both-cdp-policy-and-lldp-policy-are-configured-for-attach-entity-profile", 16)
    prop._addConstant("enhanced-lacp-lag-creation-skipped", "enhanced-lacp-lag-policy-creation-skipped,-dvs-has-lacp-v1-enabled", 4096)
    prop._addConstant("invalid-mcast-addr", "missing-multicast-address-for-vxlan-mode", 512)
    prop._addConstant("invalid-port", "invalid-port-for-fabric-interface", 1024)
    prop._addConstant("invalid-vxlan-ns-range", "vxlan-range-below-0x800000-is-not-valid-for-n1kv-ns-mode", 128)
    prop._addConstant("missing-assoc-attEntP", "domain-is-missing-association-from-attach-entity-profile", 8)
    prop._addConstant("missing-encap", "invalid-or-missing-encapsulation", 1)
    prop._addConstant("missing-encapblk", "invalid-or-missing-encapsulation-blocks", 4)
    prop._addConstant("missing-epg", "association-to-end-point-group-not-specified", 2)
    prop._addConstant("missing-internal-vlan-blk", "missing-internal-vlan-encapsulation-blocks", 2048)
    prop._addConstant("missing-ns-assoc", "invalid-or-missing-association-to-vlan-or-vxlan-namespace", 256)
    prop._addConstant("multiple-cdp", "more-than-one-cdp-policy-found-for-attach-entity-profile", 64)
    prop._addConstant("multiple-cdp-policy", "domain-has-multiple-cdp-policies-in-interface-policy-groups-and-no-override-cdp-policy", 8192)
    prop._addConstant("multiple-lacp-policy", "domain-has-multiple-lacp-policies-in-interface-policy-groups-and-no-override-lacp-policy", 262144)
    prop._addConstant("multiple-lldp", "more-than-one-lldp-policy-found-for-attach-entity-profile", 32)
    prop._addConstant("multiple-lldp-policy", "domain-has-multiple-lldp-policies-in-interface-policy-groups-and-no-override-lldp-policy", 16384)
    prop._addConstant("multiple-mtu-policy", "domain-has-multiple-mtu-policies-in-interface-policy-groups-and-no-override-mtu-policy", 131072)
    prop._addConstant("multiple-nwsfw-policy", "domain-has-multiple-firewall-policies-in-interface-policy-groups-and-no-override-firewall-policy", 65536)
    prop._addConstant("multiple-stp-policy", "domain-has-multiple-stp-policies-in-interface-policy-groups-and-no-override-stp-policy", 32768)
    prop._addConstant("none", "n/a", 0)
    meta.props.add("configIssues", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 39748, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14211, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 6854, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15232, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15233, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "targetDscp", "targetDscp", 1625, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.defaultValue = 64
    prop.defaultValueStr = "unspecified"
    prop._addConstant("AF11", "af11-low-drop", 10)
    prop._addConstant("AF12", "af12-medium-drop", 12)
    prop._addConstant("AF13", "af13-high-drop", 14)
    prop._addConstant("AF21", "af21-low-drop", 18)
    prop._addConstant("AF22", "af22-medium-drop", 20)
    prop._addConstant("AF23", "af23-high-drop", 22)
    prop._addConstant("AF31", "af31-low-drop", 26)
    prop._addConstant("AF32", "af32-medium-drop", 28)
    prop._addConstant("AF33", "af33-high-drop", 30)
    prop._addConstant("AF41", "af41-low-drop", 34)
    prop._addConstant("AF42", "af42-medium-drop", 36)
    prop._addConstant("AF43", "af43-high-drop", 38)
    prop._addConstant("CS0", "cs0", 0)
    prop._addConstant("CS1", "cs1", 8)
    prop._addConstant("CS2", "cs2", 16)
    prop._addConstant("CS3", "cs3", 24)
    prop._addConstant("CS4", "cs4", 32)
    prop._addConstant("CS5", "cs5", 40)
    prop._addConstant("CS6", "cs6", 48)
    prop._addConstant("CS7", "cs7", 56)
    prop._addConstant("EF", "expedited-forwarding", 46)
    prop._addConstant("VA", "voice-admit", 44)
    prop._addConstant("unspecified", "unspecified", 64)
    meta.props.add("targetDscp", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Path"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ADomPToEthIf", "Interface", "cobra.model.l1.EthIf"))

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

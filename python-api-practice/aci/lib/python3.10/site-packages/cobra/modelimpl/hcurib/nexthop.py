# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Nexthop(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.hcurib.Nexthop")

    meta.moClassName = "hcuribNexthop"
    meta.rnFormat = "nh-[%(routeType)s]-addr-[%(addr)s]-if-[%(if)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Nexthop record"
    meta.writeAccessMask = 0x8008421042001
    meta.readAccessMask = 0x8008421042001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.parentClasses.add("cobra.model.hcurib.Route")

    meta.superClasses.add("cobra.model.hcurib.ANexthop")

    meta.rnPrefixes = [
        ('nh-', True),
        ('-addr-', True),
        ('-if-', True),
    ]

    prop = PropMeta("str", "addr", "addr", 55551, PropCategory.REGULAR)
    prop.label = "Nexthop Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("addr", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "if", "if", 55552, PropCategory.REGULAR)
    prop.label = "Nexthop Interface"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 512)]
    meta.props.add("if", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "metric", "metric", 55548, PropCategory.REGULAR)
    prop.label = "Metric"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 4294967295)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("metric", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "nextHopIfDn", "nextHopIfDn", 55546, PropCategory.REGULAR)
    prop.label = "Nexthop Interface Dn"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("nextHopIfDn", prop)

    prop = PropMeta("str", "pref", "pref", 55547, PropCategory.REGULAR)
    prop.label = "Preference"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 65535)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("pref", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "routeType", "routeType", 55553, PropCategory.REGULAR)
    prop.label = "Route Type"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 0
    prop.defaultValueStr = "direct"
    prop._addConstant("bgp", "bgp", 6)
    prop._addConstant("connected", "connected", 2)
    prop._addConstant("direct", "direct", 0)
    prop._addConstant("eigrp", "eigrp", 7)
    prop._addConstant("eigrp-external", "eigrp-external", 8)
    prop._addConstant("isis", "isis", 15)
    prop._addConstant("isis-inter-area", "isis-inter-area", 19)
    prop._addConstant("isis-level1", "isis-level-1", 17)
    prop._addConstant("isis-level2", "isis-level-2", 18)
    prop._addConstant("isis-summary", "isis-summary", 16)
    prop._addConstant("local", "local", 1)
    prop._addConstant("mobile", "mobile", 5)
    prop._addConstant("ospf", "ospf", 9)
    prop._addConstant("ospf-external-type1", "ospf-external-type1", 13)
    prop._addConstant("ospf-external-type2", "ospf-external-type2", 14)
    prop._addConstant("ospf-inter-area", "ospf-inter-area", 10)
    prop._addConstant("ospf-nssa-external-type1", "ospf-nssa-external-type1", 11)
    prop._addConstant("ospf-nssa-external-type2", "ospf-nssa-external-type2", 12)
    prop._addConstant("rip", "rip", 4)
    prop._addConstant("static", "static", 3)
    meta.props.add("routeType", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "routeType"))
    getattr(meta.props, "routeType").needDelimiter = True
    meta.namingProps.append(getattr(meta.props, "addr"))
    getattr(meta.props, "addr").needDelimiter = True
    meta.namingProps.append(getattr(meta.props, "if"))
    getattr(meta.props, "if").needDelimiter = True

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcbgpPeer", "From hcloudCsr to hcbgpPeer", "cobra.model.hcbgp.Peer"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcl3LoopbackRoutedIf", "From hcloudCsr to hcl3LoopbackRoutedIf", "cobra.model.hcl3.LoopbackRoutedIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcospfRsTunnIf", "From hcloudCsr to hcospfRsTunnIf", "cobra.model.hcospf.RsTunnIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHctunnIf", "From hcloudCsr to hctunnIf", "cobra.model.hctunn.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcloudNetworkInterface", "From hcloudCsr to hcloudNetworkInterface", "cobra.model.hcloud.NetworkInterface"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcloudEndPointOper", "From hcloudCsr to hcloudEndPointOper", "cobra.model.hcloud.EndPointOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcl1PhysicalIf", "From hcloudCsr to hcl1PhysicalIf", "cobra.model.hcl1.PhysicalIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToCloudCtxProfile", "From hcloudCsr to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcl3Vrf", "From hcloudCsr to hcl3Vrf", "cobra.model.hcl3.Vrf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcloudInstanceOper", "From hcloudCsr to hcloudInstanceOper", "cobra.model.hcloud.InstanceOper"))

    def __init__(self, parentMoOrDn, routeType, addr, if_, markDirty=True, **creationProps):
        namingVals = [routeType, addr, if_]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

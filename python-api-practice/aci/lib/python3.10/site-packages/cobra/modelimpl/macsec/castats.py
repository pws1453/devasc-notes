# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class CAStats(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.macsec.CAStats")

    meta.moClassName = "macsecCAStats"
    meta.rnFormat = "castats"
    meta.category = MoCategory.REGULAR
    meta.label = "Connectivity Association statistics"
    meta.writeAccessMask = 0x4000000000001
    meta.readAccessMask = 0x4000000000001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))

    meta.parentClasses.add("cobra.model.macsec.If")
    meta.parentClasses.add("cobra.model.macsec.FabIf")

    meta.rnPrefixes = [
        ('castats', False),
    ]

    prop = PropMeta("str", "annotation", "annotation", 38656, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 40795, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "ickDervFail", "ickDervFail", 33406, PropCategory.REGULAR)
    prop.label = "CA Failure - Integrity Check Value Key Derivation"
    prop.isOper = True
    meta.props.add("ickDervFail", prop)

    prop = PropMeta("str", "invalidPeerCpbl", "invalidPeerCpbl", 33408, PropCategory.REGULAR)
    prop.label = "CA Failure - Invalid Peer MACSec Capability"
    prop.isOper = True
    meta.props.add("invalidPeerCpbl", prop)

    prop = PropMeta("str", "kRekeys", "kRekeys", 30259, PropCategory.REGULAR)
    prop.label = "Key Rekeys"
    prop.isOper = True
    meta.props.add("kRekeys", prop)

    prop = PropMeta("str", "kekDervFail", "kekDervFail", 33407, PropCategory.REGULAR)
    prop.label = "CA Failure - Key Encrypting Key Derivation"
    prop.isOper = True
    meta.props.add("kekDervFail", prop)

    prop = PropMeta("str", "mkpduRx", "mkpduRx", 30266, PropCategory.REGULAR)
    prop.label = "MKPDUs Validated/Received"
    prop.isOper = True
    meta.props.add("mkpduRx", prop)

    prop = PropMeta("str", "mkpduRxDistSak", "mkpduRxDistSak", 30267, PropCategory.REGULAR)
    prop.label = "MKPDUs Received/Distributed Secure Association Key"
    prop.isOper = True
    meta.props.add("mkpduRxDistSak", prop)

    prop = PropMeta("str", "mkpduTx", "mkpduTx", 30264, PropCategory.REGULAR)
    prop.label = "MKPDUs Transmitted"
    prop.isOper = True
    meta.props.add("mkpduTx", prop)

    prop = PropMeta("str", "mkpduTxDistSak", "mkpduTxDistSak", 30265, PropCategory.REGULAR)
    prop.label = "MKPDUs Transmitted/Distributed Secure Association Key"
    prop.isOper = True
    meta.props.add("mkpduTxDistSak", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "sakRespRx", "sakRespRx", 30263, PropCategory.REGULAR)
    prop.label = "Secure Association Key Responses Received"
    prop.isOper = True
    meta.props.add("sakRespRx", prop)

    prop = PropMeta("str", "saksGen", "saksGen", 30260, PropCategory.REGULAR)
    prop.label = "Secure Association Keys Generated"
    prop.isOper = True
    meta.props.add("saksGen", prop)

    prop = PropMeta("str", "saksRekeyed", "saksRekeyed", 30261, PropCategory.REGULAR)
    prop.label = "Secure Association Keys Rekeyed"
    prop.isOper = True
    meta.props.add("saksRekeyed", prop)

    prop = PropMeta("str", "saksRx", "saksRx", 30262, PropCategory.REGULAR)
    prop.label = "Secure Association Keys Received"
    prop.isOper = True
    meta.props.add("saksRx", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

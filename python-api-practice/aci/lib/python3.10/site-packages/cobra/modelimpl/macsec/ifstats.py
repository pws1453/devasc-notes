# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class IfStats(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.macsec.IfStats")

    meta.moClassName = "macsecIfStats"
    meta.rnFormat = "ifstats"
    meta.category = MoCategory.REGULAR
    meta.label = "Interface statistics"
    meta.writeAccessMask = 0x4000000000001
    meta.readAccessMask = 0x4000000000001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))

    meta.parentClasses.add("cobra.model.macsec.If")
    meta.parentClasses.add("cobra.model.macsec.FabIf")

    meta.rnPrefixes = [
        ('ifstats', False),
    ]

    prop = PropMeta("str", "annotation", "annotation", 38657, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 40796, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "invalidMkpduRx", "invalidMkpduRx", 33410, PropCategory.REGULAR)
    prop.label = "MKPDU Rx Validation Fail"
    prop.isOper = True
    meta.props.add("invalidMkpduRx", prop)

    prop = PropMeta("str", "macsecRxSaInstallFail", "macsecRxSaInstallFail", 33422, PropCategory.REGULAR)
    prop.label = "Rx SA Installation Failure"
    prop.isOper = True
    meta.props.add("macsecRxSaInstallFail", prop)

    prop = PropMeta("str", "macsecTxSaInstallFail", "macsecTxSaInstallFail", 33423, PropCategory.REGULAR)
    prop.label = "Tx SA Installation Failure"
    prop.isOper = True
    meta.props.add("macsecTxSaInstallFail", prop)

    prop = PropMeta("str", "mkpduEtherMismatch", "mkpduEtherMismatch", 30275, PropCategory.REGULAR)
    prop.label = "MKPDUs Rx Drop Packet, Ethertype Mismatch"
    prop.isOper = True
    meta.props.add("mkpduEtherMismatch", prop)

    prop = PropMeta("str", "mkpduNoRxIfDn", "mkpduNoRxIfDn", 30271, PropCategory.REGULAR)
    prop.label = "MKPDUs No Rx on interface down"
    prop.isOper = True
    meta.props.add("mkpduNoRxIfDn", prop)

    prop = PropMeta("str", "mkpduNoTxIfDn", "mkpduNoTxIfDn", 30270, PropCategory.REGULAR)
    prop.label = "MKPDUs No Tx on interface down"
    prop.isOper = True
    meta.props.add("mkpduNoTxIfDn", prop)

    prop = PropMeta("str", "mkpduRxBadPeerMN", "mkpduRxBadPeerMN", 33411, PropCategory.REGULAR)
    prop.label = "MKPDU Rx Bad Peer Message Number"
    prop.isOper = True
    meta.props.add("mkpduRxBadPeerMN", prop)

    prop = PropMeta("str", "mkpduRxCANotFnd", "mkpduRxCANotFnd", 30272, PropCategory.REGULAR)
    prop.label = "MKPDUs Rx Connectivity Association not found"
    prop.isOper = True
    meta.props.add("mkpduRxCANotFnd", prop)

    prop = PropMeta("str", "mkpduRxErr", "mkpduRxErr", 30273, PropCategory.REGULAR)
    prop.label = "MKPDUs Rx Error"
    prop.isOper = True
    meta.props.add("mkpduRxErr", prop)

    prop = PropMeta("str", "mkpduRxNRPListMN", "mkpduRxNRPListMN", 33412, PropCategory.REGULAR)
    prop.label = "MKPDU Rx Non-recent Peerlist Message Number"
    prop.isOper = True
    meta.props.add("mkpduRxNRPListMN", prop)

    prop = PropMeta("str", "mkpduRxSucc", "mkpduRxSucc", 30274, PropCategory.REGULAR)
    prop.label = "MKPDUs Rx Success"
    prop.isOper = True
    meta.props.add("mkpduRxSucc", prop)

    prop = PropMeta("str", "mkpduTxFail", "mkpduTxFail", 33409, PropCategory.REGULAR)
    prop.label = "MKPDU Tx Fail"
    prop.isOper = True
    meta.props.add("mkpduTxFail", prop)

    prop = PropMeta("str", "mkpduTxPktBldFail", "mkpduTxPktBldFail", 30269, PropCategory.REGULAR)
    prop.label = "MKPDUs Tx Packet Build Fail"
    prop.isOper = True
    meta.props.add("mkpduTxPktBldFail", prop)

    prop = PropMeta("str", "mkpduTxSucc", "mkpduTxSucc", 30268, PropCategory.REGULAR)
    prop.label = "MKPDUs Tx Success"
    prop.isOper = True
    meta.props.add("mkpduTxSucc", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "rxSakANNotInUse", "rxSakANNotInUse", 33416, PropCategory.REGULAR)
    prop.label = "MKPDU Rx Drop SAKUSE, AN Not In UseFail"
    prop.isOper = True
    meta.props.add("rxSakANNotInUse", prop)

    prop = PropMeta("str", "rxSakKNMismatch", "rxSakKNMismatch", 33413, PropCategory.REGULAR)
    prop.label = "MKPDU Rx Drop SAKUSE, KN Mismatch"
    prop.isOper = True
    meta.props.add("rxSakKNMismatch", prop)

    prop = PropMeta("str", "rxSakKeyMIMismatch", "rxSakKeyMIMismatch", 33415, PropCategory.REGULAR)
    prop.label = "MKPDU Rx Drop SAKUSE, Key MI Mismatch Fail"
    prop.isOper = True
    meta.props.add("rxSakKeyMIMismatch", prop)

    prop = PropMeta("str", "rxSakKsRxTxNotSet", "rxSakKsRxTxNotSet", 33417, PropCategory.REGULAR)
    prop.label = "MKPDU Rx Drop SAKUSE, KS Rx/Tx Not Set Fail"
    prop.isOper = True
    meta.props.add("rxSakKsRxTxNotSet", prop)

    prop = PropMeta("str", "rxSakRxNotSet", "rxSakRxNotSet", 33414, PropCategory.REGULAR)
    prop.label = "MKPDU Rx Drop SAKUSE, Rx Not Set Fail"
    prop.isOper = True
    meta.props.add("rxSakRxNotSet", prop)

    prop = PropMeta("str", "sakDecryptFail", "sakDecryptFail", 33421, PropCategory.REGULAR)
    prop.label = "SAK Decryption/Unwrap Failure"
    prop.isOper = True
    meta.props.add("sakDecryptFail", prop)

    prop = PropMeta("str", "sakEncryptFail", "sakEncryptFail", 33420, PropCategory.REGULAR)
    prop.label = "SAK Encryption/Wrap Failure"
    prop.isOper = True
    meta.props.add("sakEncryptFail", prop)

    prop = PropMeta("str", "sakGenFail", "sakGenFail", 33418, PropCategory.REGULAR)
    prop.label = "SAK Generation Failure"
    prop.isOper = True
    meta.props.add("sakGenFail", prop)

    prop = PropMeta("str", "sakHashKeyGenFail", "sakHashKeyGenFail", 33419, PropCategory.REGULAR)
    prop.label = "SAK Hash Key Generation Failure"
    prop.isOper = True
    meta.props.add("sakHashKeyGenFail", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

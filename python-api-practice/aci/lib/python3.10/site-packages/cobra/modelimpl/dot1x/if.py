# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class If(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.dot1x.If")

    meta.moClassName = "dot1xIf"
    meta.rnFormat = "if-[%(id)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Interface"
    meta.writeAccessMask = 0x6006010020001
    meta.readAccessMask = 0x6006010020001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.dot1x.DUEp")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.dot1x.IfStats")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.l2.RsEthIf")
    meta.childClasses.add("cobra.model.dot1x.DAEp")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.nw.RtPathToIf")
    meta.childClasses.add("cobra.model.l2.RsMgmtIf")
    meta.childClasses.add("cobra.model.dot1x.VDAEp")

    meta.childNamesAndRnPrefix.append(("cobra.model.nw.RtPathToIf", "rtpathToIf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RsMgmtIf", "rsmgmtIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dot1x.IfStats", "ifstats"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RsEthIf", "rsethIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dot1x.VDAEp", "vdaep-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dot1x.DUEp", "aup-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dot1x.DAEp", "aep-"))

    meta.parentClasses.add("cobra.model.dot1x.Inst")

    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.nw.If")
    meta.superClasses.add("cobra.model.l2.ProtIf")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.LogicalIf")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.ProtIf")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.rnPrefixes = [
        ('if-', True),
    ]

    prop = PropMeta("str", "adminSt", "adminSt", 3674, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 32700, PropCategory.REGULAR)
    prop.label = "Port Control"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "auto"
    prop._addConstant("auto", "auto", 1)
    prop._addConstant("force-authorized", "force-authorized", 2)
    prop._addConstant("force-unauthorized", "force-unauthorized", 3)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "descr", "descr", 5585, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "guestVlan", "guestVlan", 32701, PropCategory.REGULAR)
    prop.label = "Guest VLAN"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 4095)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("guestVlan", prop)

    prop = PropMeta("str", "hostMode", "hostMode", 32696, PropCategory.REGULAR)
    prop.label = "Host Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "single-host"
    prop._addConstant("multi-auth", "multi-auth", 3)
    prop._addConstant("multi-domain", "multi-domain", 4)
    prop._addConstant("multi-host", "multi-host", 2)
    prop._addConstant("single-host", "single-host", 1)
    meta.props.add("hostMode", prop)

    prop = PropMeta("str", "id", "id", 32729, PropCategory.REGULAR)
    prop.label = "Interface ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "macAuth", "macAuth", 32697, PropCategory.REGULAR)
    prop.label = "MAC Auth"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 3
    prop.defaultValueStr = "eap"
    prop._addConstant("bypass", "eap_fallback_mab", 2)
    prop._addConstant("eap", "eap", 3)
    meta.props.add("macAuth", prop)

    prop = PropMeta("str", "maxReauthReq", "maxReauthReq", 32698, PropCategory.REGULAR)
    prop.label = "Max Reauth Request"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 10)]
    prop.defaultValue = 2
    prop.defaultValueStr = "2"
    meta.props.add("maxReauthReq", prop)

    prop = PropMeta("str", "maxReq", "maxReq", 32699, PropCategory.REGULAR)
    prop.label = "Max Request"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(2, 10)]
    prop.defaultValue = 2
    prop.defaultValueStr = "2"
    meta.props.add("maxReq", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 33317, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operStQual", "operStQual", 32710, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "up"
    prop._addConstant("admin-down", "administratively-down", 2)
    prop._addConstant("if-down", "interface-down", 3)
    prop._addConstant("platform-not-supported", "platform-not-supported", 5)
    prop._addConstant("unsupported", "unsupported", 4)
    prop._addConstant("up", "up", 1)
    meta.props.add("operStQual", prop)

    prop = PropMeta("str", "quietPeriod", "quietPeriod", 32703, PropCategory.REGULAR)
    prop.label = "Quiet Period"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 65535)]
    prop.defaultValue = 60
    prop.defaultValueStr = "60"
    meta.props.add("quietPeriod", prop)

    prop = PropMeta("str", "rateLimitPeriod", "rateLimitPeriod", 32704, PropCategory.REGULAR)
    prop.label = "Key Chain"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 65535)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("rateLimitPeriod", prop)

    prop = PropMeta("str", "reAuth", "reAuth", 32702, PropCategory.REGULAR)
    prop.label = "Re-authentication"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("reAuth", prop)

    prop = PropMeta("str", "reAuthPeriod", "reAuthPeriod", 32705, PropCategory.REGULAR)
    prop.label = "Re-auth Period"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(30, 2147483)]
    prop.defaultValue = 3600
    prop.defaultValueStr = "3600"
    meta.props.add("reAuthPeriod", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "serverTimeout", "serverTimeout", 32706, PropCategory.REGULAR)
    prop.label = "Server Timeout"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(2, 65535)]
    prop.defaultValue = 30
    prop.defaultValueStr = "30"
    meta.props.add("serverTimeout", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "suppTimeout", "suppTimeout", 32707, PropCategory.REGULAR)
    prop.label = "Supplicant Timeout"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(2, 65535)]
    prop.defaultValue = 30
    prop.defaultValueStr = "30"
    meta.props.add("suppTimeout", prop)

    prop = PropMeta("str", "txPeriod", "txPeriod", 32708, PropCategory.REGULAR)
    prop.label = "Tx Period"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(2, 65535)]
    prop.defaultValue = 30
    prop.defaultValueStr = "30"
    meta.props.add("txPeriod", prop)

    meta.namingProps.append(getattr(meta.props, "id"))
    getattr(meta.props, "id").needDelimiter = True

    meta.deploymentCategory = DeploymentCategory("interface", "Interface")
    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class VethIf(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.l1.VethIf")

    meta.moClassName = "l1VethIf"
    meta.rnFormat = "veth-[%(id)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Virtual Ethernet Interface Config"
    meta.writeAccessMask = 0x2102008010001
    meta.readAccessMask = 0x6706419032001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.l1.RsMacsecFabPolCons")
    meta.childClasses.add("cobra.model.l1.RsDwdmFabIfPolCons")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.l1.RsMacsecPolCons")
    meta.childClasses.add("cobra.model.l1.RsFLinkFlapPolCons")
    meta.childClasses.add("cobra.model.l1.RsL2PortSecurityCons")
    meta.childClasses.add("cobra.model.l1.RsQosEgressDppIfPolCons")
    meta.childClasses.add("cobra.model.l1.RtEncPhysRtdConf")
    meta.childClasses.add("cobra.model.l1.RsCoppIfPolCons")
    meta.childClasses.add("cobra.model.l1.RsQosLlfcIfPolCons")
    meta.childClasses.add("cobra.model.l1.RsL2IfPolCons")
    meta.childClasses.add("cobra.model.l1.RtLsNodeToIf")
    meta.childClasses.add("cobra.model.l1.RtBrConf")
    meta.childClasses.add("cobra.model.l1.RtSpanSrcToL1IfAtt")
    meta.childClasses.add("cobra.model.l1.RsL2PortAuthCons")
    meta.childClasses.add("cobra.model.l1.RtPhysRtdConf")
    meta.childClasses.add("cobra.model.l1.RsLacpIfPolCons")
    meta.childClasses.add("cobra.model.l1.RtLabelEpToAllowedEthIf")
    meta.childClasses.add("cobra.model.l1.RtEthIf")
    meta.childClasses.add("cobra.model.l1.PrioFlowCtrlP")
    meta.childClasses.add("cobra.model.l1.RsCeMonitorPolCons")
    meta.childClasses.add("cobra.model.l1.RtToObservedEthIf")
    meta.childClasses.add("cobra.model.l1.RsLldpIfPolCons")
    meta.childClasses.add("cobra.model.l1.RsAttEntityPCons")
    meta.childClasses.add("cobra.model.l1.RsFcIfPolCons")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.nw.RtPathToIf")
    meta.childClasses.add("cobra.model.l1.RsIpv6MonitorPolCons")
    meta.childClasses.add("cobra.model.l1.RsStpIfPolCons")
    meta.childClasses.add("cobra.model.l1.RsDwdmIfPolCons")
    meta.childClasses.add("cobra.model.l1.RsPoeIfPolCons")
    meta.childClasses.add("cobra.model.l1.RsIpv4MonitorPolCons")
    meta.childClasses.add("cobra.model.l1.RsStormctrlIfPolCons")
    meta.childClasses.add("cobra.model.l1.RsMonPolIfPolCons")
    meta.childClasses.add("cobra.model.l1.RtLabelEpToConsumerEthIf")
    meta.childClasses.add("cobra.model.l1.RtNodePortAtt")
    meta.childClasses.add("cobra.model.l1.RsFIfPolCons")
    meta.childClasses.add("cobra.model.l1.RsHIfPolCons")
    meta.childClasses.add("cobra.model.fv.DomDef")
    meta.childClasses.add("cobra.model.l1.RsL3IfPolCons")
    meta.childClasses.add("cobra.model.l1.RsCdpIfPolCons")
    meta.childClasses.add("cobra.model.l1.RsQosSdIfPolCons")
    meta.childClasses.add("cobra.model.l1.RsLinkFlapPolCons")
    meta.childClasses.add("cobra.model.l1.RsMcpIfPolCons")
    meta.childClasses.add("cobra.model.l1.RsQosPfcIfPolCons")
    meta.childClasses.add("cobra.model.l1.RtExtConf")
    meta.childClasses.add("cobra.model.l1.RsQosIngressDppIfPolCons")

    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtLabelEpToAllowedEthIf", "rtnwLabelEpToAllowedEthIf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtLabelEpToConsumerEthIf", "rtlabelEpToConsumerEthIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsQosIngressDppIfPolCons", "rsQosIngressDppIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsQosEgressDppIfPolCons", "rsQosEgressDppIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtSpanSrcToL1IfAtt", "rtspanSpanSrcToL1IfAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsL2PortSecurityCons", "rsl2PortSecurityCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsIpv6MonitorPolCons", "rsipv6MonitorPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsIpv4MonitorPolCons", "rsipv4MonitorPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsStormctrlIfPolCons", "rsstormctrlIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtEncPhysRtdConf", "rtl3EncPhysRtdConf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsMacsecFabPolCons", "rsmacsecFabPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsDwdmFabIfPolCons", "rsdwdmFabIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsFLinkFlapPolCons", "rsfLinkFlapPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsQosLlfcIfPolCons", "rsqosLlfcIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsCeMonitorPolCons", "rsceMonitorPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtToObservedEthIf", "rtToObservedEthIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsMonPolIfPolCons", "rsmonPolIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsLinkFlapPolCons", "rslinkFlapPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsQosPfcIfPolCons", "rsqosPfcIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsL2PortAuthCons", "rsl2PortAuthCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsAttEntityPCons", "rsattEntityPCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtNodePortAtt", "rtfvNodePortAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsQosSdIfPolCons", "rsqosSdIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsMacsecPolCons", "rsmacsecPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsCoppIfPolCons", "rscoppIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsLacpIfPolCons", "rslacpIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsLldpIfPolCons", "rslldpIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsDwdmIfPolCons", "rsdwdmIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsStpIfPolCons", "rsstpIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsPoeIfPolCons", "rspoeIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsCdpIfPolCons", "rscdpIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsMcpIfPolCons", "rsmcpIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsL2IfPolCons", "rsl2IfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtPhysRtdConf", "rtphysRtdConf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsFcIfPolCons", "rsfcIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsL3IfPolCons", "rsl3IfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtLsNodeToIf", "rtLsNodeToIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsFIfPolCons", "rsfIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsHIfPolCons", "rshIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nw.RtPathToIf", "rtpathToIf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtEthIf", "rtl2EthIf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtExtConf", "rtextConf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtBrConf", "rtbrConf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.DomDef", "dom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.PrioFlowCtrlP", "pfc"))

    meta.parentClasses.add("cobra.model.veth.Inst")

    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.nw.If")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.l1.EthIf")
    meta.superClasses.add("cobra.model.l1.If")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.rnPrefixes = [
        ('veth-', True),
    ]

    prop = PropMeta("str", "adminSt", "adminSt", 3711, PropCategory.REGULAR)
    prop.label = "Administrative State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "down"
    prop._addConstant("down", "down", 1)
    prop._addConstant("up", "up", 2)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "autoNeg", "autoNeg", 3713, PropCategory.REGULAR)
    prop.label = "Auto Negotiation"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "on"
    prop._addConstant("off", "off", 2)
    prop._addConstant("on", "on", 1)
    meta.props.add("autoNeg", prop)

    prop = PropMeta("str", "boundChannelId", "boundChannelId", 38932, PropCategory.REGULAR)
    prop.label = "Channel Id used for this Veth"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(100, 32767)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("boundChannelId", prop)

    prop = PropMeta("str", "boundIf", "boundIf", 38933, PropCategory.REGULAR)
    prop.label = "Bound Port Index"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("boundIf", prop)

    prop = PropMeta("str", "boundPcName", "boundPcName", 38941, PropCategory.REGULAR)
    prop.label = "Veth Bound Interface AccBndlGrp Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("boundPcName", prop)

    prop = PropMeta("str", "bw", "bw", 3722, PropCategory.REGULAR)
    prop.label = "Bandwidth"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 100000000)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("bw", prop)

    prop = PropMeta("str", "capability", "capability", 38937, PropCategory.REGULAR)
    prop.label = "Capability flags"
    prop.isOper = True
    meta.props.add("capability", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "configErr", "configErr", 38936, PropCategory.REGULAR)
    prop.label = "Vethernet config error"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("Bind configuration modification not allowed", "modification-not-allowed", 1)
    prop._addConstant("The bind configuration already exists", "already-exist", 3)
    prop._addConstant("Veth already bound to interface", "already-bound", 2)
    prop._addConstant("none", "none", 0)
    meta.props.add("configErr", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 38931, PropCategory.REGULAR)
    prop.label = "Feature Enable flags"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "delay", "delay", 3719, PropCategory.REGULAR)
    prop.label = "Delay"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 16777215)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("delay", prop)

    prop = PropMeta("str", "descr", "descr", 5585, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dot1qEtherType", "dot1qEtherType", 3721, PropCategory.REGULAR)
    prop.label = "Dot1q Ether Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "0x8100"
    prop._addConstant("0x8100", "0x8100", 1)
    prop._addConstant("0x88A8", "0x88a8", 2)
    prop._addConstant("0x9100", "0x9100", 3)
    prop._addConstant("any", "any", 4)
    meta.props.add("dot1qEtherType", prop)

    prop = PropMeta("str", "ethpmCfgFailedBmp", "ethpmCfgFailedBmp", 39208, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("l1:VethIfadminSt_failed_flag", None, 8)
    prop._addConstant("l1:VethIfautoNeg_failed_flag", None, 16)
    prop._addConstant("l1:VethIfboundChannelId_failed_flag", None, 536870912)
    prop._addConstant("l1:VethIfboundIf_failed_flag", None, 1073741824)
    prop._addConstant("l1:VethIfboundPcName_failed_flag", None, 2147483648)
    prop._addConstant("l1:VethIfbw_failed_flag", None, 1024)
    prop._addConstant("l1:VethIfctrl_failed_flag", None, 17179869184)
    prop._addConstant("l1:VethIfdelay_failed_flag", None, 2048)
    prop._addConstant("l1:VethIfdescr_failed_flag", None, 2)
    prop._addConstant("l1:VethIfdot1qEtherType_failed_flag", None, 4096)
    prop._addConstant("l1:VethIffcotChannelNumber_failed_flag", None, 32)
    prop._addConstant("l1:VethIfhostNicGrp_failed_flag", None, 274877906944)
    prop._addConstant("l1:VethIfid_failed_flag", None, 4)
    prop._addConstant("l1:VethIfinhBw_failed_flag", None, 8192)
    prop._addConstant("l1:VethIflabel_failed_flag", None, 549755813888)
    prop._addConstant("l1:VethIflayer_failed_flag", None, 32768)
    prop._addConstant("l1:VethIflcOwn_failed_flag", None, -9223372036854775808)
    prop._addConstant("l1:VethIflinkDebounce_failed_flag", None, 65536)
    prop._addConstant("l1:VethIflinkLog_failed_flag", None, 131072)
    prop._addConstant("l1:VethIfmdix_failed_flag", None, 262144)
    prop._addConstant("l1:VethIfmedium_failed_flag", None, 524288)
    prop._addConstant("l1:VethIfmgmtId_failed_flag", None, 1099511627776)
    prop._addConstant("l1:VethIfmodTs_failed_flag", None, 2305843009213693952)
    prop._addConstant("l1:VethIfmode_failed_flag", None, 1048576)
    prop._addConstant("l1:VethIfmonPolDn_failed_flag", None, 2199023255552)
    prop._addConstant("l1:VethIfmtu_failed_flag", None, 64)
    prop._addConstant("l1:VethIfname_failed_flag", None, 1)
    prop._addConstant("l1:VethIfpathSDescr_failed_flag", None, 2097152)
    prop._addConstant("l1:VethIfportT_failed_flag", None, 4194304)
    prop._addConstant("l1:VethIfprioFlowCtrl_failed_flag", None, 8388608)
    prop._addConstant("l1:VethIfreflectiveRelayEn_failed_flag", None, 16777216)
    prop._addConstant("l1:VethIfregmacAllHost_failed_flag", None, 17592186044416)
    prop._addConstant("l1:VethIfrouterMac_failed_flag", None, 33554432)
    prop._addConstant("l1:VethIfsnmpTrapSt_failed_flag", None, 128)
    prop._addConstant("l1:VethIfspanMode_failed_flag", None, 67108864)
    prop._addConstant("l1:VethIfspeed_failed_flag", None, 256)
    prop._addConstant("l1:VethIfswitchingSt_failed_flag", None, 512)
    prop._addConstant("l1:VethIftrunkLog_failed_flag", None, 134217728)
    prop._addConstant("l1:VethIfusage_failed_flag", None, 268435456)
    meta.props.add("ethpmCfgFailedBmp", prop)

    prop = PropMeta("str", "ethpmCfgFailedTs", "ethpmCfgFailedTs", 39210, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("ethpmCfgFailedTs", prop)

    prop = PropMeta("str", "ethpmCfgState", "ethpmCfgState", 39209, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("ethpmCfgState", prop)

    prop = PropMeta("str", "fcotChannelNumber", "fcotChannelNumber", 35489, PropCategory.REGULAR)
    prop.label = "Fcot Channel Number"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 96)]
    prop.defaultValue = 32
    prop.defaultValueStr = "Channel32"
    prop._addConstant("Channel1", "freq-191.35-wavelength-1566.72", 1)
    prop._addConstant("Channel10", "freq-191.80-wavelength-1563.05", 10)
    prop._addConstant("Channel11", "freq-191.85-wavelength-1562.64", 11)
    prop._addConstant("Channel12", "freq-191.90-wavelength-1562.23", 12)
    prop._addConstant("Channel13", "freq-191.95-wavelength-1561.83", 13)
    prop._addConstant("Channel14", "freq-192.00-wavelength-1561.42", 14)
    prop._addConstant("Channel15", "freq-192.05-wavelength-1561.01", 15)
    prop._addConstant("Channel16", "freq-192.10-wavelength-1560.61", 16)
    prop._addConstant("Channel17", "freq-192.15-wavelength-1560.20", 17)
    prop._addConstant("Channel18", "freq-192.20-wavelength-1559.79", 18)
    prop._addConstant("Channel19", "freq-192.25-wavelength-1559.39", 19)
    prop._addConstant("Channel2", "freq-191.40-wavelength-1566.31", 2)
    prop._addConstant("Channel20", "freq-192.30-wavelength-1558.98", 20)
    prop._addConstant("Channel21", "freq-192.35-wavelength-1558.58", 21)
    prop._addConstant("Channel22", "freq-192.40-wavelength-1558.17", 22)
    prop._addConstant("Channel23", "freq-192.45-wavelength-1557.77", 23)
    prop._addConstant("Channel24", "freq-192.50-wavelength-1557.36", 24)
    prop._addConstant("Channel25", "freq-192.55-wavelength-1556.96", 25)
    prop._addConstant("Channel26", "freq-192.60-wavelength-1556.55", 26)
    prop._addConstant("Channel27", "freq-192.65-wavelength-1556.15", 27)
    prop._addConstant("Channel28", "freq-192.70-wavelength-1555.75", 28)
    prop._addConstant("Channel29", "freq-192.75-wavelength-1555.34", 29)
    prop._addConstant("Channel3", "freq-191.45-wavelength-1565.90", 3)
    prop._addConstant("Channel30", "freq-192.80-wavelength-1554.94", 30)
    prop._addConstant("Channel31", "freq-192.85-wavelength-1554.54", 31)
    prop._addConstant("Channel32", "freq-192.90-wavelength-1554.13", 32)
    prop._addConstant("Channel33", "freq-192.95-wavelength-1553.73", 33)
    prop._addConstant("Channel34", "freq-193.00-wavelength-1553.33", 34)
    prop._addConstant("Channel35", "freq-193.05-wavelength-1552.93", 35)
    prop._addConstant("Channel36", "freq-193.10-wavelength-1552.52", 36)
    prop._addConstant("Channel37", "freq-193.15-wavelength-1552.12", 37)
    prop._addConstant("Channel38", "freq-193.20-wavelength-1551.72", 38)
    prop._addConstant("Channel39", "freq-193.25-wavelength-1551.32", 39)
    prop._addConstant("Channel4", "freq-191.50-wavelength-1565.50", 4)
    prop._addConstant("Channel40", "freq-193.30-wavelength-1550.92", 40)
    prop._addConstant("Channel41", "freq-193.35-wavelength-1550.52", 41)
    prop._addConstant("Channel42", "freq-193.40-wavelength-1550.12", 42)
    prop._addConstant("Channel43", "freq-193.45-wavelength-1549.72", 43)
    prop._addConstant("Channel44", "freq-193.50-wavelength-1549.32", 44)
    prop._addConstant("Channel45", "freq-193.55-wavelength-1548.91", 45)
    prop._addConstant("Channel46", "freq-193.60-wavelength-1548.51", 46)
    prop._addConstant("Channel47", "freq-193.65-wavelength-1548.11", 47)
    prop._addConstant("Channel48", "freq-193.70-wavelength-1547.72", 48)
    prop._addConstant("Channel49", "freq-193.75-wavelength-1547.32", 49)
    prop._addConstant("Channel5", "freq-191.55-wavelength-1565.09", 5)
    prop._addConstant("Channel50", "freq-193.80-wavelength-1546.92", 50)
    prop._addConstant("Channel51", "freq-193.85-wavelength-1546.52", 51)
    prop._addConstant("Channel52", "freq-193.90-wavelength-1546.12", 52)
    prop._addConstant("Channel53", "freq-193.95-wavelength-1545.72", 53)
    prop._addConstant("Channel54", "freq-194.00-wavelength-1545.32", 54)
    prop._addConstant("Channel55", "freq-194.05-wavelength-1544.92", 55)
    prop._addConstant("Channel56", "freq-194.10-wavelength-1544.53", 56)
    prop._addConstant("Channel57", "freq-194.15-wavelength-1544.13", 57)
    prop._addConstant("Channel58", "freq-194.20-wavelength-1543.73", 58)
    prop._addConstant("Channel59", "freq-194.25-wavelength-1543.33", 59)
    prop._addConstant("Channel6", "freq-191.60-wavelength-1564.68", 6)
    prop._addConstant("Channel60", "freq-194.30-wavelength-1542.94", 60)
    prop._addConstant("Channel61", "freq-194.35-wavelength-1542.54", 61)
    prop._addConstant("Channel62", "freq-194.40-wavelength-1542.14", 62)
    prop._addConstant("Channel63", "freq-194.45-wavelength-1541.75", 63)
    prop._addConstant("Channel64", "freq-194.50-wavelength-1541.35", 64)
    prop._addConstant("Channel65", "freq-194.55-wavelength-1540.95", 65)
    prop._addConstant("Channel66", "freq-194.60-wavelength-1540.56", 66)
    prop._addConstant("Channel67", "freq-194.65-wavelength-1540.16", 67)
    prop._addConstant("Channel68", "freq-194.70-wavelength-1539.77", 68)
    prop._addConstant("Channel69", "freq-194.75-wavelength-1539.37", 69)
    prop._addConstant("Channel7", "freq-191.65-wavelength-1564.27", 7)
    prop._addConstant("Channel70", "freq-194.80-wavelength-1538.98", 70)
    prop._addConstant("Channel71", "freq-194.85-wavelength-1538.58", 71)
    prop._addConstant("Channel72", "freq-194.90-wavelength-1538.19", 72)
    prop._addConstant("Channel73", "freq-194.95-wavelength-1537.79", 73)
    prop._addConstant("Channel74", "freq-195.00-wavelength-1537.40", 74)
    prop._addConstant("Channel75", "freq-195.05-wavelength-1537.00", 75)
    prop._addConstant("Channel76", "freq-195.10-wavelength-1536.61", 76)
    prop._addConstant("Channel77", "freq-195.15-wavelength-1536.22", 77)
    prop._addConstant("Channel78", "freq-195.20-wavelength-1535.82", 78)
    prop._addConstant("Channel79", "freq-195.25-wavelength-1535.43", 79)
    prop._addConstant("Channel8", "freq-191.70-wavelength-1563.86", 8)
    prop._addConstant("Channel80", "freq-195.30-wavelength-1535.04", 80)
    prop._addConstant("Channel81", "freq-195.35-wavelength-1534.64", 81)
    prop._addConstant("Channel82", "freq-195.40-wavelength-1534.25", 82)
    prop._addConstant("Channel83", "freq-195.45-wavelength-1533.86", 83)
    prop._addConstant("Channel84", "freq-195.50-wavelength-1533.47", 84)
    prop._addConstant("Channel85", "freq-195.55-wavelength-1533.07", 85)
    prop._addConstant("Channel86", "freq-195.60-wavelength-1532.68", 86)
    prop._addConstant("Channel87", "freq-195.65-wavelength-1532.29", 87)
    prop._addConstant("Channel88", "freq-195.70-wavelength-1531.90", 88)
    prop._addConstant("Channel89", "freq-195.75-wavelength-1531.51", 89)
    prop._addConstant("Channel9", "freq-191.75-wavelength-1563.45", 9)
    prop._addConstant("Channel90", "freq-195.80-wavelength-1531.12", 90)
    prop._addConstant("Channel91", "freq-195.85-wavelength-1530.72", 91)
    prop._addConstant("Channel92", "freq-195.90-wavelength-1530.33", 92)
    prop._addConstant("Channel93", "freq-195.95-wavelength-1529.94", 93)
    prop._addConstant("Channel94", "freq-196.00-wavelength-1529.55", 94)
    prop._addConstant("Channel95", "freq-196.05-wavelength-1529.16", 95)
    prop._addConstant("Channel96", "freq-196.10-wavelength-1528.77", 96)
    meta.props.add("fcotChannelNumber", prop)

    prop = PropMeta("str", "hostNicGrp", "hostNicGrp", 38939, PropCategory.REGULAR)
    prop.label = "HostNicGrp Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("hostNicGrp", prop)

    prop = PropMeta("str", "id", "id", 39108, PropCategory.REGULAR)
    prop.label = "Interface ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "inhBw", "inhBw", 3724, PropCategory.REGULAR)
    prop.label = "Inherit Bandwidth"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 100000000)]
    prop.defaultValue = 4294967295
    prop.defaultValueStr = "unspecified"
    prop._addConstant("unspecified", "unspecified", 4294967295)
    meta.props.add("inhBw", prop)

    prop = PropMeta("str", "isReflectiveRelayCfgSupported", "isReflectiveRelayCfgSupported", 33194, PropCategory.REGULAR)
    prop.label = "Reflective Relay Cfg Supported on Hardware (Yes/No)"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "Supported"
    prop._addConstant("Supported", "hardware-supports-reflective-relay-config", 1)
    prop._addConstant("Unsupported", "hardware-does-not-support-reflective-relay-config", 0)
    meta.props.add("isReflectiveRelayCfgSupported", prop)

    prop = PropMeta("str", "label", "label", 38938, PropCategory.REGULAR)
    prop.label = "HostNicGrp Label"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("label", prop)

    prop = PropMeta("str", "layer", "layer", 3717, PropCategory.REGULAR)
    prop.label = "Layer"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "Layer3"
    prop._addConstant("Layer2", "switched", 1)
    prop._addConstant("Layer3", "routed", 2)
    meta.props.add("layer", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "linkDebounce", "linkDebounce", 3720, PropCategory.REGULAR)
    prop.label = "Link Debounce Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 5000)]
    prop.defaultValue = 100
    prop.defaultValueStr = "100"
    meta.props.add("linkDebounce", prop)

    prop = PropMeta("str", "linkLog", "linkLog", 3726, PropCategory.REGULAR)
    prop.label = "Link Logging"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "default"
    prop._addConstant("default", "default", 1)
    prop._addConstant("disable", "disable", 3)
    prop._addConstant("enable", "enable", 2)
    meta.props.add("linkLog", prop)

    prop = PropMeta("str", "mdix", "mdix", 3718, PropCategory.REGULAR)
    prop.label = "MDIX"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "auto"
    prop._addConstant("auto", "auto", 1)
    prop._addConstant("mdi", "mdi", 2)
    prop._addConstant("mdi-x", "mdi-x", 3)
    meta.props.add("mdix", prop)

    prop = PropMeta("str", "medium", "medium", 3723, PropCategory.REGULAR)
    prop.label = "Medium"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "broadcast"
    prop._addConstant("broadcast", "broadcast", 1)
    prop._addConstant("p2p", "p2p", 2)
    meta.props.add("medium", prop)

    prop = PropMeta("str", "mgmtId", "mgmtId", 38930, PropCategory.REGULAR)
    prop.label = "Veth number configured by UCSM"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("mgmtId", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 3716, PropCategory.REGULAR)
    prop.label = "Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "trunk"
    prop._addConstant("access", "access", 1)
    prop._addConstant("fex-fabric", "fex-fabric", 3)
    prop._addConstant("qiq-tunnel-corePort", "qiq-tunnel-coreport", 5)
    prop._addConstant("qiq-tunnel-edgePort", "qiq-tunnel-edgeport", 4)
    prop._addConstant("trunk", "trunk", 2)
    prop._addConstant("trunk-doubleEncapPort", "trunk-doubleencapport", 6)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 39191, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "mtu", "mtu", 3714, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(576, 9216)]
    prop.defaultValue = 9000
    prop.defaultValueStr = "9000"
    meta.props.add("mtu", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operSt", "operSt", 38934, PropCategory.REGULAR)
    prop.label = "Vethernet State"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("attached", "veth-attached", 2)
    prop._addConstant("created", "veth-created", 1)
    prop._addConstant("detached", "veth-detached", 3)
    prop._addConstant("none", "none-state", 0)
    prop._addConstant("removed", "veth-removed", 4)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "operStQual", "operStQual", 38935, PropCategory.REGULAR)
    prop.label = "Port State Down Reason"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("admin-config-change", "admincfgchng", 44)
    prop._addConstant("admin-down", "disabled", 2)
    prop._addConstant("auth-fail", "xcvrauthfailed", 54)
    prop._addConstant("auth-pending", "authpending", 55)
    prop._addConstant("bit-err-rt-thres-exceeded", "bitethrshexc", 98)
    prop._addConstant("bpdu-guard-err-disable", "bpduguard-errdisable", 72)
    prop._addConstant("bundle-cfg-mismatch", "bundlecfgmismatch", 96)
    prop._addConstant("bundle-miscfg", "err-disabled", 99)
    prop._addConstant("cap-absent", "capabsent", 49)
    prop._addConstant("channel-admin-down", "channeldown", 24)
    prop._addConstant("channel-err-disabled", "channel-error-disabled-err-disabled", 25)
    prop._addConstant("channel-membership-update-in-progress", "channelupdate", 28)
    prop._addConstant("configuration-incomplete", "incomplete-config", 79)
    prop._addConstant("dcx-noack-in-100pdus", "dcxnoackin100pdus", 95)
    prop._addConstant("denied-due-to-port-binding", "invldbndng", 100)
    prop._addConstant("diag-failure-errdisable", "diag-failure-errdisable", 86)
    prop._addConstant("domain-addr-assign-failure-isolation", "domaddrassignfailisolated", 101)
    prop._addConstant("domain-invalid-rcf-received", "dominvlrcfrcvdisolated", 102)
    prop._addConstant("domain-isolation-unknown-reason", "domunkwnrsnisolated", 103)
    prop._addConstant("domain-manager-disabled", "dommgrdisisolated", 104)
    prop._addConstant("domain-max-retransmission-failure", "dommaxretransfailisolated", 38)
    prop._addConstant("domain-not-allowed-isolation", "domntallowedisolated", 105)
    prop._addConstant("domain-other-side-eport-isolated", "domothrsideeprtisolated", 106)
    prop._addConstant("domain-overlap-isolation", "domoverlapisolated", 107)
    prop._addConstant("dot1x-security-errdisable", "dot1xsecurityerrdisable", 94)
    prop._addConstant("dpvm-vsan-not-found", "dpvmvsanntfndsuspended", 108)
    prop._addConstant("dpvm-vsan-suspended", "dpvmvsansuspended", 109)
    prop._addConstant("ec-suspended-for-loop", "ecsuspendedforloop", 110)
    prop._addConstant("elp-failure-all-zero-peer-wwn-rcvd", "elpfailzpeer", 111)
    prop._addConstant("elp-failure-classf-param-err", "elpfailclassfisolated", 112)
    prop._addConstant("elp-failure-classn-param-err", "elpfailclassnisolated", 113)
    prop._addConstant("elp-failure-invalid-flow-ctl-param", "elpfailinvlflowctlisolated", 114)
    prop._addConstant("elp-failure-invalid-payload-size", "elpfailinvlpayldszisolated", 115)
    prop._addConstant("elp-failure-invalid-port-name", "elpfailinvlprtnameisolated", 116)
    prop._addConstant("elp-failure-invalid-switch-name", "elpfailinvlswnameisolated", 117)
    prop._addConstant("elp-failure-invalid-tx-bbcredit", "elpfailinvltxbbcrisolated", 118)
    prop._addConstant("elp-failure-isolation", "elpfailisolated", 119)
    prop._addConstant("elp-failure-loopback-detected", "elpfailloopdetectisolated", 120)
    prop._addConstant("elp-failure-ratov-edtov-mismatch", "elpfailraedtovisolated", 121)
    prop._addConstant("elp-failure-revision-mismatch", "elpfailrevmismatchisolated", 122)
    prop._addConstant("elp-failure-unknown-flow-ctl-code", "elpfailunkwnflowctlisolated", 123)
    prop._addConstant("epm-learn-err-disable", "epmlearn-errdisable", 76)
    prop._addConstant("eport-prohibited", "ficonprohibit", 124)
    prop._addConstant("epp-failure", "eppfail-err-disabled", 125)
    prop._addConstant("err-disabled", "err-disabled", 9)
    prop._addConstant("err-disabled-ip-conflict", "conflcterrdis", 18)
    prop._addConstant("err-disabled-link-flaps", "err-disabled-link-flaps", 203)
    prop._addConstant("esc-failure-isolation", "escfailisolated", 126)
    prop._addConstant("ethernet-interface-down", "interface-parentethdown", 43)
    prop._addConstant("ethernet-invalid-binding", "parentinvalidbinding", 84)
    prop._addConstant("ethernet-link-down", "parentethdown", 42)
    prop._addConstant("ethernet-vlan-down", "parentvlandown", 80)
    prop._addConstant("externally-disabled", "extdisabled", 127)
    prop._addConstant("fabric-bind-failure", "fabbindfailisolated", 132)
    prop._addConstant("fabric-binding-database-mismatch", "fabbinddbmismatchisolated", 128)
    prop._addConstant("fabric-binding-domain-invalid", "fabbinddominvlisolated", 129)
    prop._addConstant("fabric-binding-peer-not-responding", "fabbindpeerntrespisolated", 130)
    prop._addConstant("fabric-binding-swwn-not-found", "fabbindswwnntfoundisolated", 131)
    prop._addConstant("fabric-track", "fabrictrack", 78)
    prop._addConstant("fail", "fail", 4)
    prop._addConstant("fc-redirect-isolation", "fcreisolated", 135)
    prop._addConstant("fcid-allocation-failed", "fcidallcfail", 133)
    prop._addConstant("fcot-chksum-err", "sfp-checksum-error", 67)
    prop._addConstant("fcot-no-present", "sfpabsent", 32)
    prop._addConstant("fcot-vendor-not-supported", "sfp-vendor-not-supported-err-disabled", 33)
    prop._addConstant("fcsp-authent-failure", "fcspauthfailisolated", 134)
    prop._addConstant("fex-sfp-invalid", "fex-fabric-sfp-invalid", 60)
    prop._addConstant("ficon-being-enabled", "ficonenabled", 136)
    prop._addConstant("ficon-no-portnumber", "noficonportnm", 138)
    prop._addConstant("ficon-not-enabled", "ficonnten-err-disabled", 137)
    prop._addConstant("ficon-vsan-down", "ficondown", 139)
    prop._addConstant("ficon-vsan-duplicate-portnum", "dupport", 140)
    prop._addConstant("handshake-fail-errdisable", "intfailerrdis", 74)
    prop._addConstant("hot-standby-in-bundle", "htstdbyinbndl", 73)
    prop._addConstant("hw-disabled", "hwdisabled", 93)
    prop._addConstant("hw-fail", "faulty", 7)
    prop._addConstant("inactive", "inactive", 23)
    prop._addConstant("incompatible-admin-mode", "errdisabledincompatportmode-err-disabled", 34)
    prop._addConstant("incompatible-admin-rxbbcredit", "incompadmin-rxbbcr-err-disabled", 141)
    prop._addConstant("incompatible-admin-rxbbcredit-performance-buf", "incompadminperf-err-disabled", 142)
    prop._addConstant("incompatible-admin-rxbufsize", "incompadminrxbufsz-err-disabled", 143)
    prop._addConstant("incompatible-admin-speed", "errdisabledincompatportspeed-err-disabled", 35)
    prop._addConstant("incompatible-fecmode", "errdisabledincompatfecmode-err-disabled", 87)
    prop._addConstant("initializing", "init", 22)
    prop._addConstant("interface-removed", "ifremoved", 31)
    prop._addConstant("internal-rcf-in-progress", "intlrcf", 144)
    prop._addConstant("invalid-attachment", "invaldattch", 145)
    prop._addConstant("invalid-config", "invalidcfg", 146)
    prop._addConstant("invalid-fabric-binding-exchange", "invaldfabbindexisolated", 147)
    prop._addConstant("invalid-other-princ-efp-req-recd", "invalid", 148)
    prop._addConstant("invalid-sat-fabric-if", "invalidfbif", 59)
    prop._addConstant("ipqos-dcbxp-compat-failure", "ipqosdcbxpcompatfailure", 19)
    prop._addConstant("link-down", "parentethdown", 3)
    prop._addConstant("link-fail-credit-loss", "linkfailcrlossnotconnect", 149)
    prop._addConstant("link-fail-credit-loss-b2b", "linkfailcrlossb2bnotconnect", 150)
    prop._addConstant("link-fail-debounce-timeout", "linkfaildebouncetmoutnotconnect", 151)
    prop._addConstant("link-fail-line-card-port-shutdown", "linkfaillcprtshtnotconnect", 152)
    prop._addConstant("link-fail-lip-f8-rcvd", "linkfaillipf8rcvdnotconnect", 153)
    prop._addConstant("link-fail-lip-rcvd-b2b", "linkfailliprcvdb2bnotconnect", 154)
    prop._addConstant("link-fail-loss-of-signal", "linkfailsigloassnotconnect", 155)
    prop._addConstant("link-fail-loss-of-sync", "linkfailsynclossnotconnect", 156)
    prop._addConstant("link-fail-lr-rcvd-b2b", "linkfaillrrcvdb2bnotconnect", 157)
    prop._addConstant("link-fail-nos-rcvd", "linkfailnosrcvdnotconnect", 158)
    prop._addConstant("link-fail-ols-rcvd", "linkfailolsrcvdnotconnect", 159)
    prop._addConstant("link-fail-opny-ret-b2b", "linkfailopnyretnotconnect", 160)
    prop._addConstant("link-fail-opny-tmo-b2b", "linkfailopnytmonotconnect", 161)
    prop._addConstant("link-fail-port-init-failed", "linkfail", 162)
    prop._addConstant("link-fail-port-unusable", "linkfailportunusable", 85)
    prop._addConstant("link-fail-reset", "linkreset", 81)
    prop._addConstant("link-fail-rx-que-overflow", "linkfailrxqueovrflownotconnect", 163)
    prop._addConstant("link-fail-too-many-intr", "errdisabled", 164)
    prop._addConstant("link-failure", "notconnect", 20)
    prop._addConstant("link-flap-err", "linkflaperr", 17)
    prop._addConstant("link-up", "link-up-connected", 6)
    prop._addConstant("loopback-diag-failure", "faulty", 11)
    prop._addConstant("loopback-isolation", "loopbackisolated", 39)
    prop._addConstant("mac-pinning", "macpinning", 77)
    prop._addConstant("mcp-loop-err-disable", "mcploop-errdisable", 75)
    prop._addConstant("module-removed", "modremoved", 45)
    prop._addConstant("no-license", "portlicntavl", 5)
    prop._addConstant("no-trunk-oper-vsans-isolation", "notrunkopervsansisolated", 166)
    prop._addConstant("non-participating", "nonpcpt", 165)
    prop._addConstant("non-sticky-externally-disabled", "servdisab", 65)
    prop._addConstant("none", "connected", 47)
    prop._addConstant("npiv-not-enb-upstream", "npiv-upstream-port-not-available", 90)
    prop._addConstant("npm-no-ext-link", "npv-upstream-port-not-available", 88)
    prop._addConstant("offline", "offline", 21)
    prop._addConstant("ohms-external-lb-test", "ohmsextlbtestsuspended", 167)
    prop._addConstant("osm-e-port-up", "osmeprtuperrdisabled", 168)
    prop._addConstant("out-of-service", "outofservice", 169)
    prop._addConstant("parent-admin-down", "admindown-parentdown", 30)
    prop._addConstant("parent-down", "parentdown", 29)
    prop._addConstant("pause-rate-limit-err-disable", "pauseratelimit-errdisable", 92)
    prop._addConstant("peer-fcip-closed-tcp-connection", "peerdownclosed", 170)
    prop._addConstant("peer-fcip-reset-tcp-connection", "peerdownreset", 171)
    prop._addConstant("peer-not-support-bundles", "peerntsupportbundlesuspended", 172)
    prop._addConstant("poe-err-disabled", "poeerrdisable", 201)
    prop._addConstant("poe-insufficient-power", "insufficientpower", 178)
    prop._addConstant("port-act-license-not-available", "portlicntavl", 173)
    prop._addConstant("port-bind-failure", "portbindfailisolated", 174)
    prop._addConstant("port-blocked", "portblcked", 175)
    prop._addConstant("port-bringup-isolation", "portupisolated", 176)
    prop._addConstant("port-cap-fc-port-connector-type-err", "connctrerr", 177)
    prop._addConstant("port-channel-members-down", "noopermembers", 41)
    prop._addConstant("port-quiesced", "grcefulshtdwn", 199)
    prop._addConstant("port-reinit-limit", "port-reinit-threshold-reached", 89)
    prop._addConstant("port-vsan-mismatch-isolation", "portvsanmismatchisolated", 179)
    prop._addConstant("prefered-path-isolation", "preferedpathisolated", 180)
    prop._addConstant("proto-port-suspend", "portsuspnd", 27)
    prop._addConstant("qsa-adaptor-no-xcvr", "qsaadaptor", 202)
    prop._addConstant("rcf-in-progress", "rcfinprgrss", 181)
    prop._addConstant("router-mac-failure", "routrmacfail", 63)
    prop._addConstant("sat-fabric-if-down", "fabrcifdown", 58)
    prop._addConstant("sat-incompat-topo", "fex-identity-mismatch", 52)
    prop._addConstant("sat-not-configured", "fex-not-configured", 53)
    prop._addConstant("sdm-isolation", "sdmisolated", 182)
    prop._addConstant("sdp-timeout", "sdp-timeout/sfp-mismatch", 51)
    prop._addConstant("sfp-eth-compliant-err", "xcvrethcomplianceerr", 50)
    prop._addConstant("sfp-missing", "sfpabsent", 10)
    prop._addConstant("sfp-speed-mismatch", "xcvrspeedmismatch", 66)
    prop._addConstant("src-port-not-bound", "srcunbound", 183)
    prop._addConstant("stormctrl-err-disabled", "stormctrlerrdis", 200)
    prop._addConstant("suspend-by-mtu", "mtufailure", 61)
    prop._addConstant("suspend-by-vpc", "suspndbyvpc", 62)
    prop._addConstant("suspended", "suspnd", 26)
    prop._addConstant("suspended-by-mode", "suspended-by-mode", 36)
    prop._addConstant("suspended-by-speed", "suspended-by-speed", 37)
    prop._addConstant("suspended-by-wwn", "suspended-by-wwn", 184)
    prop._addConstant("suspended-due-to-minlinks", "suspendedminlinks", 56)
    prop._addConstant("suspended-due-to-no-lacp-pdus", "suspended(no-lacp-pdus)", 57)
    prop._addConstant("sw-fail", "faulty", 8)
    prop._addConstant("tcp-keep-alive-timer-expired", "tcpdownkeepalivetmrexpired", 185)
    prop._addConstant("tcp-max-retransmissions", "tcpdownmaxretransmission", 186)
    prop._addConstant("tcp-persist-timer-expired", "tcpdownpersisttmrexpired", 187)
    prop._addConstant("too-many-invalid-flogis", "invldflgis", 188)
    prop._addConstant("tov-mismatch", "tovmismatchisolated", 189)
    prop._addConstant("tracked-port-down", "trckdportdwn", 190)
    prop._addConstant("trunk-not-fully-active", "some", 191)
    prop._addConstant("tunnel-src-module-not-online", "srcmdoffline", 192)
    prop._addConstant("tunnel-src-port-removed", "srcprtremv", 193)
    prop._addConstant("two-switches-with-same-wwn", "dupwwn", 194)
    prop._addConstant("udld-aggressive-mode-link-failed", "udldaggr", 16)
    prop._addConstant("udld-empty-echo", "udldempecho", 15)
    prop._addConstant("udld-neighbor-mismatch", "udldmismatch", 14)
    prop._addConstant("udld-tx-rx-loop", "udldloop", 13)
    prop._addConstant("udld-unidir-detected", "udldunidir", 12)
    prop._addConstant("unknown", "down", 0)
    prop._addConstant("unsupported-platform-l3po", "unsupportedplatforml3po", 97)
    prop._addConstant("up", "up", 1)
    prop._addConstant("upgrade-in-progress", "modupgrade", 40)
    prop._addConstant("vfc-binding-invalid", "vfcbindinginvalid", 82)
    prop._addConstant("virtual-ivr-domain-overlap-isolation", "virtualivrdomoverlapisolated", 195)
    prop._addConstant("vlan-not-fcoe-enabled", "vlannotfcoeenabled", 83)
    prop._addConstant("vpc-cfg-in-progress", "vpcconfiginprogress", 70)
    prop._addConstant("vpc-no-response-from-peer", "norespfrmvpc", 71)
    prop._addConstant("vpc-peer-link-down", "vpcpeerlinkdown", 69)
    prop._addConstant("vrf-unusable", "vrfunusable", 46)
    prop._addConstant("vsan-mismatch-isolation", "vsanmismatchisolated", 196)
    prop._addConstant("vsan-mismatch-upstream", "vsan-mismatch-with-upstream-port", 91)
    prop._addConstant("xcvr-auth-failed", "xcvrauthfailed", 64)
    prop._addConstant("xcvr-initializing", "sfpinit", 48)
    prop._addConstant("xcvr-invalid", "transceiver-validation-failed", 68)
    prop._addConstant("zone-merge-failure-isolation", "zonemergefailisolated", 197)
    prop._addConstant("zone-remote-no-resp-isolation", "zoneremotenorespisolated", 198)
    meta.props.add("operStQual", prop)

    prop = PropMeta("str", "pathSDescr", "pathSDescr", 22628, PropCategory.REGULAR)
    prop.label = "Path Selector Description"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("pathSDescr", prop)

    prop = PropMeta("str", "portT", "portT", 3729, PropCategory.REGULAR)
    prop.label = "Port Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("eobc", "eobc", 1)
    prop._addConstant("extchfp", "extended-chassis-fabric-port", 6)
    prop._addConstant("extchhp", "extended-chassis-host-port", 5)
    prop._addConstant("fab", "fabric-port", 3)
    prop._addConstant("leaf", "access-port", 4)
    prop._addConstant("mgmt", "management-port", 2)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("portT", prop)

    prop = PropMeta("str", "prioFlowCtrl", "prioFlowCtrl", 24953, PropCategory.REGULAR)
    prop.label = "Priority Flow Control mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "auto"
    prop._addConstant("auto", "auto", 0)
    prop._addConstant("off", "off", 1)
    prop._addConstant("on", "on", 2)
    meta.props.add("prioFlowCtrl", prop)

    prop = PropMeta("str", "reflectiveRelayEn", "reflectiveRelayEn", 32648, PropCategory.REGULAR)
    prop.label = "Reflective Relay Enable"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "off"
    prop._addConstant("off", "reflective-relay-off", 0)
    prop._addConstant("on", "reflective-relay-on", 1)
    meta.props.add("reflectiveRelayEn", prop)

    prop = PropMeta("str", "regmacAllHost", "regmacAllHost", 38940, PropCategory.REGULAR)
    prop.label = "Veth regmac install to all-host."
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("regmacAllHost", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "routerMac", "routerMac", 3728, PropCategory.REGULAR)
    prop.label = "Router MAC"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "not-applicable"
    prop._addConstant("not-applicable", "n/a", 0)
    meta.props.add("routerMac", prop)

    prop = PropMeta("str", "snmpTrapSt", "snmpTrapSt", 3715, PropCategory.REGULAR)
    prop.label = "Snmp Trap State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enable"
    prop._addConstant("disable", "disable", 2)
    prop._addConstant("enable", "enable", 1)
    meta.props.add("snmpTrapSt", prop)

    prop = PropMeta("str", "spanMode", "spanMode", 3725, PropCategory.REGULAR)
    prop.label = "Span Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "not-a-span-dest"
    prop._addConstant("not-a-span-dest", "not-a-span-dest", 1)
    prop._addConstant("span-dest", "span-dest", 2)
    prop._addConstant("span-dest-fwd", "span-dest-fwd", 3)
    prop._addConstant("span-dest-fwd-learn", "span-dest-fwd-learn", 4)
    meta.props.add("spanMode", prop)

    prop = PropMeta("str", "speed", "speed", 3712, PropCategory.REGULAR)
    prop.label = "Speed"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 10
    prop.defaultValueStr = "inherit"
    prop._addConstant("100G", "100-gbps", 7)
    prop._addConstant("100M", "100-mbps", 1)
    prop._addConstant("10G", "10-gbps", 3)
    prop._addConstant("1G", "1-gbps", 2)
    prop._addConstant("200G", "200-gbps", 8)
    prop._addConstant("25G", "25-gbps", 4)
    prop._addConstant("400G", "400-gbps", 9)
    prop._addConstant("40G", "40-gbps", 5)
    prop._addConstant("50G", "50-gbps", 6)
    prop._addConstant("inherit", "inherit", 10)
    prop._addConstant("unknown", "unspecified", 0)
    meta.props.add("speed", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "switchingSt", "switchingSt", 3710, PropCategory.REGULAR)
    prop.label = "Switching State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 0)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("switchingSt", prop)

    prop = PropMeta("str", "trunkLog", "trunkLog", 3727, PropCategory.REGULAR)
    prop.label = "Trunk Logging"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "default"
    prop._addConstant("default", "default", 1)
    prop._addConstant("disable", "disable", 3)
    prop._addConstant("enable", "enable", 2)
    meta.props.add("trunkLog", prop)

    prop = PropMeta("str", "usage", "usage", 3730, PropCategory.REGULAR)
    prop.label = "Port Usage"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "discovery"
    prop._addConstant("blacklist", "black-listed", 32)
    prop._addConstant("controller", "controller", 16)
    prop._addConstant("discovery", "discovery", 1)
    prop._addConstant("epg", "epg", 2)
    prop._addConstant("fabric", "fabric", 4)
    prop._addConstant("fabric-ext", "fabric-external", 256)
    prop._addConstant("infra", "infra", 8)
    prop._addConstant("out-of-service", "out-of-service", 128)
    prop._addConstant("span", "span", 64)
    meta.props.add("usage", prop)

    meta.namingProps.append(getattr(meta.props, "id"))
    getattr(meta.props, "id").needDelimiter = True

    meta.deploymentCategory = DeploymentCategory("interface", "Interface")
    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Path"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("l1EthIfToEPg", "EPG", "cobra.model.fv.EPg"))

    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

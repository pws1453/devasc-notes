# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class InstPol(Mo):
    """
    

    """

    meta = ClassMeta("cobra.model.mcp.InstPol")

    meta.moClassName = "mcpInstPol"
    meta.rnFormat = "mcpInstP-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Mis-cabling Protocol Instance Policy"
    meta.writeAccessMask = 0x102000000001
    meta.readAccessMask = 0x4106010020001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.mcp.RtMcpInstPolCons")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.mcp.RtToMcpInstPol")
    meta.childClasses.add("cobra.model.mcp.RtResMcpInstPol")
    meta.childClasses.add("cobra.model.mcp.RtSysMcpInstPolCons")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.mcp.RtSysMcpInstPolCons", "rtsysMcpInstPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mcp.RtMcpInstPolCons", "rtmcpInstPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mcp.RtResMcpInstPol", "rtresMcpInstPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mcp.RtToMcpInstPol", "rttoMcpInstPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.infra.Infra")

    meta.superClasses.add("cobra.model.fabric.ProtoPol")
    meta.superClasses.add("cobra.model.fabric.ProtoInstPol")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Def")
    meta.superClasses.add("cobra.model.fabric.L2InstPol")

    meta.rnPrefixes = [
        ('mcpInstP-', True),
    ]

    prop = PropMeta("str", "adminSt", "adminSt", 18079, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "annotation", "annotation", 38144, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 26470, PropCategory.REGULAR)
    prop.label = "Controls"
    prop.isConfig = True
    prop.isAdmin = True
    prop._addConstant("pdu-per-vlan", "enable-mcp-pdu-per-vlan", 256)
    prop._addConstant("stateful-ha", "stateful-ha", 1)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "descr", "descr", 5579, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 40283, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "initDelayTime", "initDelayTime", 19116, PropCategory.REGULAR)
    prop.label = "Init Delay Time"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 1800)]
    prop.defaultValue = 180
    prop.defaultValueStr = "180"
    meta.props.add("initDelayTime", prop)

    prop = PropMeta("str", "key", "key", 16871, PropCategory.REGULAR)
    prop.label = "Secret Key"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isPassword = True
    meta.props.add("key", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "loopDetectMult", "loopDetectMult", 17620, PropCategory.REGULAR)
    prop.label = "Loop Detection Multiplier"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 255)]
    prop.defaultValue = 3
    prop.defaultValueStr = "3"
    meta.props.add("loopDetectMult", prop)

    prop = PropMeta("str", "loopProtectAct", "loopProtectAct", 18078, PropCategory.REGULAR)
    prop.label = "Loop Protection Action"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "port-disable"
    prop._addConstant("port-disable", "port-disable", 1)
    meta.props.add("loopProtectAct", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 17461, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15230, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15231, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "txFreq", "txFreq", 16870, PropCategory.REGULAR)
    prop.label = "Transmission Frequency"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 300)]
    prop.defaultValue = 2
    prop.defaultValueStr = "2"
    meta.props.add("txFreq", prop)

    prop = PropMeta("str", "txFreqMsec", "txFreqMsec", 37054, PropCategory.REGULAR)
    prop.label = "Transmission Frequency"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 999)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("txFreqMsec", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Policy"

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

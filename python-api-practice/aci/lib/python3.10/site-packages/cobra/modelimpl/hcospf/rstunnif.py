# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class RsTunnIf(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = SourceRelationMeta("cobra.model.hcospf.RsTunnIf", "cobra.model.hctunn.If")
    meta.cardinality = SourceRelationMeta.ONE_TO_M

    meta.moClassName = "hcospfRsTunnIf"
    meta.rnFormat = "rstunnIf-[%(tDn)s]"
    meta.category = MoCategory.RELATIONSHIP_TO_LOCAL
    meta.label = "Tunnel If Attachment"
    meta.writeAccessMask = 0x8008021042001
    meta.readAccessMask = 0x8008021042001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.hcospf.OspfTunnIfOper")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcospf.OspfTunnIfOper", "oper"))

    meta.parentClasses.add("cobra.model.hcospf.Dom")

    meta.superClasses.add("cobra.model.reln.Inst")
    meta.superClasses.add("cobra.model.hcospf.ARsToIf")
    meta.superClasses.add("cobra.model.reln.To")

    meta.rnPrefixes = [
        ('rstunnIf-', True),
    ]

    prop = PropMeta("str", "area", "area", 50445, PropCategory.REGULAR)
    prop.label = "Area ID"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("area", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cost", "cost", 50443, PropCategory.REGULAR)
    prop.label = "Cost"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 65535)]
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("cost", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 50437, PropCategory.REGULAR)
    prop.label = "Controls"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("advert-subnet", "advertise-subnet", 4)
    prop._addConstant("bfd", "bfd", 8)
    prop._addConstant("mtu-ignore", "mtu-ignore", 2)
    prop._addConstant("passive", "passive-participation", 1)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "deadIntvl", "deadIntvl", 50440, PropCategory.REGULAR)
    prop.label = "Dead Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 65535)]
    prop.defaultValue = 40
    prop.defaultValueStr = "40"
    meta.props.add("deadIntvl", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "forceResolve", "forceResolve", 107, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = True
    prop.defaultValueStr = "yes"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("forceResolve", prop)

    prop = PropMeta("str", "helloIntvl", "helloIntvl", 50439, PropCategory.REGULAR)
    prop.label = "Hello Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 65535)]
    prop.defaultValue = 10
    prop.defaultValueStr = "10"
    meta.props.add("helloIntvl", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "nwType", "nwType", 50438, PropCategory.REGULAR)
    prop.label = "Network Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("bcast", "broadcast", 2)
    prop._addConstant("p2p", "point-to-point", 1)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("nwType", prop)

    prop = PropMeta("str", "pfxSuppress", "pfxSuppress", 50446, PropCategory.REGULAR)
    prop.label = "Prefix Suppression"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "inherit"
    prop._addConstant("disable", "disable", 2)
    prop._addConstant("enable", "enable", 1)
    prop._addConstant("inherit", "inherit", 0)
    meta.props.add("pfxSuppress", prop)

    prop = PropMeta("str", "prio", "prio", 50442, PropCategory.REGULAR)
    prop.label = "Priority"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 255)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("prio", prop)

    prop = PropMeta("str", "rType", "rType", 106, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "mo"
    prop._addConstant("local", "local", 3)
    prop._addConstant("mo", "mo", 1)
    prop._addConstant("service", "service", 2)
    meta.props.add("rType", prop)

    prop = PropMeta("str", "rexmitIntvl", "rexmitIntvl", 50441, PropCategory.REGULAR)
    prop.label = "Retransmit Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 65535)]
    prop.defaultValue = 5
    prop.defaultValueStr = "5"
    meta.props.add("rexmitIntvl", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "state", "state", 103, PropCategory.REGULAR)
    prop.label = "State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unformed"
    prop._addConstant("cardinality-violation", "cardinality-violation", 5)
    prop._addConstant("formed", "formed", 1)
    prop._addConstant("invalid-target", "invalid-target", 4)
    prop._addConstant("missing-target", "missing-target", 2)
    prop._addConstant("unformed", "unformed", 0)
    meta.props.add("state", prop)

    prop = PropMeta("str", "stateQual", "stateQual", 104, PropCategory.REGULAR)
    prop.label = "State Qualifier"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("default-target", "default-target", 2)
    prop._addConstant("mismatch-target", "mismatch-target", 1)
    prop._addConstant("none", "none", 0)
    meta.props.add("stateQual", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tCl", "tCl", 51370, PropCategory.REGULAR)
    prop.label = "Target-class"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 15009
    prop.defaultValueStr = "hctunnIf"
    prop._addConstant("hctunnIf", None, 15009)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("tCl", prop)

    prop = PropMeta("str", "tDn", "tDn", 51369, PropCategory.REGULAR)
    prop.label = "Target-dn"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("tDn", prop)

    prop = PropMeta("str", "tType", "tType", 105, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "mo"
    prop._addConstant("all", "all", 2)
    prop._addConstant("mo", "mo", 1)
    prop._addConstant("name", "name", 0)
    meta.props.add("tType", prop)

    prop = PropMeta("str", "xmitDelay", "xmitDelay", 50444, PropCategory.REGULAR)
    prop.label = "Transmit Delay"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 450)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("xmitDelay", prop)

    meta.namingProps.append(getattr(meta.props, "tDn"))
    getattr(meta.props, "tDn").needDelimiter = True

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcbgpPeer", "From hcloudCsr to hcbgpPeer", "cobra.model.hcbgp.Peer"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcl3LoopbackRoutedIf", "From hcloudCsr to hcl3LoopbackRoutedIf", "cobra.model.hcl3.LoopbackRoutedIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcospfRsTunnIf", "From hcloudCsr to hcospfRsTunnIf", "cobra.model.hcospf.RsTunnIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHctunnIf", "From hcloudCsr to hctunnIf", "cobra.model.hctunn.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcloudNetworkInterface", "From hcloudCsr to hcloudNetworkInterface", "cobra.model.hcloud.NetworkInterface"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcloudEndPointOper", "From hcloudCsr to hcloudEndPointOper", "cobra.model.hcloud.EndPointOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcl1PhysicalIf", "From hcloudCsr to hcl1PhysicalIf", "cobra.model.hcl1.PhysicalIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToCloudCtxProfile", "From hcloudCsr to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcl3Vrf", "From hcloudCsr to hcl3Vrf", "cobra.model.hcl3.Vrf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcloudInstanceOper", "From hcloudCsr to hcloudInstanceOper", "cobra.model.hcloud.InstanceOper"))

    def __init__(self, parentMoOrDn, tDn, markDirty=True, **creationProps):
        namingVals = [tDn]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class DomStats(Mo):
    """
    PIM domain statistics.

    """

    meta = ClassMeta("cobra.model.pim.DomStats")

    meta.moClassName = "pimDomStats"
    meta.rnFormat = "domstats"
    meta.category = MoCategory.REGULAR
    meta.label = "DomStats"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.parentClasses.add("cobra.model.pim.Dom")

    meta.superClasses.add("cobra.model.rtdmc.DomStats")
    meta.superClasses.add("cobra.model.rtdmc.ADomStats")

    meta.rnPrefixes = [
        ('domstats', False),
    ]

    prop = PropMeta("str", "autoRPAnnouncesRcvd", "autoRPAnnouncesRcvd", 27101, PropCategory.REGULAR)
    prop.label = "RP announcements received"
    prop.isOper = True
    meta.props.add("autoRPAnnouncesRcvd", prop)

    prop = PropMeta("str", "autoRPAnnouncesSent", "autoRPAnnouncesSent", 27100, PropCategory.REGULAR)
    prop.label = "RP announcements sent"
    prop.isOper = True
    meta.props.add("autoRPAnnouncesSent", prop)

    prop = PropMeta("str", "autoRPDiscoveriesRcvd", "autoRPDiscoveriesRcvd", 27103, PropCategory.REGULAR)
    prop.label = "RP discoveries received"
    prop.isOper = True
    meta.props.add("autoRPDiscoveriesRcvd", prop)

    prop = PropMeta("str", "autoRPDiscoveriesSent", "autoRPDiscoveriesSent", 27102, PropCategory.REGULAR)
    prop.label = "RP discoveries sent"
    prop.isOper = True
    meta.props.add("autoRPDiscoveriesSent", prop)

    prop = PropMeta("str", "autoRPFromBorderIF", "autoRPFromBorderIF", 27105, PropCategory.REGULAR)
    prop.label = "Auto RP from border interface"
    prop.isOper = True
    meta.props.add("autoRPFromBorderIF", prop)

    prop = PropMeta("str", "autoRPInvalidType", "autoRPInvalidType", 27106, PropCategory.REGULAR)
    prop.label = "Auto RP invalid type"
    prop.isOper = True
    meta.props.add("autoRPInvalidType", prop)

    prop = PropMeta("str", "autoRPRPFFailed", "autoRPRPFFailed", 27104, PropCategory.REGULAR)
    prop.label = "Auto RP RPF Failed"
    prop.isOper = True
    meta.props.add("autoRPRPFFailed", prop)

    prop = PropMeta("str", "autoRPRcvdLisNotConf", "autoRPRcvdLisNotConf", 27108, PropCategory.REGULAR)
    prop.label = "Auto RP received but listen not configured"
    prop.isOper = True
    meta.props.add("autoRPRcvdLisNotConf", prop)

    prop = PropMeta("str", "autoRPTTLExp", "autoRPTTLExp", 27107, PropCategory.REGULAR)
    prop.label = "Auto RP TTL expired"
    prop.isOper = True
    meta.props.add("autoRPTTLExp", prop)

    prop = PropMeta("str", "bsrBsFromBorderIF", "bsrBsFromBorderIF", 27094, PropCategory.REGULAR)
    prop.label = "Bootstrap message from border interface"
    prop.isOper = True
    meta.props.add("bsrBsFromBorderIF", prop)

    prop = PropMeta("str", "bsrBsFromNonNbr", "bsrBsFromNonNbr", 27093, PropCategory.REGULAR)
    prop.label = "Bootstrap message from non-neighbor"
    prop.isOper = True
    meta.props.add("bsrBsFromNonNbr", prop)

    prop = PropMeta("str", "bsrBsLenErr", "bsrBsLenErr", 27095, PropCategory.REGULAR)
    prop.label = "Bootstrap length error"
    prop.isOper = True
    meta.props.add("bsrBsLenErr", prop)

    prop = PropMeta("str", "bsrBsRPFFail", "bsrBsRPFFail", 27096, PropCategory.REGULAR)
    prop.label = "Bootstrap messages for which RPF Failed"
    prop.isOper = True
    meta.props.add("bsrBsRPFFail", prop)

    prop = PropMeta("str", "bsrBsRcvd", "bsrBsRcvd", 27090, PropCategory.REGULAR)
    prop.label = "Bootstrap message received"
    prop.isOper = True
    meta.props.add("bsrBsRcvd", prop)

    prop = PropMeta("str", "bsrBsRcvdLisNotConf", "bsrBsRcvdLisNotConf", 27097, PropCategory.REGULAR)
    prop.label = "Bootstrap received listen not configured"
    prop.isOper = True
    meta.props.add("bsrBsRcvdLisNotConf", prop)

    prop = PropMeta("str", "bsrBsSent", "bsrBsSent", 27089, PropCategory.REGULAR)
    prop.label = "Bootstrap message sent"
    prop.isOper = True
    meta.props.add("bsrBsSent", prop)

    prop = PropMeta("str", "bsrCRPFromBorderIF", "bsrCRPFromBorderIF", 27098, PropCategory.REGULAR)
    prop.label = "Bootstrap Candidate RP From border interface"
    prop.isOper = True
    meta.props.add("bsrCRPFromBorderIF", prop)

    prop = PropMeta("str", "bsrCRPRcvd", "bsrCRPRcvd", 27092, PropCategory.REGULAR)
    prop.label = "Candidate RP message received"
    prop.isOper = True
    meta.props.add("bsrCRPRcvd", prop)

    prop = PropMeta("str", "bsrCRPRcvdLisNotConf", "bsrCRPRcvdLisNotConf", 27099, PropCategory.REGULAR)
    prop.label = "Bootstrap candidate RP received but listen not configured"
    prop.isOper = True
    meta.props.add("bsrCRPRcvdLisNotConf", prop)

    prop = PropMeta("str", "bsrCRPSent", "bsrCRPSent", 27091, PropCategory.REGULAR)
    prop.label = "Candidate RP message sent"
    prop.isOper = True
    meta.props.add("bsrCRPSent", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cpRPFFailNoRoute", "cpRPFFailNoRoute", 27109, PropCategory.REGULAR)
    prop.label = "Control plane RPF fail due to no route"
    prop.isOper = True
    meta.props.add("cpRPFFailNoRoute", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dpCrtRouteStateCnt", "dpCrtRouteStateCnt", 27112, PropCategory.REGULAR)
    prop.label = "Data Plane create route state count"
    prop.isOper = True
    meta.props.add("dpCrtRouteStateCnt", prop)

    prop = PropMeta("str", "dpNoMcastState", "dpNoMcastState", 27111, PropCategory.REGULAR)
    prop.label = "Data Plane no multicast state found"
    prop.isOper = True
    meta.props.add("dpNoMcastState", prop)

    prop = PropMeta("str", "dpRPFFailNoRoute", "dpRPFFailNoRoute", 27110, PropCategory.REGULAR)
    prop.label = "Data Plane RPF fail due to no route"
    prop.isOper = True
    meta.props.add("dpRPFFailNoRoute", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "nullRegRcvd", "nullRegRcvd", 27121, PropCategory.REGULAR)
    prop.label = "Null Registers Received"
    prop.isOper = True
    meta.props.add("nullRegRcvd", prop)

    prop = PropMeta("str", "nullRegSent", "nullRegSent", 27120, PropCategory.REGULAR)
    prop.label = "Null Registers Sent"
    prop.isOper = True
    meta.props.add("nullRegSent", prop)

    prop = PropMeta("str", "regRcvd", "regRcvd", 27119, PropCategory.REGULAR)
    prop.label = "Registers Received"
    prop.isOper = True
    meta.props.add("regRcvd", prop)

    prop = PropMeta("str", "regRcvdAndNotRP", "regRcvdAndNotRP", 27088, PropCategory.REGULAR)
    prop.label = "Registers Received but not RP"
    prop.isOper = True
    meta.props.add("regRcvdAndNotRP", prop)

    prop = PropMeta("str", "regRcvdBiDir", "regRcvdBiDir", 27125, PropCategory.REGULAR)
    prop.label = "Registers Received for BiDir"
    prop.isOper = True
    meta.props.add("regRcvdBiDir", prop)

    prop = PropMeta("str", "regRcvdSSM", "regRcvdSSM", 27124, PropCategory.REGULAR)
    prop.label = "Registers Received for SSM"
    prop.isOper = True
    meta.props.add("regRcvdSSM", prop)

    prop = PropMeta("str", "regSent", "regSent", 27118, PropCategory.REGULAR)
    prop.label = "Registers Sent"
    prop.isOper = True
    meta.props.add("regSent", prop)

    prop = PropMeta("str", "regStopRcvd", "regStopRcvd", 27123, PropCategory.REGULAR)
    prop.label = "Register Stop Received"
    prop.isOper = True
    meta.props.add("regStopRcvd", prop)

    prop = PropMeta("str", "regStopSent", "regStopSent", 27122, PropCategory.REGULAR)
    prop.label = "Register Stop Sent"
    prop.isOper = True
    meta.props.add("regStopSent", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class L3TunnelIfP(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.cloud.L3TunnelIfP")

    meta.moClassName = "cloudL3TunnelIfP"
    meta.rnFormat = "l3tunnelifp-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "L3 Tunnel Interface Policy"
    meta.writeAccessMask = 0x1002001
    meta.readAccessMask = 0x1002001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.cloud.IpSecTunnelIfP")
    meta.childClasses.add("cobra.model.cloud.L3IfP")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.cloud.Ipv4AddrP")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.cloud.IpSecTunnelIfP", "ipsectunnelifp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cloud.Ipv4AddrP", "ipv4addrp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cloud.L3IfP", "l3ifp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.cloud.HostIfP")

    meta.superClasses.add("cobra.model.cloud.AL3TunnelIfP")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Def")
    meta.superClasses.add("cobra.model.naming.NamedObject")

    meta.rnPrefixes = [
        ('l3tunnelifp-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 51524, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 5579, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 51525, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "logicalDn", "logicalDn", 52207, PropCategory.REGULAR)
    prop.label = "Logical Model Mo Dn"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("logicalDn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 51468, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 50700, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "outerDstAddr", "outerDstAddr", 50134, PropCategory.REGULAR)
    prop.label = "Outer Tunnel Destination Address"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("outerDstAddr", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15230, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15231, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tunnelDestinationType", "tunnelDestinationType", 55535, PropCategory.REGULAR)
    prop.label = "Tunnel's Destination Type: On-prem/Cloud-to-cloud/Internal"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "internal"
    prop._addConstant("cloud", "cloud-to-cloud", 2)
    prop._addConstant("internal", "internal", 0)
    prop._addConstant("on-prem", "on-prem", 1)
    meta.props.add("tunnelDestinationType", prop)

    prop = PropMeta("str", "tunnelType", "tunnelType", 50133, PropCategory.REGULAR)
    prop.label = "Tunnel Type"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "ipsec"
    prop._addConstant("ipsec", "ipsec-tunnel", 0)
    meta.props.add("tunnelType", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHcbgpPeerOper", "cloud:L3TunnelIfP to hcbgp:PeerOper", "cobra.model.hcbgp.PeerOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHcbgpPeer", "cloud:L3TunnelIfP to hcbgp:Peer", "cobra.model.hcbgp.Peer"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHcl3LoopbackRoutedIfOper", "cloud:L3TunnelIfP to hcl3:LoopbackRoutedIfOper", "cobra.model.hcl3.LoopbackRoutedIfOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHcl3LoopbackRoutedIf", "cloud:L3TunnelIfP to hcl3:LoopbackRoutedIf", "cobra.model.hcl3.LoopbackRoutedIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHcloudCsr", "cloud:L3TunnelIfP to hcloud:Csr", "cobra.model.hcloud.Csr"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHcospfRsTunnIf", "cloud:L3TunnelIfP to hcospf:OspfTunnIf", "cobra.model.hcospf.RsTunnIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHcospfOspfTunnIfOper", "cloud:L3TunnelIfP to hcospf:OspfTunnIfOper", "cobra.model.hcospf.OspfTunnIfOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHctunnIfOper", "cloud:L3TunnelIfP to hctunn:IfOper", "cobra.model.hctunn.IfOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToCloudRegion", "cloud:L3TunnelIfP to cloud:Region", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudL3TunnelIfPToHctunnIf", "cloud:L3TunnelIfP to hctunn:If", "cobra.model.hctunn.If"))

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

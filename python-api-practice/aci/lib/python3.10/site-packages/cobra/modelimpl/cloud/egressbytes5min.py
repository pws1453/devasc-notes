# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class EgressBytes5min(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = StatsClassMeta("cobra.model.cloud.EgressBytes5min", "cloud egress bytes")

    counter = CounterMeta("drop", CounterCategory.COUNTER, "packets", "egress drop packets")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "dropLast"
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "dropCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "dropPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "dropMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "dropMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "dropAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "dropSpct"
    counter._propRefs[PropCategory.IMPLICIT_BASELINE] = "dropBase"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "dropThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "dropTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "dropTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "dropRate"
    meta._counters.append(counter)

    counter = CounterMeta("unicast", CounterCategory.COUNTER, "bytes", "egress unicast bytes")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "unicastLast"
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "unicastCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "unicastPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "unicastMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "unicastMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "unicastAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "unicastSpct"
    counter._propRefs[PropCategory.IMPLICIT_BASELINE] = "unicastBase"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "unicastThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "unicastTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "unicastTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "unicastRate"
    meta._counters.append(counter)

    meta.moClassName = "cloudEgressBytes5min"
    meta.rnFormat = "CDcloudEgressBytes5min"
    meta.category = MoCategory.STATS_CURRENT
    meta.label = "current cloud egress bytes stats in 5 minute"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.parentClasses.add("cobra.model.cloud.EpInfoHolder")
    meta.parentClasses.add("cobra.model.cloud.RgInfoHolder")

    meta.superClasses.add("cobra.model.stats.Item")
    meta.superClasses.add("cobra.model.stats.Curr")
    meta.superClasses.add("cobra.model.cloud.EgressBytes")

    meta.rnPrefixes = [
        ('CDcloudEgressBytes5min', False),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cnt", "cnt", 16212, PropCategory.REGULAR)
    prop.label = "Number of Collections During this Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("cnt", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dropAvg", "dropAvg", 50934, PropCategory.IMPLICIT_AVG)
    prop.label = "egress drop packets average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropAvg", prop)

    prop = PropMeta("str", "dropBase", "dropBase", 50929, PropCategory.IMPLICIT_BASELINE)
    prop.label = "egress drop packets baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBase", prop)

    prop = PropMeta("str", "dropCum", "dropCum", 50930, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "egress drop packets cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropCum", prop)

    prop = PropMeta("str", "dropLast", "dropLast", 50928, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "egress drop packets current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropLast", prop)

    prop = PropMeta("str", "dropMax", "dropMax", 50933, PropCategory.IMPLICIT_MAX)
    prop.label = "egress drop packets maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropMax", prop)

    prop = PropMeta("str", "dropMin", "dropMin", 50932, PropCategory.IMPLICIT_MIN)
    prop.label = "egress drop packets minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropMin", prop)

    prop = PropMeta("str", "dropPer", "dropPer", 50931, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "egress drop packets periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropPer", prop)

    prop = PropMeta("str", "dropRate", "dropRate", 50939, PropCategory.IMPLICIT_RATE)
    prop.label = "egress drop packets rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropRate", prop)

    prop = PropMeta("str", "dropSpct", "dropSpct", 50935, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "egress drop packets suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropSpct", prop)

    prop = PropMeta("str", "dropThr", "dropThr", 50936, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "egress drop packets thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("dropThr", prop)

    prop = PropMeta("str", "dropTr", "dropTr", 50938, PropCategory.IMPLICIT_TREND)
    prop.label = "egress drop packets trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropTr", prop)

    prop = PropMeta("str", "dropTrBase", "dropTrBase", 50937, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "egress drop packets trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropTrBase", prop)

    prop = PropMeta("str", "lastCollOffset", "lastCollOffset", 111, PropCategory.REGULAR)
    prop.label = "Collection Length"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("lastCollOffset", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "repIntvEnd", "repIntvEnd", 110, PropCategory.REGULAR)
    prop.label = "Reporting End Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvEnd", prop)

    prop = PropMeta("str", "repIntvStart", "repIntvStart", 109, PropCategory.REGULAR)
    prop.label = "Reporting Start Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvStart", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "unicastAvg", "unicastAvg", 50968, PropCategory.IMPLICIT_AVG)
    prop.label = "egress unicast bytes average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("unicastAvg", prop)

    prop = PropMeta("str", "unicastBase", "unicastBase", 50963, PropCategory.IMPLICIT_BASELINE)
    prop.label = "egress unicast bytes baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("unicastBase", prop)

    prop = PropMeta("str", "unicastCum", "unicastCum", 50964, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "egress unicast bytes cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("unicastCum", prop)

    prop = PropMeta("str", "unicastLast", "unicastLast", 50962, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "egress unicast bytes current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("unicastLast", prop)

    prop = PropMeta("str", "unicastMax", "unicastMax", 50967, PropCategory.IMPLICIT_MAX)
    prop.label = "egress unicast bytes maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("unicastMax", prop)

    prop = PropMeta("str", "unicastMin", "unicastMin", 50966, PropCategory.IMPLICIT_MIN)
    prop.label = "egress unicast bytes minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("unicastMin", prop)

    prop = PropMeta("str", "unicastPer", "unicastPer", 50965, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "egress unicast bytes periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("unicastPer", prop)

    prop = PropMeta("str", "unicastRate", "unicastRate", 50973, PropCategory.IMPLICIT_RATE)
    prop.label = "egress unicast bytes rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("unicastRate", prop)

    prop = PropMeta("str", "unicastSpct", "unicastSpct", 50969, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "egress unicast bytes suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("unicastSpct", prop)

    prop = PropMeta("str", "unicastThr", "unicastThr", 50970, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "egress unicast bytes thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("unicastThr", prop)

    prop = PropMeta("str", "unicastTr", "unicastTr", 50972, PropCategory.IMPLICIT_TREND)
    prop.label = "egress unicast bytes trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("unicastTr", prop)

    prop = PropMeta("str", "unicastTrBase", "unicastTrBase", 50971, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "egress unicast bytes trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("unicastTrBase", prop)

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudCtxProfileToCloudAppViaEPg", "From cloud context profile to application profile", "cobra.model.cloud.App"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudCtxProfileToCloudExtEPg", "From cloudCtxProfile to CloudExtEPg", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudCtxProfileToCloudRouterP", "From cloudCtxProfile to cloudRouterP", "cobra.model.cloud.RouterP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToConsVzBrCP", "From EPg to Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToProvVzBrCP", "From EPg to Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudCtxProfileToHcloudEndPoint", "From cloudCtxProfile to HcloudEndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudCtxProfileToHcloudCtx", "From cloudCtxProfile to HcloudCtx", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudCtxProfileToCloudRegion", "From cloudCtxProfile to CloudRegion", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudCtxProfileToCloudEPg", "From cloudCtxProfile to CloudEPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudCtxProfileToFvCtx", "From cloudCtxProfile to fvCtx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudCtxProfileToCloudCidr", "From cloudCtxProfile to cloudCidr", "cobra.model.cloud.Cidr"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToHcloudSecurityGroup", "cloud:EPg to hcloud:SecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToFvCtx", "cloud:EPg to fv:Ctx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToHCloudEndPoint", "cloud:EPg to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToHCloudCtx", "From cloud EPg to VPCs hCloudCtx", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("cloudEpgToApp", "cloudEpgToApp", "cobra.model.cloud.App"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ATgToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EPgToNwIf", "Interface", "cobra.model.nw.If"))

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

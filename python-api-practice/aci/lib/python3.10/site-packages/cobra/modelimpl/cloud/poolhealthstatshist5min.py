# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class PoolHealthStatsHist5min(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = StatsClassMeta("cobra.model.cloud.PoolHealthStatsHist5min", "ALB back end pool health stats")

    counter = CounterMeta("UnHealthyHostCount", CounterCategory.COUNTER, "count", "Pool unhealthy hosts count")
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "UnHealthyHostCountCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "UnHealthyHostCountPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "UnHealthyHostCountMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "UnHealthyHostCountMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "UnHealthyHostCountAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "UnHealthyHostCountSpct"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "UnHealthyHostCountThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "UnHealthyHostCountTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "UnHealthyHostCountRate"
    meta._counters.append(counter)

    counter = CounterMeta("HealthyHostCount", CounterCategory.COUNTER, "count", "Pool healthy hosts count")
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "HealthyHostCountCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "HealthyHostCountPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "HealthyHostCountMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "HealthyHostCountMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "HealthyHostCountAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "HealthyHostCountSpct"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "HealthyHostCountThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "HealthyHostCountTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "HealthyHostCountRate"
    meta._counters.append(counter)

    meta.moClassName = "cloudPoolHealthStatsHist5min"
    meta.rnFormat = "HDcloudPoolHealthStats5min-%(index)s"
    meta.category = MoCategory.STATS_HISTORY
    meta.label = "historical ALB back end pool health stats stats in 5 minute"
    meta.writeAccessMask = 0x601
    meta.readAccessMask = 0x601
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.parentClasses.add("cobra.model.cloud.EPg")

    meta.superClasses.add("cobra.model.cloud.PoolHealthStatsHist")
    meta.superClasses.add("cobra.model.stats.Item")
    meta.superClasses.add("cobra.model.stats.Hist")

    meta.rnPrefixes = [
        ('HDcloudPoolHealthStats5min-', True),
    ]

    prop = PropMeta("str", "HealthyHostCountAvg", "HealthyHostCountAvg", 52575, PropCategory.IMPLICIT_AVG)
    prop.label = "Pool healthy hosts count average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("HealthyHostCountAvg", prop)

    prop = PropMeta("str", "HealthyHostCountCum", "HealthyHostCountCum", 52571, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "Pool healthy hosts count cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("HealthyHostCountCum", prop)

    prop = PropMeta("str", "HealthyHostCountMax", "HealthyHostCountMax", 52574, PropCategory.IMPLICIT_MAX)
    prop.label = "Pool healthy hosts count maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("HealthyHostCountMax", prop)

    prop = PropMeta("str", "HealthyHostCountMin", "HealthyHostCountMin", 52573, PropCategory.IMPLICIT_MIN)
    prop.label = "Pool healthy hosts count minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("HealthyHostCountMin", prop)

    prop = PropMeta("str", "HealthyHostCountPer", "HealthyHostCountPer", 52572, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "Pool healthy hosts count periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("HealthyHostCountPer", prop)

    prop = PropMeta("str", "HealthyHostCountRate", "HealthyHostCountRate", 52579, PropCategory.IMPLICIT_RATE)
    prop.label = "Pool healthy hosts count rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("HealthyHostCountRate", prop)

    prop = PropMeta("str", "HealthyHostCountSpct", "HealthyHostCountSpct", 52576, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "Pool healthy hosts count suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("HealthyHostCountSpct", prop)

    prop = PropMeta("str", "HealthyHostCountThr", "HealthyHostCountThr", 52577, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "Pool healthy hosts count thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("HealthyHostCountThr", prop)

    prop = PropMeta("str", "HealthyHostCountTr", "HealthyHostCountTr", 52578, PropCategory.IMPLICIT_TREND)
    prop.label = "Pool healthy hosts count trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("HealthyHostCountTr", prop)

    prop = PropMeta("str", "UnHealthyHostCountAvg", "UnHealthyHostCountAvg", 52609, PropCategory.IMPLICIT_AVG)
    prop.label = "Pool unhealthy hosts count average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("UnHealthyHostCountAvg", prop)

    prop = PropMeta("str", "UnHealthyHostCountCum", "UnHealthyHostCountCum", 52605, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "Pool unhealthy hosts count cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("UnHealthyHostCountCum", prop)

    prop = PropMeta("str", "UnHealthyHostCountMax", "UnHealthyHostCountMax", 52608, PropCategory.IMPLICIT_MAX)
    prop.label = "Pool unhealthy hosts count maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("UnHealthyHostCountMax", prop)

    prop = PropMeta("str", "UnHealthyHostCountMin", "UnHealthyHostCountMin", 52607, PropCategory.IMPLICIT_MIN)
    prop.label = "Pool unhealthy hosts count minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("UnHealthyHostCountMin", prop)

    prop = PropMeta("str", "UnHealthyHostCountPer", "UnHealthyHostCountPer", 52606, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "Pool unhealthy hosts count periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("UnHealthyHostCountPer", prop)

    prop = PropMeta("str", "UnHealthyHostCountRate", "UnHealthyHostCountRate", 52613, PropCategory.IMPLICIT_RATE)
    prop.label = "Pool unhealthy hosts count rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("UnHealthyHostCountRate", prop)

    prop = PropMeta("str", "UnHealthyHostCountSpct", "UnHealthyHostCountSpct", 52610, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "Pool unhealthy hosts count suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("UnHealthyHostCountSpct", prop)

    prop = PropMeta("str", "UnHealthyHostCountThr", "UnHealthyHostCountThr", 52611, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "Pool unhealthy hosts count thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("UnHealthyHostCountThr", prop)

    prop = PropMeta("str", "UnHealthyHostCountTr", "UnHealthyHostCountTr", 52612, PropCategory.IMPLICIT_TREND)
    prop.label = "Pool unhealthy hosts count trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("UnHealthyHostCountTr", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cnt", "cnt", 16212, PropCategory.REGULAR)
    prop.label = "Number of Collections During this Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("cnt", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "index", "index", 52430, PropCategory.REGULAR)
    prop.label = "History Index"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("index", prop)

    prop = PropMeta("str", "lastCollOffset", "lastCollOffset", 111, PropCategory.REGULAR)
    prop.label = "Collection Length"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("lastCollOffset", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "repIntvEnd", "repIntvEnd", 110, PropCategory.REGULAR)
    prop.label = "Reporting End Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvEnd", prop)

    prop = PropMeta("str", "repIntvStart", "repIntvStart", 109, PropCategory.REGULAR)
    prop.label = "Reporting Start Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvStart", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "index"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToConsVzBrCP", "From EPg to Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToProvVzBrCP", "From EPg to Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToHcloudSecurityGroup", "cloud:EPg to hcloud:SecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToFvCtx", "cloud:EPg to fv:Ctx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToHCloudEndPoint", "cloud:EPg to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToHCloudCtx", "From cloud EPg to VPCs hCloudCtx", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("cloudEpgToApp", "cloudEpgToApp", "cobra.model.cloud.App"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ATgToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EPgToNwIf", "Interface", "cobra.model.nw.If"))

    def __init__(self, parentMoOrDn, index, markDirty=True, **creationProps):
        namingVals = [index]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

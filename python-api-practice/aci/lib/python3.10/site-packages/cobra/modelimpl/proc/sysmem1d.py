# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class SysMem1d(Mo):
    """
    A class that represents the most current statistics for  System memory in a 1 day sampling interval.  This class updates every hour.

    """

    meta = StatsClassMeta("cobra.model.proc.SysMem1d", "System memory")

    counter = CounterMeta("free", CounterCategory.GAUGE, "kB", "free memory")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "freeLast"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "freeMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "freeMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "freeAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "freeSpct"
    counter._propRefs[PropCategory.IMPLICIT_TOTAL] = "freeTtl"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "freeThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "freeTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "freeTr"
    meta._counters.append(counter)

    counter = CounterMeta("used", CounterCategory.GAUGE, "kB", "used memory")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "usedLast"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "usedMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "usedMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "usedAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "usedSpct"
    counter._propRefs[PropCategory.IMPLICIT_TOTAL] = "usedTtl"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "usedThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "usedTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "usedTr"
    meta._counters.append(counter)

    counter = CounterMeta("total", CounterCategory.GAUGE, "kB", "total memory")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "totalLast"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "totalMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "totalMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "totalAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "totalSpct"
    counter._propRefs[PropCategory.IMPLICIT_TOTAL] = "totalTtl"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "totalThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "totalTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "totalTr"
    meta._counters.append(counter)

    meta.moClassName = "procSysMem1d"
    meta.rnFormat = "CDprocSysMem1d"
    meta.category = MoCategory.STATS_CURRENT
    meta.label = "current System memory stats in 1 day"
    meta.writeAccessMask = 0x800000000000001
    meta.readAccessMask = 0x800000000000001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.parentClasses.add("cobra.model.proc.System")

    meta.superClasses.add("cobra.model.stats.Item")
    meta.superClasses.add("cobra.model.stats.Curr")
    meta.superClasses.add("cobra.model.proc.SysMem")

    meta.rnPrefixes = [
        ('CDprocSysMem1d', False),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cnt", "cnt", 16212, PropCategory.REGULAR)
    prop.label = "Number of Collections During this Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("cnt", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "freeAvg", "freeAvg", 10825, PropCategory.IMPLICIT_AVG)
    prop.label = "free memory average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("freeAvg", prop)

    prop = PropMeta("str", "freeLast", "freeLast", 10822, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "free memory current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("freeLast", prop)

    prop = PropMeta("str", "freeMax", "freeMax", 10824, PropCategory.IMPLICIT_MAX)
    prop.label = "free memory maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("freeMax", prop)

    prop = PropMeta("str", "freeMin", "freeMin", 10823, PropCategory.IMPLICIT_MIN)
    prop.label = "free memory minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("freeMin", prop)

    prop = PropMeta("str", "freeSpct", "freeSpct", 10826, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "free memory suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("freeSpct", prop)

    prop = PropMeta("str", "freeThr", "freeThr", 10828, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "free memory thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("freeThr", prop)

    prop = PropMeta("str", "freeTr", "freeTr", 10830, PropCategory.IMPLICIT_TREND)
    prop.label = "free memory trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("freeTr", prop)

    prop = PropMeta("str", "freeTrBase", "freeTrBase", 10829, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "free memory trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("freeTrBase", prop)

    prop = PropMeta("str", "freeTtl", "freeTtl", 10827, PropCategory.IMPLICIT_TOTAL)
    prop.label = "free memory total sum"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("freeTtl", prop)

    prop = PropMeta("str", "lastCollOffset", "lastCollOffset", 111, PropCategory.REGULAR)
    prop.label = "Collection Length"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("lastCollOffset", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "repIntvEnd", "repIntvEnd", 110, PropCategory.REGULAR)
    prop.label = "Reporting End Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvEnd", prop)

    prop = PropMeta("str", "repIntvStart", "repIntvStart", 109, PropCategory.REGULAR)
    prop.label = "Reporting Start Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvStart", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "totalAvg", "totalAvg", 10846, PropCategory.IMPLICIT_AVG)
    prop.label = "total memory average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("totalAvg", prop)

    prop = PropMeta("str", "totalLast", "totalLast", 10843, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "total memory current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("totalLast", prop)

    prop = PropMeta("str", "totalMax", "totalMax", 10845, PropCategory.IMPLICIT_MAX)
    prop.label = "total memory maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("totalMax", prop)

    prop = PropMeta("str", "totalMin", "totalMin", 10844, PropCategory.IMPLICIT_MIN)
    prop.label = "total memory minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("totalMin", prop)

    prop = PropMeta("str", "totalSpct", "totalSpct", 10847, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "total memory suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("totalSpct", prop)

    prop = PropMeta("str", "totalThr", "totalThr", 10849, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "total memory thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("totalThr", prop)

    prop = PropMeta("str", "totalTr", "totalTr", 10851, PropCategory.IMPLICIT_TREND)
    prop.label = "total memory trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("totalTr", prop)

    prop = PropMeta("str", "totalTrBase", "totalTrBase", 10850, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "total memory trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("totalTrBase", prop)

    prop = PropMeta("str", "totalTtl", "totalTtl", 10848, PropCategory.IMPLICIT_TOTAL)
    prop.label = "total memory total sum"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("totalTtl", prop)

    prop = PropMeta("str", "usedAvg", "usedAvg", 10867, PropCategory.IMPLICIT_AVG)
    prop.label = "used memory average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("usedAvg", prop)

    prop = PropMeta("str", "usedLast", "usedLast", 10864, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "used memory current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("usedLast", prop)

    prop = PropMeta("str", "usedMax", "usedMax", 10866, PropCategory.IMPLICIT_MAX)
    prop.label = "used memory maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("usedMax", prop)

    prop = PropMeta("str", "usedMin", "usedMin", 10865, PropCategory.IMPLICIT_MIN)
    prop.label = "used memory minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("usedMin", prop)

    prop = PropMeta("str", "usedSpct", "usedSpct", 10868, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "used memory suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("usedSpct", prop)

    prop = PropMeta("str", "usedThr", "usedThr", 10870, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "used memory thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("usedThr", prop)

    prop = PropMeta("str", "usedTr", "usedTr", 10872, PropCategory.IMPLICIT_TREND)
    prop.label = "used memory trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("usedTr", prop)

    prop = PropMeta("str", "usedTrBase", "usedTrBase", 10871, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "used memory trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("usedTrBase", prop)

    prop = PropMeta("str", "usedTtl", "usedTtl", 10869, PropCategory.IMPLICIT_TOTAL)
    prop.label = "used memory total sum"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("usedTtl", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

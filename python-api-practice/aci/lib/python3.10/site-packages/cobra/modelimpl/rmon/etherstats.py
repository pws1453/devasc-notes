# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class EtherStats(Mo):
    """
    The Ethernet statistics.

    """

    meta = ClassMeta("cobra.model.rmon.EtherStats")

    meta.moClassName = "rmonEtherStats"
    meta.rnFormat = "dbgEtherStats"
    meta.category = MoCategory.REGULAR
    meta.label = "Ethernet Statistic Counters"
    meta.writeAccessMask = 0x0
    meta.readAccessMask = 0x0
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.parentClasses.add("cobra.model.mgmt.MgmtIf")
    meta.parentClasses.add("cobra.model.pc.AggrIf")
    meta.parentClasses.add("cobra.model.l1.PhysIf")
    meta.parentClasses.add("cobra.model.svi.If")
    meta.parentClasses.add("cobra.model.l3.EncRtdIf")

    meta.superClasses.add("cobra.model.stats.DebugItem")

    meta.rnPrefixes = [
        ('dbgEtherStats', False),
    ]

    prop = PropMeta("str", "broadcastPkts", "broadcastPkts", 4181, PropCategory.DEBUG_STATS)
    prop.label = "Broadcast Packets"
    prop.isOper = True
    meta.props.add("broadcastPkts", prop)

    prop = PropMeta("str", "cRCAlignErrors", "cRCAlignErrors", 4195, PropCategory.DEBUG_STATS)
    prop.label = "CRC Align Errors"
    prop.isOper = True
    meta.props.add("cRCAlignErrors", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "clearTs", "clearTs", 16163, PropCategory.REGULAR)
    prop.label = "Clear timestamp"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("clearTs", prop)

    prop = PropMeta("str", "collisions", "collisions", 4194, PropCategory.DEBUG_STATS)
    prop.label = "Collisions"
    prop.isOper = True
    meta.props.add("collisions", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dropEvents", "dropEvents", 4179, PropCategory.DEBUG_STATS)
    prop.label = "Drop Event Packets"
    prop.isOper = True
    meta.props.add("dropEvents", prop)

    prop = PropMeta("str", "fragments", "fragments", 4183, PropCategory.DEBUG_STATS)
    prop.label = "Fragmented Packets"
    prop.isOper = True
    meta.props.add("fragments", prop)

    prop = PropMeta("str", "jabbers", "jabbers", 4191, PropCategory.DEBUG_STATS)
    prop.label = "Jabber Frames"
    prop.isOper = True
    meta.props.add("jabbers", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "multicastPkts", "multicastPkts", 4180, PropCategory.DEBUG_STATS)
    prop.label = "Multicast Packets"
    prop.isOper = True
    meta.props.add("multicastPkts", prop)

    prop = PropMeta("str", "octets", "octets", 4192, PropCategory.DEBUG_STATS)
    prop.label = "Octets"
    prop.isOper = True
    meta.props.add("octets", prop)

    prop = PropMeta("str", "oversizePkts", "oversizePkts", 4190, PropCategory.DEBUG_STATS)
    prop.label = "Over Size Packets"
    prop.isOper = True
    meta.props.add("oversizePkts", prop)

    prop = PropMeta("str", "pkts", "pkts", 4193, PropCategory.DEBUG_STATS)
    prop.label = "Packets"
    prop.isOper = True
    meta.props.add("pkts", prop)

    prop = PropMeta("str", "pkts1024to1518Octets", "pkts1024to1518Octets", 4189, PropCategory.DEBUG_STATS)
    prop.label = "Packets with 1024 to 1518 Octets"
    prop.isOper = True
    meta.props.add("pkts1024to1518Octets", prop)

    prop = PropMeta("str", "pkts128to255Octets", "pkts128to255Octets", 4186, PropCategory.DEBUG_STATS)
    prop.label = "Packets with 128 to 255 Octets"
    prop.isOper = True
    meta.props.add("pkts128to255Octets", prop)

    prop = PropMeta("str", "pkts256to511Octets", "pkts256to511Octets", 4187, PropCategory.DEBUG_STATS)
    prop.label = "Packets with 256 to 511 Octets"
    prop.isOper = True
    meta.props.add("pkts256to511Octets", prop)

    prop = PropMeta("str", "pkts512to1023Octets", "pkts512to1023Octets", 4188, PropCategory.DEBUG_STATS)
    prop.label = "Packets with 512 to 1023 Octets"
    prop.isOper = True
    meta.props.add("pkts512to1023Octets", prop)

    prop = PropMeta("str", "pkts64Octets", "pkts64Octets", 4184, PropCategory.DEBUG_STATS)
    prop.label = "Packets with 64 Octets"
    prop.isOper = True
    meta.props.add("pkts64Octets", prop)

    prop = PropMeta("str", "pkts65to127Octets", "pkts65to127Octets", 4185, PropCategory.DEBUG_STATS)
    prop.label = "Packets with 65 to 127 Octets"
    prop.isOper = True
    meta.props.add("pkts65to127Octets", prop)

    prop = PropMeta("str", "rXNoErrors", "rXNoErrors", 4197, PropCategory.DEBUG_STATS)
    prop.label = "RX no Errors"
    prop.isOper = True
    meta.props.add("rXNoErrors", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "rxGiantPkts", "rxGiantPkts", 28561, PropCategory.DEBUG_STATS)
    prop.label = "RX Giant Packets"
    prop.isOper = True
    meta.props.add("rxGiantPkts", prop)

    prop = PropMeta("str", "rxOversizePkts", "rxOversizePkts", 4198, PropCategory.DEBUG_STATS)
    prop.label = "RX Over Size Packets"
    prop.isOper = True
    meta.props.add("rxOversizePkts", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tXNoErrors", "tXNoErrors", 4196, PropCategory.DEBUG_STATS)
    prop.label = "TX no Errors"
    prop.isOper = True
    meta.props.add("tXNoErrors", prop)

    prop = PropMeta("str", "txGiantPkts", "txGiantPkts", 28562, PropCategory.DEBUG_STATS)
    prop.label = "TX Giant Packets"
    prop.isOper = True
    meta.props.add("txGiantPkts", prop)

    prop = PropMeta("str", "txOversizePkts", "txOversizePkts", 4199, PropCategory.DEBUG_STATS)
    prop.label = "TX Over Size Packets"
    prop.isOper = True
    meta.props.add("txOversizePkts", prop)

    prop = PropMeta("str", "undersizePkts", "undersizePkts", 4182, PropCategory.DEBUG_STATS)
    prop.label = "Undersize Packets"
    prop.isOper = True
    meta.props.add("undersizePkts", prop)

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("l1EthIfToEPg", "EPG", "cobra.model.fv.EPg"))

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

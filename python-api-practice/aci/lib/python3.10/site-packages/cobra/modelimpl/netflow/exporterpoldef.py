# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class ExporterPolDef(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.netflow.ExporterPolDef")

    meta.moClassName = "netflowExporterPolDef"
    meta.rnFormat = "exporterpold-[%(exporterPolDn)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Netflow Exporter Pol Extra data"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.childClasses.add("cobra.model.netflow.RtMonitorDefToExporterDef")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.netflow.RsExporterToCtx")
    meta.childClasses.add("cobra.model.netflow.RsExporterToTopSystem")
    meta.childClasses.add("cobra.model.netflow.RsExporterToEPg")
    meta.childClasses.add("cobra.model.netflow.RtToRemoteNetflowExporterPolDef")
    meta.childClasses.add("cobra.model.fault.Delegate")

    meta.childNamesAndRnPrefix.append(("cobra.model.netflow.RtToRemoteNetflowExporterPolDef", "rtfvToRemoteNetflowExporterPolDef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.netflow.RtMonitorDefToExporterDef", "rtmonitorDefToExporterDef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.netflow.RsExporterToTopSystem", "rsexporterToTopSystem"))
    meta.childNamesAndRnPrefix.append(("cobra.model.netflow.RsExporterToCtx", "rsexporterToCtx"))
    meta.childNamesAndRnPrefix.append(("cobra.model.netflow.RsExporterToEPg", "rsexporterToEPg"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.netflow.PolDefCont")

    meta.superClasses.add("cobra.model.fabric.ProtoPol")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Def")
    meta.superClasses.add("cobra.model.netflow.AFabExporterPol")
    meta.superClasses.add("cobra.model.netflow.AExporterPol")
    meta.superClasses.add("cobra.model.fabric.ProtoIfPol")
    meta.superClasses.add("cobra.model.fabric.L2IfPol")

    meta.rnPrefixes = [
        ('exporterpold-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 27338, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dscp", "dscp", 33153, PropCategory.REGULAR)
    prop.label = "QoS DSCP Value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop._addConstant("AF11", "af11-low-drop", 10)
    prop._addConstant("AF12", "af12-medium-drop", 12)
    prop._addConstant("AF13", "af13-high-drop", 14)
    prop._addConstant("AF21", "af21-low-drop", 18)
    prop._addConstant("AF22", "af22-medium-drop", 20)
    prop._addConstant("AF23", "af23-high-drop", 22)
    prop._addConstant("AF31", "af31-low-drop", 26)
    prop._addConstant("AF32", "af32-medium-drop", 28)
    prop._addConstant("AF33", "af33-high-drop", 30)
    prop._addConstant("AF41", "af41-low-drop", 34)
    prop._addConstant("AF42", "af42-medium-drop", 36)
    prop._addConstant("AF43", "af43-high-drop", 38)
    prop._addConstant("CS0", "cs0", 0)
    prop._addConstant("CS1", "cs1", 8)
    prop._addConstant("CS2", "cs2", 16)
    prop._addConstant("CS3", "cs3", 24)
    prop._addConstant("CS4", "cs4", 32)
    prop._addConstant("CS5", "cs5", 40)
    prop._addConstant("CS6", "cs6", 48)
    prop._addConstant("CS7", "cs7", 56)
    prop._addConstant("EF", "expedited-forwarding", 46)
    prop._addConstant("VA", "voice-admit", 44)
    meta.props.add("dscp", prop)

    prop = PropMeta("str", "dstAddr", "dstAddr", 27503, PropCategory.REGULAR)
    prop.label = "Remote Entity IP"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("dstAddr", prop)

    prop = PropMeta("str", "dstPort", "dstPort", 27504, PropCategory.REGULAR)
    prop.label = "Remote Entity L4 Port"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 65535)]
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("dns", "dns", 53)
    prop._addConstant("ftpData", "ftp-data", 20)
    prop._addConstant("http", "http", 80)
    prop._addConstant("https", "https", 443)
    prop._addConstant("pop3", "pop3", 110)
    prop._addConstant("rtsp", "rtsp", 554)
    prop._addConstant("smtp", "smtp", 25)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("dstPort", prop)

    prop = PropMeta("str", "exporterPolDn", "exporterPolDn", 27334, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("exporterPolDn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15230, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15231, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "sourceIpType", "sourceIpType", 33429, PropCategory.REGULAR)
    prop.label = "Type of Exporter Src IP Address: Can be one of the available management IP Address for a given leaf or a custom IP Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "custom-src-ip"
    prop._addConstant("custom-src-ip", "custom-src-ip", 1)
    prop._addConstant("inband-mgmt-ip", "inband-management-ip", 2)
    prop._addConstant("oob-mgmt-ip", "outofband-management-ip", 3)
    prop._addConstant("ptep", "ptep-address", 4)
    meta.props.add("sourceIpType", prop)

    prop = PropMeta("str", "srcAddr", "srcAddr", 27505, PropCategory.REGULAR)
    prop.label = "Source IP Address"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("srcAddr", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "ver", "ver", 27330, PropCategory.REGULAR)
    prop.label = "Exporter NetFlow Version Format"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 3
    prop.defaultValueStr = "cisco-v1"
    prop._addConstant("cisco-v1", "cisco-proprietary-version-1", 3)
    prop._addConstant("v5", "version-5", 1)
    prop._addConstant("v9", "version-9", 2)
    meta.props.add("ver", prop)

    meta.namingProps.append(getattr(meta.props, "exporterPolDn"))
    getattr(meta.props, "exporterPolDn").needDelimiter = True

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Path"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("L2IfPolToEthIf", "Interface", "cobra.model.l1.EthIf"))

    def __init__(self, parentMoOrDn, exporterPolDn, markDirty=True, **creationProps):
        namingVals = [exporterPolDn]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

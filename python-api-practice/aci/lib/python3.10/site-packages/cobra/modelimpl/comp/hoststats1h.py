# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class HostStats1h(Mo):
    """
    A class that represents the most current statistics for host in a 1 hour sampling interval.  This class updates every 15 minutes.

    """

    meta = StatsClassMeta("cobra.model.comp.HostStats1h", "host")

    counter = CounterMeta("memUsage", CounterCategory.GAUGE, "percentage", "memory usage")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "memUsageLast"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "memUsageMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "memUsageMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "memUsageAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "memUsageSpct"
    counter._propRefs[PropCategory.IMPLICIT_TOTAL] = "memUsageTtl"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "memUsageThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "memUsageTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "memUsageTr"
    meta._counters.append(counter)

    counter = CounterMeta("cpuUsage", CounterCategory.GAUGE, "percentage", "CPU usage")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "cpuUsageLast"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "cpuUsageMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "cpuUsageMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "cpuUsageAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "cpuUsageSpct"
    counter._propRefs[PropCategory.IMPLICIT_TOTAL] = "cpuUsageTtl"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "cpuUsageThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "cpuUsageTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "cpuUsageTr"
    meta._counters.append(counter)

    meta.moClassName = "compHostStats1h"
    meta.rnFormat = "CDcompHostStats1h"
    meta.category = MoCategory.STATS_CURRENT
    meta.label = "current host stats in 1 hour"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.parentClasses.add("cobra.model.comp.Hv")
    meta.parentClasses.add("cobra.model.comp.Vm")

    meta.superClasses.add("cobra.model.comp.HostStats")
    meta.superClasses.add("cobra.model.stats.Curr")
    meta.superClasses.add("cobra.model.stats.Item")

    meta.rnPrefixes = [
        ('CDcompHostStats1h', False),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cnt", "cnt", 16212, PropCategory.REGULAR)
    prop.label = "Number of Collections During this Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("cnt", prop)

    prop = PropMeta("str", "cpuUsageAvg", "cpuUsageAvg", 7559, PropCategory.IMPLICIT_AVG)
    prop.label = "CPU usage average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cpuUsageAvg", prop)

    prop = PropMeta("str", "cpuUsageLast", "cpuUsageLast", 7556, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "CPU usage current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cpuUsageLast", prop)

    prop = PropMeta("str", "cpuUsageMax", "cpuUsageMax", 7558, PropCategory.IMPLICIT_MAX)
    prop.label = "CPU usage maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cpuUsageMax", prop)

    prop = PropMeta("str", "cpuUsageMin", "cpuUsageMin", 7557, PropCategory.IMPLICIT_MIN)
    prop.label = "CPU usage minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cpuUsageMin", prop)

    prop = PropMeta("str", "cpuUsageSpct", "cpuUsageSpct", 7560, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "CPU usage suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cpuUsageSpct", prop)

    prop = PropMeta("str", "cpuUsageThr", "cpuUsageThr", 7562, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "CPU usage thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("cpuUsageThr", prop)

    prop = PropMeta("str", "cpuUsageTr", "cpuUsageTr", 7564, PropCategory.IMPLICIT_TREND)
    prop.label = "CPU usage trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cpuUsageTr", prop)

    prop = PropMeta("str", "cpuUsageTrBase", "cpuUsageTrBase", 7563, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "CPU usage trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cpuUsageTrBase", prop)

    prop = PropMeta("str", "cpuUsageTtl", "cpuUsageTtl", 7561, PropCategory.IMPLICIT_TOTAL)
    prop.label = "CPU usage total sum"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("cpuUsageTtl", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lastCollOffset", "lastCollOffset", 111, PropCategory.REGULAR)
    prop.label = "Collection Length"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("lastCollOffset", prop)

    prop = PropMeta("str", "memUsageAvg", "memUsageAvg", 7574, PropCategory.IMPLICIT_AVG)
    prop.label = "memory usage average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("memUsageAvg", prop)

    prop = PropMeta("str", "memUsageLast", "memUsageLast", 7571, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "memory usage current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("memUsageLast", prop)

    prop = PropMeta("str", "memUsageMax", "memUsageMax", 7573, PropCategory.IMPLICIT_MAX)
    prop.label = "memory usage maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("memUsageMax", prop)

    prop = PropMeta("str", "memUsageMin", "memUsageMin", 7572, PropCategory.IMPLICIT_MIN)
    prop.label = "memory usage minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("memUsageMin", prop)

    prop = PropMeta("str", "memUsageSpct", "memUsageSpct", 7575, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "memory usage suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("memUsageSpct", prop)

    prop = PropMeta("str", "memUsageThr", "memUsageThr", 7577, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "memory usage thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("memUsageThr", prop)

    prop = PropMeta("str", "memUsageTr", "memUsageTr", 7579, PropCategory.IMPLICIT_TREND)
    prop.label = "memory usage trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("memUsageTr", prop)

    prop = PropMeta("str", "memUsageTrBase", "memUsageTrBase", 7578, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "memory usage trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("memUsageTrBase", prop)

    prop = PropMeta("str", "memUsageTtl", "memUsageTtl", 7576, PropCategory.IMPLICIT_TOTAL)
    prop.label = "memory usage total sum"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("memUsageTtl", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "repIntvEnd", "repIntvEnd", 110, PropCategory.REGULAR)
    prop.label = "Reporting End Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvEnd", prop)

    prop = PropMeta("str", "repIntvStart", "repIntvStart", 109, PropCategory.REGULAR)
    prop.label = "Reporting Start Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvStart", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Ctrlr(Mo):
    """
    The operational state of the VM management system controller such as a VMware vCenter, VMware vShield, or Microsoft SCVMM.

    """

    meta = ClassMeta("cobra.model.comp.Ctrlr")

    meta.moClassName = "compCtrlr"
    meta.rnFormat = "ctrlr-[%(domName)s]-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Controller Instance"
    meta.writeAccessMask = 0x5
    meta.readAccessMask = 0x45241000020437
    meta.isDomainable = True
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.childClasses.add("cobra.model.comp.RtCtrlr")
    meta.childClasses.add("cobra.model.comp.RtBaseCtrlr")
    meta.childClasses.add("cobra.model.comp.Org")
    meta.childClasses.add("cobra.model.comp.Hv")
    meta.childClasses.add("cobra.model.opflex.EpPDIDEpRefCont")
    meta.childClasses.add("cobra.model.opflex.IDEpRefCont")
    meta.childClasses.add("cobra.model.comp.Vm")
    meta.childClasses.add("cobra.model.comp.TagCont")
    meta.childClasses.add("cobra.model.opflex.UsegInfoCont")
    meta.childClasses.add("cobra.model.vmm.InjectedCont")
    meta.childClasses.add("cobra.model.hvs.MbrCont")
    meta.childClasses.add("cobra.model.comp.HvCluster")
    meta.childClasses.add("cobra.model.fvns.VxlanInstDef")
    meta.childClasses.add("cobra.model.comp.HealthPolCont")
    meta.childClasses.add("cobra.model.comp.RtBaseCompCtrlr")
    meta.childClasses.add("cobra.model.hvs.UsegCont")
    meta.childClasses.add("cobra.model.opflex.PendResIDEpCont")
    meta.childClasses.add("cobra.model.comp.RsODevKeys")
    meta.childClasses.add("cobra.model.comp.VmFolder")
    meta.childClasses.add("cobra.model.comp.Namespace")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.hvs.HealthProvider")
    meta.childClasses.add("cobra.model.comp.RsDom")
    meta.childClasses.add("cobra.model.comp.LastEventInfoList")
    meta.childClasses.add("cobra.model.comp.FaultyExtPolCont")
    meta.childClasses.add("cobra.model.infra.EpPDDef")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.comp.EpPD")
    meta.childClasses.add("cobra.model.comp.LastEventInfo")
    meta.childClasses.add("cobra.model.aaa.IDomainRef")
    meta.childClasses.add("cobra.model.hvs.LNode")
    meta.childClasses.add("cobra.model.comp.RFltP")
    meta.childClasses.add("cobra.model.comp.PolCont")
    meta.childClasses.add("cobra.model.comp.DataStore")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.comp.MigratingVmCont")
    meta.childClasses.add("cobra.model.aaa.DomainRef")
    meta.childClasses.add("cobra.model.comp.EDMgrProxy")
    meta.childClasses.add("cobra.model.comp.HvClusterCont")
    meta.childClasses.add("cobra.model.comp.ResourcePool")
    meta.childClasses.add("cobra.model.comp.RsCtrlr")
    meta.childClasses.add("cobra.model.comp.VmFolderDefCont")
    meta.childClasses.add("cobra.model.fvns.McastAddrInstDef")
    meta.childClasses.add("cobra.model.opflex.ScopeCont")
    meta.childClasses.add("cobra.model.comp.VmFolderCont")
    meta.childClasses.add("cobra.model.comp.PendEpCont")
    meta.childClasses.add("cobra.model.comp.LabelDef")
    meta.childClasses.add("cobra.model.comp.TagContuse")

    meta.childNamesAndRnPrefix.append(("cobra.model.comp.RtBaseCompCtrlr", "rtvmmBaseCompCtrlr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.LastEventInfoList", "lastEventInfoList"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.EpPDIDEpRefCont", "eppdideprefcont-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.FaultyExtPolCont", "faultyExtPolCont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.RtBaseCtrlr", "rtvmmBaseCtrlr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.PendResIDEpCont", "PendResIDEpCont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.MigratingVmCont", "migratingVmCont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.VmFolderDefCont", "vmfolderdefcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.HealthPolCont", "healthPolCont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.LastEventInfo", "lastEventInfo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.HvClusterCont", "hvClusterCont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.UsegInfoCont", "useginfocont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fvns.McastAddrInstDef", "addrinstdef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.VmFolderCont", "vmfoldercont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.IDEpRefCont", "ideprefcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.HvCluster", "hvcluster-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.RsODevKeys", "rsODevKeys"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.PendEpCont", "pendEpCont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.TagContuse", "tagcontuse"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.VmFolder", "vmFolder-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.RtCtrlr", "rtctrlr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.UsegCont", "usegcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.HealthProvider", "healthp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.EpPDDef", "infeppd-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.IDomainRef", "idomain-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.RsCtrlr", "rsctrlr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.TagCont", "tagcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.InjectedCont", "injcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.MbrCont", "mbrcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.PolCont", "polCont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.DataStore", "dstore-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.DomainRef", "domain-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.LabelDef", "lbldef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fvns.VxlanInstDef", "nsdef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.RFltP", "rfltp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.EDMgrProxy", "edmgr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.ResourcePool", "rpool-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.ScopeCont", "scope-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.RsDom", "rsDom"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.EpPD", "eppd-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.Org", "org-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.Hv", "hv-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.Vm", "vm-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.Namespace", "ns-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hvs.LNode", "sw-"))

    meta.parentClasses.add("cobra.model.comp.Prov")

    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.naming.NamedIdentifiedObject")
    meta.superClasses.add("cobra.model.comp.Entity")

    meta.rnPrefixes = [
        ('ctrlr-', True),
        ('-', True),
    ]

    prop = PropMeta("str", "accessMode", "accessMode", 35780, PropCategory.REGULAR)
    prop.label = "Access Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "read-write"
    prop._addConstant("read-only", "read-only-mode", 1)
    prop._addConstant("read-write", "read-write-mode", 0)
    meta.props.add("accessMode", prop)

    prop = PropMeta("str", "apiVer", "apiVer", 1012, PropCategory.REGULAR)
    prop.label = "API Version"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("apiVer", prop)

    prop = PropMeta("str", "aveSwitchingActive", "aveSwitchingActive", 44727, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("aveSwitchingActive", prop)

    prop = PropMeta("str", "aveTimeOut", "aveTimeOut", 45572, PropCategory.REGULAR)
    prop.label = "AVE Time Out Time (seconds)"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 30
    prop.defaultValueStr = "30"
    meta.props.add("aveTimeOut", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cimcVersion", "cimcVersion", 56699, PropCategory.REGULAR)
    prop.label = "CIMC version"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("cimcVersion", prop)

    prop = PropMeta("str", "ctrlKnob", "ctrlKnob", 34304, PropCategory.REGULAR)
    prop.label = "determines e.g., whether or not to turn on End Point DataPath Verify"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "epDpVerify"
    prop._addConstant("epDpVerify", "epdpverify", 1)
    prop._addConstant("none", "none", 0)
    meta.props.add("ctrlKnob", prop)

    prop = PropMeta("str", "ctrlrPKey", "ctrlrPKey", 1010, PropCategory.REGULAR)
    prop.label = "Ctrlr Policy DN"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("ctrlrPKey", prop)

    prop = PropMeta("str", "deployIssues", "deployIssues", 1025, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("attr-dom-not-supported", "attribute-based-epg-is-not-supported-for-the-domain-type", 131072)
    prop._addConstant("ctrlr-not-deployable", "controller-not-deployable.", 32768)
    prop._addConstant("ctrlr-unsupported", "unsupported-controller.", 16384)
    prop._addConstant("duplicate-static-encap", "duplicate-epg-encapsulation-value", 2097152)
    prop._addConstant("dvs-config-failed", "failed-to-configure-dvs.", 4096)
    prop._addConstant("dvs-error", "failed-to-get-dvs-config.", 2)
    prop._addConstant("dvs-prep-error", "dvs-preparation-error-for-vxlan.", 32)
    prop._addConstant("dvs-version-error", "could-not-get-dvs-version.", 512)
    prop._addConstant("epg-pol-enforce-missing-pri_encap", "missing-primary-encap-in-vmm-domain-relation-for-policy-enforced-epg", 8388608)
    prop._addConstant("epg-pol-enforce-redhat-unsupported", "intra-epg-isolation-is-not-supported-for-redhat-domains", 34359738368)
    prop._addConstant("epg-pol-enforce-unsupported", "intra-epg-isolation-is-not-supported-in-avs-vlan-mode-and-ave-vlan-mode-vmm-domains", 16777216)
    prop._addConstant("epg-useg-unsupported", "microsegmentation-is-not-supported-for-the-controller", 67108864)
    prop._addConstant("epp-mcast-addr-match-fabric", "epg-mcast-address-is-the-same-as-fabric-mcast-address.-domain-fabric-multicast-address-overlaps-multicast-address-pool.", 1048576)
    prop._addConstant("internal-vlan-pool-full", "insufficient-vlans.-internal-vlan-pool-full-for-epgs-in-ave-domain", 8589934592)
    prop._addConstant("invalid-encap", "no-valid-encapsulation-identifier-allocated-for-the-epg", 1)
    prop._addConstant("invalid-encap-mode", "encap-mode-cannot-be-vxlan-when-switching-mode-is-native-for-this-vmm-domain", 17179869184)
    prop._addConstant("invalid-intra-epg-isolation", "enforcing-intra-epg-isolation-is-invalid-without-primary-and-secondary-vlans-set", 274877906944)
    prop._addConstant("invalid-lag-policy-association", "invalid-enhanced-lag-policy-associated-with-this-epg", 137438953472)
    prop._addConstant("invalid-mcast-addr", "no-valid-mcast-address-allocated-for-the-epg", 65536)
    prop._addConstant("invalid-netflow-preference", "netflow-cannot-be-enabled-for-epg-associated-to-vmm-domain-in-avs-mode", 1073741824)
    prop._addConstant("invalid-static-encap", "epg-encapsulation-value-is-not-part-of-any-static-encapsulation-block-for-the-vmm-domain", 524288)
    prop._addConstant("invalid-switching-mode", "vmm-domain-needs-to-be-of-type-cisco-ave-for-switching-mode-ave", 4194304)
    prop._addConstant("invalid-trunk-portgroup-range", "trunk-portgroup-vlan-ranges-are-out-of-domain-vlan-pool", 134217728)
    prop._addConstant("invalid-usegepg-encap", "primary-encap-property-and-encap-property-both-need-to-be-set", 33554432)
    prop._addConstant("invalid-vip", "vip-has-not-been-allocated", 262144)
    prop._addConstant("invalid-vlan-encap", "vlan-encap-mode-is-not-allowed-for-ave-non-local-switching-domain", 68719476736)
    prop._addConstant("ipv6-dstaddr-unsupported", "netflow-exporter-dstaddr-supports-ipv6-from-dvs-version-6.0-and-higher.-please-use-an-ipv4-address-for-the-netflow-exporter-dstaddr", 2147483648)
    prop._addConstant("lacp-apply-failed", "lacp-update-for-portgroup-failed.", 2048)
    prop._addConstant("missing-internal-vlan-pool", "missing-internal-vlan-pools-for-epgs-in-ave-domain", 4294967296)
    prop._addConstant("no-ctrlr-dn", "controller-dn-missing.", 256)
    prop._addConstant("no-ctrlr-map", "controller-missing-from-internal-map.", 128)
    prop._addConstant("none", "n/a", 0)
    prop._addConstant("pg-api-error", "portgroup-property-get-api-failed.", 1024)
    prop._addConstant("policy-not-found", "failed-to-find-policy-container-for-controller.", 8192)
    prop._addConstant("prep-vxlan-error", "vxlan-cluster-preparation-error.", 8)
    prop._addConstant("proc-vmm-error", "cluster-type-object-missing-from-controller.", 16)
    prop._addConstant("resimedcy-unsupported", "resolution-immediacy-not-supported-for-this-domain", 536870912)
    prop._addConstant("trunk-portgroup-unsupported", "trunk-portgroup-not-supported", 268435456)
    prop._addConstant("unsupported-ctrlr", "invalid-controller-scope.", 64)
    prop._addConstant("vdn-error", "network-scope-creation-error.", 4)
    meta.props.add("deployIssues", prop)

    prop = PropMeta("str", "descr", "descr", 5587, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "domName", "domName", 1013, PropCategory.REGULAR)
    prop.label = "Domain Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 512)]
    meta.props.add("domName", prop)

    prop = PropMeta("str", "dvsVersion", "dvsVersion", 16334, PropCategory.REGULAR)
    prop.label = "DVS Version"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unmanaged"
    prop._addConstant("5.1", "dvs-version-5.1", 1)
    prop._addConstant("5.5", "dvs-version-5.5", 2)
    prop._addConstant("6.0", "dvs-version-6.0", 3)
    prop._addConstant("6.5", "dvs-version-6.5", 4)
    prop._addConstant("6.6", "dvs-version-6.6", 5)
    prop._addConstant("7.0", "dvs-version-7.0", 6)
    prop._addConstant("unmanaged", "vcenter-default", 0)
    meta.props.add("dvsVersion", prop)

    prop = PropMeta("str", "enableAVE", "enableAVE", 35607, PropCategory.REGULAR)
    prop.label = "Enable AVE mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("enableAVE", prop)

    prop = PropMeta("str", "enableTag", "enableTag", 44782, PropCategory.REGULAR)
    prop.label = "Enable Tag data retrieval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("enableTag", prop)

    prop = PropMeta("str", "enableVmFolder", "enableVmFolder", 54492, PropCategory.REGULAR)
    prop.label = "Enable VM Folder data retrieval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("enableVmFolder", prop)

    prop = PropMeta("str", "epRetTime", "epRetTime", 30051, PropCategory.REGULAR)
    prop.label = "End Point Retention Time (seconds)"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("epRetTime", prop)

    prop = PropMeta("str", "hostOrIp", "hostOrIp", 1016, PropCategory.REGULAR)
    prop.label = "Hostname or IP Address"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("hostOrIp", prop)

    prop = PropMeta("str", "id", "id", 1003, PropCategory.REGULAR)
    prop.label = "Id"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "inventoryStartTS", "inventoryStartTS", 18227, PropCategory.REGULAR)
    prop.label = "Remote Timestamp of Inventory Start"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("inventoryStartTS", prop)

    prop = PropMeta("str", "inventoryTrigSt", "inventoryTrigSt", 16509, PropCategory.REGULAR)
    prop.label = "Triggered Inventory Sync Status"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "untriggered"
    prop._addConstant("autoTriggered", "autotriggered", 2)
    prop._addConstant("triggered", "triggered", 0)
    prop._addConstant("untriggered", "untriggered", 1)
    meta.props.add("inventoryTrigSt", prop)

    prop = PropMeta("str", "issues", "issues", 34206, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("ds-update-fault", "failed-to-update-ds(data-store)-property", 4096)
    prop._addConstant("hpnic-miss-epg-fault", "hpnic-is-attached-to-an-invalid-uplink-dvs-port-group", 32)
    prop._addConstant("hv-disconnect-fault", "esx-host-is-disconnected-or-not-responding", 128)
    prop._addConstant("hv-miss-dvs-fault", "esx-host-is-configured-with-invalid-dvs", 64)
    prop._addConstant("hv-miss-pnic-fault", "esx-host-does-not-have-any-pnic", 1024)
    prop._addConstant("hv-miss-vmknic-fault", "esx-host-does-not-have-any-vmknic", 256)
    prop._addConstant("hv-update-fault", "failed-to-update-hv(esx-host)-property", 2)
    prop._addConstant("lnode-property-fault", "failed-to-get-dvs-property", 1)
    prop._addConstant("mgmtnic-miss-dvs-fault", "vmk-nic-is-configured-with-invalid-dvs", 512)
    prop._addConstant("none", "none", 0)
    prop._addConstant("opflex-channels-down-ave", "both-the-opflex-channels-are-down-for-ave.-please-check-the-connections-on-the-host.", 16384)
    prop._addConstant("prep-iso-file-fault", "failed-to-prepare-or-push-iso-file-for-service-vm-deployment.-please-check-if-correct-datastore-is-selected-in-policy.", 131072)
    prop._addConstant("rp-update-fault", "failed-to-update-rp(resource-pool)-property", 8192)
    prop._addConstant("tagging-cat-fault", "failed-to-retrieve-all-tag-category-information", 65536)
    prop._addConstant("tagging-tag-fault", "failed-to-retrieve-all-tag-information", 32768)
    prop._addConstant("vm-deploy-task-fault", "deployvm-task-failed-on-vcenter", 2048)
    prop._addConstant("vm-miss-hv-fault", "vm-is-attached-to-an-invalid-hv(esx-host)", 8)
    prop._addConstant("vm-update-fault", "failed-to-update-vm(virtual-machine)-property", 4)
    prop._addConstant("vmfolder-update-fault", "failed-to-update-vm(virtual-machine)-folder-property", 262144)
    prop._addConstant("vnic-miss-epg-fault", "vnic-is-attached-to-an-invalid-dvs-port-group-or-unable-to-communicate-with-vcenter", 16)
    meta.props.add("issues", prop)

    prop = PropMeta("str", "key", "key", 1020, PropCategory.REGULAR)
    prop.label = "Scope"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("key", prop)

    prop = PropMeta("str", "lagPolicyName", "lagPolicyName", 44359, PropCategory.REGULAR)
    prop.label = "Enhanced LAG Policy Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("lagPolicyName", prop)

    prop = PropMeta("str", "lastEventCollectorId", "lastEventCollectorId", 21380, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "datacenter"
    prop._addConstant("count", "number-of-event-collectors", 2)
    prop._addConstant("datacenter", "datacenter-event-collector", 0)
    prop._addConstant("global", "global-event-collector", 1)
    meta.props.add("lastEventCollectorId", prop)

    prop = PropMeta("str", "lastEventId", "lastEventId", 1023, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("lastEventId", prop)

    prop = PropMeta("str", "lastEventTS", "lastEventTS", 1022, PropCategory.REGULAR)
    prop.label = "Status"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("lastEventTS", prop)

    prop = PropMeta("str", "lastInventorySt", "lastInventorySt", 20387, PropCategory.REGULAR)
    prop.label = "Status of the last inventory sync"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "completed"
    prop._addConstant("completed", "completed", 0)
    prop._addConstant("completedex", "completed-with-exception", 3)
    prop._addConstant("failed", "failed", 2)
    prop._addConstant("partial", "partially-completed", 1)
    meta.props.add("lastInventorySt", prop)

    prop = PropMeta("str", "lastInventoryTS", "lastInventoryTS", 16508, PropCategory.REGULAR)
    prop.label = "Local Timestamp of Last Inventory Sync Completion"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("lastInventoryTS", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "maxWorkerQSize", "maxWorkerQSize", 27134, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 500)]
    prop.defaultValue = 300
    prop.defaultValueStr = "defaultQueueSize"
    prop._addConstant("defaultQueueSize", "default-worker-queue-size", 300)
    meta.props.add("maxWorkerQSize", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 1021, PropCategory.REGULAR)
    prop.label = "Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "default"
    prop._addConstant("cf", "cloud-foundry", 6)
    prop._addConstant("default", "distributed-switch", 0)
    prop._addConstant("k8s", "kubernetes", 4)
    prop._addConstant("n1kv", "cisco-avs", 1)
    prop._addConstant("openshift", "openshift", 7)
    prop._addConstant("ovs", "open-vswitch", 3)
    prop._addConstant("rhev", "rhev", 5)
    prop._addConstant("unknown", "unknown", 2)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "model", "model", 5588, PropCategory.REGULAR)
    prop.label = "Model"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("model", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14064, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 1009, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "operSt", "operSt", 1011, PropCategory.REGULAR)
    prop.label = "Status"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("deallocated", "deallocated", 3)
    prop._addConstant("offline", "offline", 2)
    prop._addConstant("online", "online", 1)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "port", "port", 1017, PropCategory.REGULAR)
    prop.label = "Port"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 65535)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("port", prop)

    prop = PropMeta("str", "pwd", "pwd", 1015, PropCategory.REGULAR)
    prop.label = "Password"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isPassword = True
    meta.props.add("pwd", prop)

    prop = PropMeta("str", "remoteErrMsg", "remoteErrMsg", 16230, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("remoteErrMsg", prop)

    prop = PropMeta("str", "remoteOperIssues", "remoteOperIssues", 1024, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("connection-down", "connection-to-external-vmm-controller-is-down.", 32)
    prop._addConstant("discovery-protocol-mismatch", "discovery-protocol-on-dvs-is-different-than-the-one-in-the-policy.", 128)
    prop._addConstant("encapMode-mismatch", "vlan-is-set-to-none-for-port-group-on-vcenter-but-untagged-access-is-not-enabled-for-epg", 68719476736)
    prop._addConstant("event-channel-down", "event-channel-from-external-vmm-controller-is-down.", 16)
    prop._addConstant("insufficient-mtu", "fabric-mtu-should-be-greater-than-1550-for-ave/avs-vmm-domain.", 134217728)
    prop._addConstant("inv-completed-ex", "last-inventory-pull-did-not-complete-for-a-few-hosts-or-vms-or-no-hosts-found.-please-verify-the-hosts-and-vms-are-in-connected-state-in-the-vmm-controller-and-manually-re-trigger-inventory-sync-on-apic.-please-ignore-this-fault-if-there-are-no-hosts-in-the-vmm-controller.", 262144)
    prop._addConstant("invalid-backing", "invalid-backing-port-group.", 2048)
    prop._addConstant("invalid-permission", "insufficient-permission-to-create/modify-port-group", 268435456)
    prop._addConstant("invalid-portgroup-exist", "invalid-or-unknown-portgroup-exist-on-external-vmm-controller", 8)
    prop._addConstant("invalid-portgroup-name", "port-group-name-size-is-exceeding-scvmm-vm-network-name-size-limit-64-character.", 4096)
    prop._addConstant("invalid-uplink-config", "uplinks-ordered-exceed-the-maxmimum-number-of-uplinks-on-the-dvs", 137438953472)
    prop._addConstant("lnode-deleted", "lnode(dvs)-deleted-on-external-vmm-controller", 1)
    prop._addConstant("lnode-name-mismatch", "lnode(dvs)-name-mismatch", 256)
    prop._addConstant("mtu-exceeded", "given-mtu-value-exceeds-the-max-mtu-supported-by-vmware-vcenter-which-is-9000", 8589934592)
    prop._addConstant("mtu-mismatch", "mtu-on-dvs-is-different-than-the-mtu-in-the-policy.", 64)
    prop._addConstant("netflow-afto-mismatch", "netflow-vmm-exporter-active-flow-timeout-on-dvs-is-different-from-that-in-the-policy", 16777216)
    prop._addConstant("netflow-dstaddr-mismatch", "netflow-vmm-exporter-destination-address-on-dvs-is-different-from-that-in-the-policy", 2097152)
    prop._addConstant("netflow-dstport-mismatch", "netflow-vmm-exporter-destination-port-on-dvs-is-different-from-that-in-the-policy", 4194304)
    prop._addConstant("netflow-ifto-mismatch", "netflow-vmm-exporter-idle-flow-timeout-on-dvs-is-different-from-that-in-the-policy", 33554432)
    prop._addConstant("netflow-sr-mismatch", "netflow-vmm-exporter-sampling-rate-on-dvs-is-different-from-that-in-the-policy", 67108864)
    prop._addConstant("netflow-srcaddr-mismatch", "netflow-vmm-exporter-source-address-on-dvs-is-different-from-that-in-the-policy", 8388608)
    prop._addConstant("none", "none", 0)
    prop._addConstant("numofuplinks-mismatch", "number-of-uplinks-on-dvs-is-different-from-that-in-the-policy", 17179869184)
    prop._addConstant("opflex-cert-expire", "opflex-certificate-is-expiring-or-has-expired", 536870912)
    prop._addConstant("opflex-channels-down", "both-the-opflex-channels-are-down-for-the-host.-please-check-the-connections-on-the-host.", 524288)
    prop._addConstant("partial-inv", "received-partial-inventory-in-the-last-inventory-sync.-please-look-for-faults-under-vm-and-host-and-fix-them-via-vcenter,-then-manually-re-trigger-inventory-sync-on-apic", 8192)
    prop._addConstant("portgroup-bindingtype-mismatch", "portgroup-binding-type-on-dvs-is-different-from-that-in-the-policy", 1073741824)
    prop._addConstant("portgroup-deleted", "portgroup-deleted-from-external-vmm-controller", 4)
    prop._addConstant("portgroup-encap-changed", "portgroup-encapsulation-has-been-changed-on-external-vmm-controller", 2)
    prop._addConstant("portgroup-forgedtx-changed", "portgroup-forged-transmits-security-policy-has-been-changed-on-external-vmm-controller", 65536)
    prop._addConstant("portgroup-macchange-changed", "portgroup-mac-changes-security-policy-has-been-changed-on-external-vmm-controller", 32768)
    prop._addConstant("portgroup-netflowpref-changed", "portgroup-netflowpref-has-been-changed-on-external-vmm-controller", 1048576)
    prop._addConstant("portgroup-numports-mismatch", "portgroup-number-of-ports-on-dvs-is-different-from-that-in-the-policy", 2147483648)
    prop._addConstant("portgroup-portallocation-mismatch", "portgroup-allocation-type-on-dvs-is-different-from-that-in-the-policy", 4294967296)
    prop._addConstant("portgroup-promiscuous-changed", "portgroup-promiscuous-security-policy-has-been-changed-on-external-vmm-controller", 16384)
    prop._addConstant("portgroup-pvlan-changed", "portgroup-pvlan-encapsulation-has-been-changed-on-external-vmm-controller", 131072)
    prop._addConstant("ps-error", "powershell-vmnetwork-creation-error.", 1024)
    prop._addConstant("uplinkname-mismatch", "uplink-names-on-dvs-is-different-from-that-in-the-policy", 34359738368)
    prop._addConstant("vsmgmt-error", "vsmgmt-port-group-missing-in-controller.", 512)
    meta.props.add("remoteOperIssues", prop)

    prop = PropMeta("str", "rev", "rev", 5589, PropCategory.REGULAR)
    prop.label = "Revision"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    prop.defaultValue = "0"
    prop.defaultValueStr = "0"
    meta.props.add("rev", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "rootContName", "rootContName", 1019, PropCategory.REGULAR)
    prop.label = "Datacenter"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("rootContName", prop)

    prop = PropMeta("str", "scope", "scope", 1018, PropCategory.REGULAR)
    prop.label = "Scope"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "vm"
    prop._addConstant("MicrosoftSCVMM", "scvmm", 4)
    prop._addConstant("cloudfoundry", "cloud-foundry", 8)
    prop._addConstant("iaas", "vshield", 2)
    prop._addConstant("kubernetes", "kubernetes", 6)
    prop._addConstant("network", "vcd", 3)
    prop._addConstant("openshift", "openshift", 9)
    prop._addConstant("openstack", "openstack", 5)
    prop._addConstant("rhev", "redhat-enterprise-virtualization", 7)
    prop._addConstant("unmanaged", "unmanaged", 0)
    prop._addConstant("vm", "vcenter", 1)
    meta.props.add("scope", prop)

    prop = PropMeta("str", "ser", "ser", 5590, PropCategory.REGULAR)
    prop.label = "Serial Number"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("ser", prop)

    prop = PropMeta("str", "setDeployIssues", "setDeployIssues", 16103, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("attr-dom-not-supported", "attribute-based-epg-is-not-supported-for-the-domain-type", 131072)
    prop._addConstant("ctrlr-not-deployable", "controller-not-deployable.", 32768)
    prop._addConstant("ctrlr-unsupported", "unsupported-controller.", 16384)
    prop._addConstant("duplicate-static-encap", "duplicate-epg-encapsulation-value", 2097152)
    prop._addConstant("dvs-config-failed", "failed-to-configure-dvs.", 4096)
    prop._addConstant("dvs-error", "failed-to-get-dvs-config.", 2)
    prop._addConstant("dvs-prep-error", "dvs-preparation-error-for-vxlan.", 32)
    prop._addConstant("dvs-version-error", "could-not-get-dvs-version.", 512)
    prop._addConstant("epg-pol-enforce-missing-pri_encap", "missing-primary-encap-in-vmm-domain-relation-for-policy-enforced-epg", 8388608)
    prop._addConstant("epg-pol-enforce-redhat-unsupported", "intra-epg-isolation-is-not-supported-for-redhat-domains", 34359738368)
    prop._addConstant("epg-pol-enforce-unsupported", "intra-epg-isolation-is-not-supported-in-avs-vlan-mode-and-ave-vlan-mode-vmm-domains", 16777216)
    prop._addConstant("epg-useg-unsupported", "microsegmentation-is-not-supported-for-the-controller", 67108864)
    prop._addConstant("epp-mcast-addr-match-fabric", "epg-mcast-address-is-the-same-as-fabric-mcast-address.-domain-fabric-multicast-address-overlaps-multicast-address-pool.", 1048576)
    prop._addConstant("internal-vlan-pool-full", "insufficient-vlans.-internal-vlan-pool-full-for-epgs-in-ave-domain", 8589934592)
    prop._addConstant("invalid-encap", "no-valid-encapsulation-identifier-allocated-for-the-epg", 1)
    prop._addConstant("invalid-encap-mode", "encap-mode-cannot-be-vxlan-when-switching-mode-is-native-for-this-vmm-domain", 17179869184)
    prop._addConstant("invalid-intra-epg-isolation", "enforcing-intra-epg-isolation-is-invalid-without-primary-and-secondary-vlans-set", 274877906944)
    prop._addConstant("invalid-lag-policy-association", "invalid-enhanced-lag-policy-associated-with-this-epg", 137438953472)
    prop._addConstant("invalid-mcast-addr", "no-valid-mcast-address-allocated-for-the-epg", 65536)
    prop._addConstant("invalid-netflow-preference", "netflow-cannot-be-enabled-for-epg-associated-to-vmm-domain-in-avs-mode", 1073741824)
    prop._addConstant("invalid-static-encap", "epg-encapsulation-value-is-not-part-of-any-static-encapsulation-block-for-the-vmm-domain", 524288)
    prop._addConstant("invalid-switching-mode", "vmm-domain-needs-to-be-of-type-cisco-ave-for-switching-mode-ave", 4194304)
    prop._addConstant("invalid-trunk-portgroup-range", "trunk-portgroup-vlan-ranges-are-out-of-domain-vlan-pool", 134217728)
    prop._addConstant("invalid-usegepg-encap", "primary-encap-property-and-encap-property-both-need-to-be-set", 33554432)
    prop._addConstant("invalid-vip", "vip-has-not-been-allocated", 262144)
    prop._addConstant("invalid-vlan-encap", "vlan-encap-mode-is-not-allowed-for-ave-non-local-switching-domain", 68719476736)
    prop._addConstant("ipv6-dstaddr-unsupported", "netflow-exporter-dstaddr-supports-ipv6-from-dvs-version-6.0-and-higher.-please-use-an-ipv4-address-for-the-netflow-exporter-dstaddr", 2147483648)
    prop._addConstant("lacp-apply-failed", "lacp-update-for-portgroup-failed.", 2048)
    prop._addConstant("missing-internal-vlan-pool", "missing-internal-vlan-pools-for-epgs-in-ave-domain", 4294967296)
    prop._addConstant("no-ctrlr-dn", "controller-dn-missing.", 256)
    prop._addConstant("no-ctrlr-map", "controller-missing-from-internal-map.", 128)
    prop._addConstant("none", "n/a", 0)
    prop._addConstant("pg-api-error", "portgroup-property-get-api-failed.", 1024)
    prop._addConstant("policy-not-found", "failed-to-find-policy-container-for-controller.", 8192)
    prop._addConstant("prep-vxlan-error", "vxlan-cluster-preparation-error.", 8)
    prop._addConstant("proc-vmm-error", "cluster-type-object-missing-from-controller.", 16)
    prop._addConstant("resimedcy-unsupported", "resolution-immediacy-not-supported-for-this-domain", 536870912)
    prop._addConstant("trunk-portgroup-unsupported", "trunk-portgroup-not-supported", 268435456)
    prop._addConstant("unsupported-ctrlr", "invalid-controller-scope.", 64)
    prop._addConstant("vdn-error", "network-scope-creation-error.", 4)
    meta.props.add("setDeployIssues", prop)

    prop = PropMeta("str", "setRemoteOperIssues", "setRemoteOperIssues", 16101, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("connection-down", "connection-to-external-vmm-controller-is-down.", 32)
    prop._addConstant("discovery-protocol-mismatch", "discovery-protocol-on-dvs-is-different-than-the-one-in-the-policy.", 128)
    prop._addConstant("encapMode-mismatch", "vlan-is-set-to-none-for-port-group-on-vcenter-but-untagged-access-is-not-enabled-for-epg", 68719476736)
    prop._addConstant("event-channel-down", "event-channel-from-external-vmm-controller-is-down.", 16)
    prop._addConstant("insufficient-mtu", "fabric-mtu-should-be-greater-than-1550-for-ave/avs-vmm-domain.", 134217728)
    prop._addConstant("inv-completed-ex", "last-inventory-pull-did-not-complete-for-a-few-hosts-or-vms-or-no-hosts-found.-please-verify-the-hosts-and-vms-are-in-connected-state-in-the-vmm-controller-and-manually-re-trigger-inventory-sync-on-apic.-please-ignore-this-fault-if-there-are-no-hosts-in-the-vmm-controller.", 262144)
    prop._addConstant("invalid-backing", "invalid-backing-port-group.", 2048)
    prop._addConstant("invalid-permission", "insufficient-permission-to-create/modify-port-group", 268435456)
    prop._addConstant("invalid-portgroup-exist", "invalid-or-unknown-portgroup-exist-on-external-vmm-controller", 8)
    prop._addConstant("invalid-portgroup-name", "port-group-name-size-is-exceeding-scvmm-vm-network-name-size-limit-64-character.", 4096)
    prop._addConstant("invalid-uplink-config", "uplinks-ordered-exceed-the-maxmimum-number-of-uplinks-on-the-dvs", 137438953472)
    prop._addConstant("lnode-deleted", "lnode(dvs)-deleted-on-external-vmm-controller", 1)
    prop._addConstant("lnode-name-mismatch", "lnode(dvs)-name-mismatch", 256)
    prop._addConstant("mtu-exceeded", "given-mtu-value-exceeds-the-max-mtu-supported-by-vmware-vcenter-which-is-9000", 8589934592)
    prop._addConstant("mtu-mismatch", "mtu-on-dvs-is-different-than-the-mtu-in-the-policy.", 64)
    prop._addConstant("netflow-afto-mismatch", "netflow-vmm-exporter-active-flow-timeout-on-dvs-is-different-from-that-in-the-policy", 16777216)
    prop._addConstant("netflow-dstaddr-mismatch", "netflow-vmm-exporter-destination-address-on-dvs-is-different-from-that-in-the-policy", 2097152)
    prop._addConstant("netflow-dstport-mismatch", "netflow-vmm-exporter-destination-port-on-dvs-is-different-from-that-in-the-policy", 4194304)
    prop._addConstant("netflow-ifto-mismatch", "netflow-vmm-exporter-idle-flow-timeout-on-dvs-is-different-from-that-in-the-policy", 33554432)
    prop._addConstant("netflow-sr-mismatch", "netflow-vmm-exporter-sampling-rate-on-dvs-is-different-from-that-in-the-policy", 67108864)
    prop._addConstant("netflow-srcaddr-mismatch", "netflow-vmm-exporter-source-address-on-dvs-is-different-from-that-in-the-policy", 8388608)
    prop._addConstant("none", "none", 0)
    prop._addConstant("numofuplinks-mismatch", "number-of-uplinks-on-dvs-is-different-from-that-in-the-policy", 17179869184)
    prop._addConstant("opflex-cert-expire", "opflex-certificate-is-expiring-or-has-expired", 536870912)
    prop._addConstant("opflex-channels-down", "both-the-opflex-channels-are-down-for-the-host.-please-check-the-connections-on-the-host.", 524288)
    prop._addConstant("partial-inv", "received-partial-inventory-in-the-last-inventory-sync.-please-look-for-faults-under-vm-and-host-and-fix-them-via-vcenter,-then-manually-re-trigger-inventory-sync-on-apic", 8192)
    prop._addConstant("portgroup-bindingtype-mismatch", "portgroup-binding-type-on-dvs-is-different-from-that-in-the-policy", 1073741824)
    prop._addConstant("portgroup-deleted", "portgroup-deleted-from-external-vmm-controller", 4)
    prop._addConstant("portgroup-encap-changed", "portgroup-encapsulation-has-been-changed-on-external-vmm-controller", 2)
    prop._addConstant("portgroup-forgedtx-changed", "portgroup-forged-transmits-security-policy-has-been-changed-on-external-vmm-controller", 65536)
    prop._addConstant("portgroup-macchange-changed", "portgroup-mac-changes-security-policy-has-been-changed-on-external-vmm-controller", 32768)
    prop._addConstant("portgroup-netflowpref-changed", "portgroup-netflowpref-has-been-changed-on-external-vmm-controller", 1048576)
    prop._addConstant("portgroup-numports-mismatch", "portgroup-number-of-ports-on-dvs-is-different-from-that-in-the-policy", 2147483648)
    prop._addConstant("portgroup-portallocation-mismatch", "portgroup-allocation-type-on-dvs-is-different-from-that-in-the-policy", 4294967296)
    prop._addConstant("portgroup-promiscuous-changed", "portgroup-promiscuous-security-policy-has-been-changed-on-external-vmm-controller", 16384)
    prop._addConstant("portgroup-pvlan-changed", "portgroup-pvlan-encapsulation-has-been-changed-on-external-vmm-controller", 131072)
    prop._addConstant("ps-error", "powershell-vmnetwork-creation-error.", 1024)
    prop._addConstant("uplinkname-mismatch", "uplink-names-on-dvs-is-different-from-that-in-the-policy", 34359738368)
    prop._addConstant("vsmgmt-error", "vsmgmt-port-group-missing-in-controller.", 512)
    meta.props.add("setRemoteOperIssues", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "unsetDeployIssues", "unsetDeployIssues", 16104, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("attr-dom-not-supported", "attribute-based-epg-is-not-supported-for-the-domain-type", 131072)
    prop._addConstant("ctrlr-not-deployable", "controller-not-deployable.", 32768)
    prop._addConstant("ctrlr-unsupported", "unsupported-controller.", 16384)
    prop._addConstant("duplicate-static-encap", "duplicate-epg-encapsulation-value", 2097152)
    prop._addConstant("dvs-config-failed", "failed-to-configure-dvs.", 4096)
    prop._addConstant("dvs-error", "failed-to-get-dvs-config.", 2)
    prop._addConstant("dvs-prep-error", "dvs-preparation-error-for-vxlan.", 32)
    prop._addConstant("dvs-version-error", "could-not-get-dvs-version.", 512)
    prop._addConstant("epg-pol-enforce-missing-pri_encap", "missing-primary-encap-in-vmm-domain-relation-for-policy-enforced-epg", 8388608)
    prop._addConstant("epg-pol-enforce-redhat-unsupported", "intra-epg-isolation-is-not-supported-for-redhat-domains", 34359738368)
    prop._addConstant("epg-pol-enforce-unsupported", "intra-epg-isolation-is-not-supported-in-avs-vlan-mode-and-ave-vlan-mode-vmm-domains", 16777216)
    prop._addConstant("epg-useg-unsupported", "microsegmentation-is-not-supported-for-the-controller", 67108864)
    prop._addConstant("epp-mcast-addr-match-fabric", "epg-mcast-address-is-the-same-as-fabric-mcast-address.-domain-fabric-multicast-address-overlaps-multicast-address-pool.", 1048576)
    prop._addConstant("internal-vlan-pool-full", "insufficient-vlans.-internal-vlan-pool-full-for-epgs-in-ave-domain", 8589934592)
    prop._addConstant("invalid-encap", "no-valid-encapsulation-identifier-allocated-for-the-epg", 1)
    prop._addConstant("invalid-encap-mode", "encap-mode-cannot-be-vxlan-when-switching-mode-is-native-for-this-vmm-domain", 17179869184)
    prop._addConstant("invalid-intra-epg-isolation", "enforcing-intra-epg-isolation-is-invalid-without-primary-and-secondary-vlans-set", 274877906944)
    prop._addConstant("invalid-lag-policy-association", "invalid-enhanced-lag-policy-associated-with-this-epg", 137438953472)
    prop._addConstant("invalid-mcast-addr", "no-valid-mcast-address-allocated-for-the-epg", 65536)
    prop._addConstant("invalid-netflow-preference", "netflow-cannot-be-enabled-for-epg-associated-to-vmm-domain-in-avs-mode", 1073741824)
    prop._addConstant("invalid-static-encap", "epg-encapsulation-value-is-not-part-of-any-static-encapsulation-block-for-the-vmm-domain", 524288)
    prop._addConstant("invalid-switching-mode", "vmm-domain-needs-to-be-of-type-cisco-ave-for-switching-mode-ave", 4194304)
    prop._addConstant("invalid-trunk-portgroup-range", "trunk-portgroup-vlan-ranges-are-out-of-domain-vlan-pool", 134217728)
    prop._addConstant("invalid-usegepg-encap", "primary-encap-property-and-encap-property-both-need-to-be-set", 33554432)
    prop._addConstant("invalid-vip", "vip-has-not-been-allocated", 262144)
    prop._addConstant("invalid-vlan-encap", "vlan-encap-mode-is-not-allowed-for-ave-non-local-switching-domain", 68719476736)
    prop._addConstant("ipv6-dstaddr-unsupported", "netflow-exporter-dstaddr-supports-ipv6-from-dvs-version-6.0-and-higher.-please-use-an-ipv4-address-for-the-netflow-exporter-dstaddr", 2147483648)
    prop._addConstant("lacp-apply-failed", "lacp-update-for-portgroup-failed.", 2048)
    prop._addConstant("missing-internal-vlan-pool", "missing-internal-vlan-pools-for-epgs-in-ave-domain", 4294967296)
    prop._addConstant("no-ctrlr-dn", "controller-dn-missing.", 256)
    prop._addConstant("no-ctrlr-map", "controller-missing-from-internal-map.", 128)
    prop._addConstant("none", "n/a", 0)
    prop._addConstant("pg-api-error", "portgroup-property-get-api-failed.", 1024)
    prop._addConstant("policy-not-found", "failed-to-find-policy-container-for-controller.", 8192)
    prop._addConstant("prep-vxlan-error", "vxlan-cluster-preparation-error.", 8)
    prop._addConstant("proc-vmm-error", "cluster-type-object-missing-from-controller.", 16)
    prop._addConstant("resimedcy-unsupported", "resolution-immediacy-not-supported-for-this-domain", 536870912)
    prop._addConstant("trunk-portgroup-unsupported", "trunk-portgroup-not-supported", 268435456)
    prop._addConstant("unsupported-ctrlr", "invalid-controller-scope.", 64)
    prop._addConstant("vdn-error", "network-scope-creation-error.", 4)
    meta.props.add("unsetDeployIssues", prop)

    prop = PropMeta("str", "unsetRemoteOperIssues", "unsetRemoteOperIssues", 16102, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("connection-down", "connection-to-external-vmm-controller-is-down.", 32)
    prop._addConstant("discovery-protocol-mismatch", "discovery-protocol-on-dvs-is-different-than-the-one-in-the-policy.", 128)
    prop._addConstant("encapMode-mismatch", "vlan-is-set-to-none-for-port-group-on-vcenter-but-untagged-access-is-not-enabled-for-epg", 68719476736)
    prop._addConstant("event-channel-down", "event-channel-from-external-vmm-controller-is-down.", 16)
    prop._addConstant("insufficient-mtu", "fabric-mtu-should-be-greater-than-1550-for-ave/avs-vmm-domain.", 134217728)
    prop._addConstant("inv-completed-ex", "last-inventory-pull-did-not-complete-for-a-few-hosts-or-vms-or-no-hosts-found.-please-verify-the-hosts-and-vms-are-in-connected-state-in-the-vmm-controller-and-manually-re-trigger-inventory-sync-on-apic.-please-ignore-this-fault-if-there-are-no-hosts-in-the-vmm-controller.", 262144)
    prop._addConstant("invalid-backing", "invalid-backing-port-group.", 2048)
    prop._addConstant("invalid-permission", "insufficient-permission-to-create/modify-port-group", 268435456)
    prop._addConstant("invalid-portgroup-exist", "invalid-or-unknown-portgroup-exist-on-external-vmm-controller", 8)
    prop._addConstant("invalid-portgroup-name", "port-group-name-size-is-exceeding-scvmm-vm-network-name-size-limit-64-character.", 4096)
    prop._addConstant("invalid-uplink-config", "uplinks-ordered-exceed-the-maxmimum-number-of-uplinks-on-the-dvs", 137438953472)
    prop._addConstant("lnode-deleted", "lnode(dvs)-deleted-on-external-vmm-controller", 1)
    prop._addConstant("lnode-name-mismatch", "lnode(dvs)-name-mismatch", 256)
    prop._addConstant("mtu-exceeded", "given-mtu-value-exceeds-the-max-mtu-supported-by-vmware-vcenter-which-is-9000", 8589934592)
    prop._addConstant("mtu-mismatch", "mtu-on-dvs-is-different-than-the-mtu-in-the-policy.", 64)
    prop._addConstant("netflow-afto-mismatch", "netflow-vmm-exporter-active-flow-timeout-on-dvs-is-different-from-that-in-the-policy", 16777216)
    prop._addConstant("netflow-dstaddr-mismatch", "netflow-vmm-exporter-destination-address-on-dvs-is-different-from-that-in-the-policy", 2097152)
    prop._addConstant("netflow-dstport-mismatch", "netflow-vmm-exporter-destination-port-on-dvs-is-different-from-that-in-the-policy", 4194304)
    prop._addConstant("netflow-ifto-mismatch", "netflow-vmm-exporter-idle-flow-timeout-on-dvs-is-different-from-that-in-the-policy", 33554432)
    prop._addConstant("netflow-sr-mismatch", "netflow-vmm-exporter-sampling-rate-on-dvs-is-different-from-that-in-the-policy", 67108864)
    prop._addConstant("netflow-srcaddr-mismatch", "netflow-vmm-exporter-source-address-on-dvs-is-different-from-that-in-the-policy", 8388608)
    prop._addConstant("none", "none", 0)
    prop._addConstant("numofuplinks-mismatch", "number-of-uplinks-on-dvs-is-different-from-that-in-the-policy", 17179869184)
    prop._addConstant("opflex-cert-expire", "opflex-certificate-is-expiring-or-has-expired", 536870912)
    prop._addConstant("opflex-channels-down", "both-the-opflex-channels-are-down-for-the-host.-please-check-the-connections-on-the-host.", 524288)
    prop._addConstant("partial-inv", "received-partial-inventory-in-the-last-inventory-sync.-please-look-for-faults-under-vm-and-host-and-fix-them-via-vcenter,-then-manually-re-trigger-inventory-sync-on-apic", 8192)
    prop._addConstant("portgroup-bindingtype-mismatch", "portgroup-binding-type-on-dvs-is-different-from-that-in-the-policy", 1073741824)
    prop._addConstant("portgroup-deleted", "portgroup-deleted-from-external-vmm-controller", 4)
    prop._addConstant("portgroup-encap-changed", "portgroup-encapsulation-has-been-changed-on-external-vmm-controller", 2)
    prop._addConstant("portgroup-forgedtx-changed", "portgroup-forged-transmits-security-policy-has-been-changed-on-external-vmm-controller", 65536)
    prop._addConstant("portgroup-macchange-changed", "portgroup-mac-changes-security-policy-has-been-changed-on-external-vmm-controller", 32768)
    prop._addConstant("portgroup-netflowpref-changed", "portgroup-netflowpref-has-been-changed-on-external-vmm-controller", 1048576)
    prop._addConstant("portgroup-numports-mismatch", "portgroup-number-of-ports-on-dvs-is-different-from-that-in-the-policy", 2147483648)
    prop._addConstant("portgroup-portallocation-mismatch", "portgroup-allocation-type-on-dvs-is-different-from-that-in-the-policy", 4294967296)
    prop._addConstant("portgroup-promiscuous-changed", "portgroup-promiscuous-security-policy-has-been-changed-on-external-vmm-controller", 16384)
    prop._addConstant("portgroup-pvlan-changed", "portgroup-pvlan-encapsulation-has-been-changed-on-external-vmm-controller", 131072)
    prop._addConstant("ps-error", "powershell-vmnetwork-creation-error.", 1024)
    prop._addConstant("uplinkname-mismatch", "uplink-names-on-dvs-is-different-from-that-in-the-policy", 34359738368)
    prop._addConstant("vsmgmt-error", "vsmgmt-port-group-missing-in-controller.", 512)
    meta.props.add("unsetRemoteOperIssues", prop)

    prop = PropMeta("str", "usr", "usr", 1014, PropCategory.REGULAR)
    prop.label = "Username"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("usr", prop)

    prop = PropMeta("str", "vendor", "vendor", 5591, PropCategory.REGULAR)
    prop.label = "Vendor"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    prop.defaultValue = "Cisco Systems, Inc"
    prop.defaultValueStr = "Cisco Systems, Inc"
    meta.props.add("vendor", prop)

    prop = PropMeta("str", "vspherePHA", "vspherePHA", 44726, PropCategory.REGULAR)
    prop.label = "Supports vSphere Proactive HA"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("vspherePHA", prop)

    prop = PropMeta("str", "vsphereTag", "vsphereTag", 30039, PropCategory.REGULAR)
    prop.label = "Supports vSphere Tags"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("vsphereTag", prop)

    prop = PropMeta("str", "vxlanDeplPref", "vxlanDeplPref", 23410, PropCategory.REGULAR)
    prop.label = "VxLAN Deployment Preference"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "vxlan"
    prop._addConstant("nsx", "do-not-depoly-virutal-wire-in-the-controller", 0)
    prop._addConstant("vxlan", "deploy-virtual-wire-in-the-controller", 1)
    meta.props.add("vxlanDeplPref", prop)

    meta.namingProps.append(getattr(meta.props, "domName"))
    getattr(meta.props, "domName").needDelimiter = True
    meta.namingProps.append(getattr(meta.props, "name"))

    def __init__(self, parentMoOrDn, domName, name, markDirty=True, **creationProps):
        namingVals = [domName, name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

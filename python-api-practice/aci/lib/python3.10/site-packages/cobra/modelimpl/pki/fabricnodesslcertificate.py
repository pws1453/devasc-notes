# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class FabricNodeSSLCertificate(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.pki.FabricNodeSSLCertificate")

    meta.moClassName = "pkiFabricNodeSSLCertificate"
    meta.rnFormat = "ifmcertnode-%(nodeId)s"
    meta.category = MoCategory.REGULAR
    meta.label = "SSL Certificate for each node"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fault.Delegate")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.pki.FabricCommunicationEp")

    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Def")
    meta.superClasses.add("cobra.model.pki.Definition")

    meta.rnPrefixes = [
        ('ifmcertnode-', True),
    ]

    prop = PropMeta("str", "authorityKeyIdentifier", "authorityKeyIdentifier", 22518, PropCategory.REGULAR)
    prop.label = "Authority Key Identifier for CA private key"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("authorityKeyIdentifier", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "data", "data", 22519, PropCategory.REGULAR)
    prop.label = "Raw Base64 DER encoded certificate"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("data", prop)

    prop = PropMeta("str", "descr", "descr", 5579, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "expiredCertificate", "expiredCertificate", 22507, PropCategory.REGULAR)
    prop.label = "Expired Certificate flag"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("expiredCertificate", prop)

    prop = PropMeta("str", "invalidIssuer", "invalidIssuer", 22509, PropCategory.REGULAR)
    prop.label = "Invalid Issuer for certificate"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("invalidIssuer", prop)

    prop = PropMeta("str", "invalidSigningCAForCertificate", "invalidSigningCAForCertificate", 22512, PropCategory.REGULAR)
    prop.label = "Invalid Signing CA - signature not from Cisco CA"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("invalidSigningCAForCertificate", prop)

    prop = PropMeta("str", "invalidSubjectFormat", "invalidSubjectFormat", 22511, PropCategory.REGULAR)
    prop.label = "Invalid Subject Format - indicates parse failure"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("invalidSubjectFormat", prop)

    prop = PropMeta("str", "issuer", "issuer", 22508, PropCategory.REGULAR)
    prop.label = "Issuer of certificate"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("issuer", prop)

    prop = PropMeta("str", "keySize", "keySize", 22516, PropCategory.REGULAR)
    prop.label = "Encryption Algorithm key size of x509 certificate"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("keySize", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "message", "message", 22520, PropCategory.REGULAR)
    prop.label = "Informational messages during certificate parsing"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("message", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 22534, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 1221, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "nodeId", "nodeId", 22503, PropCategory.REGULAR)
    prop.label = "Id of node"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("nodeId", prop)

    prop = PropMeta("str", "nodeType", "nodeType", 22501, PropCategory.REGULAR)
    prop.label = "Type of Node"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "Unknown"
    prop._addConstant("Local", "local", 0)
    prop._addConstant("Neighbor", "neighbor", 1)
    prop._addConstant("Unknown", "unknown", 2)
    meta.props.add("nodeType", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15230, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15231, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "publicKeyAlgorithm", "publicKeyAlgorithm", 22515, PropCategory.REGULAR)
    prop.label = "Public Key Algorithm of x509 certificate"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("publicKeyAlgorithm", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "serialNumber", "serialNumber", 22502, PropCategory.REGULAR)
    prop.label = "Serial Number of Node derived from SSL certificate"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("serialNumber", prop)

    prop = PropMeta("str", "signatureAlgorithm", "signatureAlgorithm", 22514, PropCategory.REGULAR)
    prop.label = "Signature Algorithm of x509 certificate"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("signatureAlgorithm", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "subject", "subject", 22510, PropCategory.REGULAR)
    prop.label = "Subject/DN of certificate"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("subject", prop)

    prop = PropMeta("str", "subjectKeyIdentifier", "subjectKeyIdentifier", 22517, PropCategory.REGULAR)
    prop.label = "Subject Key Identifier for this certificate"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("subjectKeyIdentifier", prop)

    prop = PropMeta("str", "validCertificate", "validCertificate", 22504, PropCategory.REGULAR)
    prop.label = "Valid certificate flag"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("validCertificate", prop)

    prop = PropMeta("str", "validityNotAfter", "validityNotAfter", 22506, PropCategory.REGULAR)
    prop.label = "Validity start date of certificate"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("validityNotAfter", prop)

    prop = PropMeta("str", "validityNotBefore", "validityNotBefore", 22505, PropCategory.REGULAR)
    prop.label = "Validity start date of certificate"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("validityNotBefore", prop)

    prop = PropMeta("str", "version", "version", 22513, PropCategory.REGULAR)
    prop.label = "Version of x509 certificate"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("version", prop)

    meta.namingProps.append(getattr(meta.props, "nodeId"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Fabric"

    def __init__(self, parentMoOrDn, nodeId, markDirty=True, **creationProps):
        namingVals = [nodeId]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

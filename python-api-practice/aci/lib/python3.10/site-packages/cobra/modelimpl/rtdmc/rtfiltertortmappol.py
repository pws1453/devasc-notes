# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class RtFilterToRtMapPol(Mo):
    """
    

    """

    meta = TargetRelationMeta("cobra.model.rtdmc.RtFilterToRtMapPol", "cobra.model.rtdmc.AFilterPol")

    meta.moClassName = "rtdmcRtFilterToRtMapPol"
    meta.rnFormat = "rtfilterToRtMapPol-[%(tDn)s]"
    meta.category = MoCategory.RELATIONSHIP_FROM_LOCAL
    meta.label = "Abstraction of Filter Policy"
    meta.writeAccessMask = 0x0
    meta.readAccessMask = 0x20000001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.parentClasses.add("cobra.model.pim.RouteMapDef")
    meta.parentClasses.add("cobra.model.pim.RouteMapPol")

    meta.superClasses.add("cobra.model.reln.From")
    meta.superClasses.add("cobra.model.reln.Inst")

    meta.rnPrefixes = [
        ('rtfilterToRtMapPol-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tCl", "tCl", 25223, PropCategory.REGULAR)
    prop.label = "Target-class"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 8707
    prop.defaultValueStr = "rtdmcAFilterPol"
    prop._addConstant("igmpRepDef", None, 8941)
    prop._addConstant("igmpRepPol", None, 8808)
    prop._addConstant("igmpStRepDef", None, 8940)
    prop._addConstant("igmpStRepPol", None, 8807)
    prop._addConstant("igmpStateLDef", None, 8942)
    prop._addConstant("igmpStateLPol", None, 8809)
    prop._addConstant("pimBSRFilterDef", None, 8535)
    prop._addConstant("pimBSRFilterPol", None, 8534)
    prop._addConstant("pimInterVRFEntryDef", None, 12380)
    prop._addConstant("pimInterVRFEntryPol", None, 12379)
    prop._addConstant("pimJPInbFilterDef", None, 8710)
    prop._addConstant("pimJPInbFilterPol", None, 8517)
    prop._addConstant("pimJPOutbFilterDef", None, 8711)
    prop._addConstant("pimJPOutbFilterPol", None, 8518)
    prop._addConstant("pimMAFilterDef", None, 8533)
    prop._addConstant("pimMAFilterPol", None, 8532)
    prop._addConstant("pimNbrFilterDef", None, 8712)
    prop._addConstant("pimNbrFilterPol", None, 8519)
    prop._addConstant("pimRPGrpRangeDef", None, 8539)
    prop._addConstant("pimRPGrpRangePol", None, 8538)
    prop._addConstant("pimRegTrDef", None, 8545)
    prop._addConstant("pimRegTrPol", None, 8544)
    prop._addConstant("pimResDef", None, 8547)
    prop._addConstant("pimResPol", None, 8546)
    prop._addConstant("pimSGRangeExpDef", None, 8551)
    prop._addConstant("pimSGRangeExpPol", None, 8550)
    prop._addConstant("pimSSMRangeDef", None, 8557)
    prop._addConstant("pimSSMRangePol", None, 8556)
    prop._addConstant("pimSharedRangeDef", None, 8553)
    prop._addConstant("pimSharedRangePol", None, 8552)
    prop._addConstant("rtdmcAFilterPol", None, 8707)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("tCl", prop)

    prop = PropMeta("str", "tDn", "tDn", 25222, PropCategory.REGULAR)
    prop.label = "Target-dn"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("tDn", prop)

    meta.namingProps.append(getattr(meta.props, "tDn"))
    getattr(meta.props, "tDn").needDelimiter = True

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("L3IfPolToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("PimRouteMapPolToNwIfViaBDForIgmp", "PIM Route Map Policy to Interface via Bridge Domain for Igmp", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("PimRouteMapPolToNwIfViaL3OutForIgmp", "PIM Route Map Policy to Interface via L3Out for Igmp", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("PimRouteMapPolToNwIfViaBDForPim", "PIM Route Map Policy to Interface via Bridge Domain for Pim", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("PimRouteMapPolToNwIfViaL3OutForPim", "PIM Route Map Policy to Interface via L3Out for Pim", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("PimRouteMapPolToNwIfViaCtx", "PIM Route Map Policy to Interface via Context", "cobra.model.nw.If"))

    def __init__(self, parentMoOrDn, tDn, markDirty=True, **creationProps):
        namingVals = [tDn]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class HistDataHolder(Mo):
    """
    container for history data statistics chunks.

    """

    meta = ClassMeta("cobra.model.statstore.HistDataHolder")

    meta.moClassName = "statstoreHistDataHolder"
    meta.rnFormat = "hist-%(statClass)s"
    meta.category = MoCategory.REGULAR
    meta.label = "History Data Holder"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))

    meta.parentClasses.add("cobra.model.statstore.ObsHolder")

    meta.rnPrefixes = [
        ('hist-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 38077, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "currHistIndex", "currHistIndex", 15208, PropCategory.REGULAR)
    prop.label = "Current History Index"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("currHistIndex", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 40216, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "historySize", "historySize", 15207, PropCategory.REGULAR)
    prop.label = "History Size"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("historySize", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "statClass", "statClass", 15206, PropCategory.REGULAR)
    prop.label = "Stats Class"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("acllogFlowCounter", "flow-record-counter", 8610)
    prop._addConstant("acllogFlowCounterAg", "aggregated-flow-record-counter", 8628)
    prop._addConstant("actrlRuleHit", "rule-hits", 2408)
    prop._addConstant("actrlRuleHitAg", "aggregated-rule-hits", 2412)
    prop._addConstant("actrlRuleHitPart", "part-of-rule-hits", 2410)
    prop._addConstant("aibAdjCounts", "adjacency-counts", 15533)
    prop._addConstant("analyticsDropped", "netflow-drop-counters", 9444)
    prop._addConstant("analyticsExport", "netflow-export-counters", 9426)
    prop._addConstant("bfdPduStats", "bfd-session-stats", 14249)
    prop._addConstant("bgpBgpPeerBytes", "bgp-peer-bytes", 15708)
    prop._addConstant("bgpBgpPeerKeepAlive", "bgp-peer-keepalive", 15654)
    prop._addConstant("bgpBgpPeerMsg", "bgp-peer-msg", 15690)
    prop._addConstant("bgpBgpPeerOpen", "bgp-peer-open", 15636)
    prop._addConstant("bgpBgpPeerRoute", "bgp-peer-route", 15672)
    prop._addConstant("bgpBgpRtPrefixCount", "bgp-route-prefix-count", 15726)
    prop._addConstant("bgpPeerBytes", "bgp-peer-bytes", 13832)
    prop._addConstant("bgpPeerKeepAlive", "bgp-peer-keepalive", 13778)
    prop._addConstant("bgpPeerMsg", "bgp-peer-msg", 13814)
    prop._addConstant("bgpPeerOpen", "bgp-peer-open", 13760)
    prop._addConstant("bgpPeerRoute", "bgp-peer-route", 13796)
    prop._addConstant("cloudAppGwStats", "azure-alb-front-end-stats", 16248)
    prop._addConstant("cloudAppGwStatsAg", "aggregated-azure-alb-front-end-stats", 16266)
    prop._addConstant("cloudEgressBytes", "cloud-egress-bytes", 14766)
    prop._addConstant("cloudEgressBytesAg", "aggregated-cloud-egress-bytes", 14784)
    prop._addConstant("cloudEgressPkts", "cloud-egress-packets", 14730)
    prop._addConstant("cloudEgressPktsAg", "aggregated-cloud-egress-packets", 14748)
    prop._addConstant("cloudHostRouterEgressBytes", "host-router-egress-bytes", 15978)
    prop._addConstant("cloudHostRouterEgressBytesAg", "aggregated-host-router-egress-bytes", 15996)
    prop._addConstant("cloudHostRouterEgressPkts", "host-router-egress-packets", 15942)
    prop._addConstant("cloudHostRouterEgressPktsAg", "aggregated-host-router-egress-packets", 15960)
    prop._addConstant("cloudHostRouterIngressBytes", "host-router-cloud-ingress-bytess", 15906)
    prop._addConstant("cloudHostRouterIngressBytesAg", "aggregated-host-router-cloud-ingress-bytess", 15924)
    prop._addConstant("cloudHostRouterIngressPkts", "host-router-ingress-packets", 15870)
    prop._addConstant("cloudHostRouterIngressPktsAg", "aggregated-host-router-ingress-packets", 15888)
    prop._addConstant("cloudIngressBytes", "cloud-ingress-bytess", 14694)
    prop._addConstant("cloudIngressBytesAg", "aggregated-cloud-ingress-bytess", 14712)
    prop._addConstant("cloudIngressPkts", "cloud-ingress-packets", 14658)
    prop._addConstant("cloudIngressPktsAg", "aggregated-cloud-ingress-packets", 14676)
    prop._addConstant("cloudLBStats", "alb-front-end-stats", 15332)
    prop._addConstant("cloudLBStatsAg", "aggregated-alb-front-end-stats", 15350)
    prop._addConstant("cloudPoolHealthStats", "alb-back-end-pool-health-stats", 15368)
    prop._addConstant("cloudPoolHealthStatsAg", "aggregated-alb-back-end-pool-health-stats", 15386)
    prop._addConstant("cloudPoolResponseLatency", "alb-back-end-pool-response-latency", 15404)
    prop._addConstant("cloudPoolResponseLatencyAg", "aggregated-alb-back-end-pool-response-latency", 15422)
    prop._addConstant("commWebConn", "web-connections", 6499)
    prop._addConstant("commWebConnAg", "aggregated-web-connections", 6503)
    prop._addConstant("commWebConnStates", "web-connections-state", 6553)
    prop._addConstant("commWebConnStatesAg", "aggregated-web-connections-state", 6557)
    prop._addConstant("commWebReq", "web-requests", 6445)
    prop._addConstant("commWebReqAg", "aggregated-web-requests", 6449)
    prop._addConstant("compHostStats", "host", 1132)
    prop._addConstant("compRcvdBytes", "received-bytes", 1186)
    prop._addConstant("compRcvdErrPkts", "received-error-packets", 1168)
    prop._addConstant("compRcvdPkts", "received-packets", 1150)
    prop._addConstant("compTrnsmtdBytes", "transmitted-bytes", 1240)
    prop._addConstant("compTrnsmtdErrPkts", "transmitted-error-packets", 1222)
    prop._addConstant("compTrnsmtdPkts", "transmitted-packets", 1204)
    prop._addConstant("coppAllow", "copp-allow-counters", 5659)
    prop._addConstant("coppArpAllow", "per-interface-allow-counters-for-arp", 10171)
    prop._addConstant("coppArpDrop", "per-interface-drop-counters-for-arp", 10189)
    prop._addConstant("coppBfdAllow", "per-interface-allow-counters-for-bfd", 10459)
    prop._addConstant("coppBfdDrop", "per-interface-drop-counters-for-bfd", 10477)
    prop._addConstant("coppBgpAllow", "per-interface-allow-counters-for-bgp", 10387)
    prop._addConstant("coppBgpDrop", "per-interface-drop-counters-for-bgp", 10405)
    prop._addConstant("coppCdpAllow", "per-interface-allow-counters-for-cdp", 10279)
    prop._addConstant("coppCdpDrop", "per-interface-drop-counters-for-cdp", 10297)
    prop._addConstant("coppDrop", "copp-drop-counters", 5677)
    prop._addConstant("coppDropped", "copp-dropped-counters", 10811)
    prop._addConstant("coppFilterStats", "filter-match-counters", 10495)
    prop._addConstant("coppIcmpAllow", "per-interface-allow-counters-for-icmp", 10243)
    prop._addConstant("coppIcmpDrop", "per-interface-drop-counters-for-icmp", 10261)
    prop._addConstant("coppLacpAllow", "per-interface-allow-counters-for-lacp", 10351)
    prop._addConstant("coppLacpDrop", "per-interface-drop-counters-for-lacp", 10369)
    prop._addConstant("coppLldpAllow", "per-interface-allow-counters-for-lldp", 10315)
    prop._addConstant("coppLldpDrop", "per-interface-drop-counters-for-lldp", 10333)
    prop._addConstant("coppOspfAllow", "per-interface-allow-counters-for-ospf", 10207)
    prop._addConstant("coppOspfDrop", "per-interface-drop-counters-for-ospf", 10225)
    prop._addConstant("coppPermit", "filter-counters", 10793)
    prop._addConstant("coppPermitAg", "aggregated-filter-counters", 11056)
    prop._addConstant("coppPermitPart", "part-of-filter-counters", 11038)
    prop._addConstant("coppStpAllow", "per-interface-allow-counters-for-stp", 10423)
    prop._addConstant("coppStpDrop", "per-interface-drop-counters-for-stp", 10441)
    prop._addConstant("dppEgrAllow", "egress-data-plane-policer-allow-counters", 8111)
    prop._addConstant("dppEgrDrop", "egress-data-plane-policer-drop-counters", 8129)
    prop._addConstant("dppIfCktAllow", "if-ckt-ingress-data-plane-policer-allow-counters", 10575)
    prop._addConstant("dppIfCktAllowAg", "aggregated-if-ckt-ingress-data-plane-policer-allow-counters", 10872)
    prop._addConstant("dppIfCktAllowPart", "part-of-if-ckt-ingress-data-plane-policer-allow-counters", 10854)
    prop._addConstant("dppIfCktDrop", "if-ckt-ingress-data-plane-policer-drop-counters", 10593)
    prop._addConstant("dppIfCktDropAg", "aggregated-if-ckt-ingress-data-plane-policer-drop-counters", 10908)
    prop._addConstant("dppIfCktDropPart", "part-of-if-ckt-ingress-data-plane-policer-drop-counters", 10890)
    prop._addConstant("dppIngrAllow", "ingress-data-plane-policer-allow-counters", 8075)
    prop._addConstant("dppIngrDrop", "ingress-data-plane-policer-drop-counters", 8093)
    prop._addConstant("eqptBvmacsecrxpkts", "bv-macsec-rx-pkts", 12316)
    prop._addConstant("eqptBvmacsectxpkts", "bv-macsec-tx-pkts", 12334)
    prop._addConstant("eqptEgrAggrBytes", "egress-aggregated-bytes", 8876)
    prop._addConstant("eqptEgrAggrPkts", "egress-aggregated-packets", 8858)
    prop._addConstant("eqptEgrBytes", "egress-bytes", 3124)
    prop._addConstant("eqptEgrDropPkts", "egress-drop-packets", 3143)
    prop._addConstant("eqptEgrPkts", "egress-packets", 3105)
    prop._addConstant("eqptEgrTotal", "egress", 3181)
    prop._addConstant("eqptFanStats", "fan", 3318)
    prop._addConstant("eqptFruPower", "fru-power", 3280)
    prop._addConstant("eqptIngrAggrBytes", "ingress-aggregated-bytes", 8840)
    prop._addConstant("eqptIngrAggrPkts", "ingress-aggregated-packets", 8822)
    prop._addConstant("eqptIngrBytes", "ingress-bytes", 3048)
    prop._addConstant("eqptIngrCrcErrPkts", "ingress-crc-error-packets", 16535)
    prop._addConstant("eqptIngrDropPkts", "ingress-drop-packets", 3086)
    prop._addConstant("eqptIngrErrPkts", "ingress-error-packets", 12573)
    prop._addConstant("eqptIngrPkts", "ingress-packets", 3010)
    prop._addConstant("eqptIngrStorm", "ingress-storm-ctrl", 5937)
    prop._addConstant("eqptIngrStormBc", "ingress-storm-ctrl-broadcast", 10044)
    prop._addConstant("eqptIngrStormMc", "ingress-storm-ctrl-multicast", 10062)
    prop._addConstant("eqptIngrStormUc", "ingress-storm-ctrl-unicast", 10026)
    prop._addConstant("eqptIngrTotal", "ingress", 3162)
    prop._addConstant("eqptIngrUnkBytes", "ingress-unknown-bytes", 3067)
    prop._addConstant("eqptIngrUnkPkts", "ingress-unknown-packets", 3029)
    prop._addConstant("eqptMacsecrxbytes", "macsec-rx-bytes", 10083)
    prop._addConstant("eqptMacsecrxpkts", "macsec-rx-pkts", 10101)
    prop._addConstant("eqptMacsectxbytes", "macsec-tx-bytes", 10119)
    prop._addConstant("eqptMacsectxpkts", "macsec-tx-pkts", 10137)
    prop._addConstant("eqptPsPower", "power-supply", 3299)
    prop._addConstant("eqptTemp", "temperature", 3256)
    prop._addConstant("eqptcapacityBDEntry", "bridge-domain-entry", 2870)
    prop._addConstant("eqptcapacityBdUsage", "bridge-domain-usage-count", 13691)
    prop._addConstant("eqptcapacityEpgUsage", "endpoint-groups-usage", 13709)
    prop._addConstant("eqptcapacityL2Entry", "layer2-entry", 2889)
    prop._addConstant("eqptcapacityL2RemoteUsage", "layer2-remote-entries-usage-count", 11551)
    prop._addConstant("eqptcapacityL2TotalUsage", "layer2-total-entries-usage-count", 11569)
    prop._addConstant("eqptcapacityL2Usage", "layer2-entries-usage-count", 6689)
    prop._addConstant("eqptcapacityL3Entry", "layer3-entry", 2909)
    prop._addConstant("eqptcapacityL3RemoteUsage", "layer3-remote-entries-usage-count", 11587)
    prop._addConstant("eqptcapacityL3RemoteUsageCap", "layer3-remote-entries-max-capacity", 11623)
    prop._addConstant("eqptcapacityL3RemoteUsagePer", "layer3-remote-entries-usage-percentage", 11605)
    prop._addConstant("eqptcapacityL3TotalUsage", "layer3-total-entries-usage-count", 11641)
    prop._addConstant("eqptcapacityL3TotalUsageCap", "layer3-total-entries-max-capacity", 11677)
    prop._addConstant("eqptcapacityL3TotalUsagePer", "layer3-total-entries-usage-percentage", 11659)
    prop._addConstant("eqptcapacityL3Usage", "layer3-entries-usage-count", 6725)
    prop._addConstant("eqptcapacityL3UsageCap", "layer3-entries-max-capacity", 6907)
    prop._addConstant("eqptcapacityL3UsagePer", "layer3-entries-usage-percentage", 9156)
    prop._addConstant("eqptcapacityL3v4Usage32", "layer3-v4-32-entries-usage-count", 12705)
    prop._addConstant("eqptcapacityL3v4Usage32Cap", "layer3-v4-32-entries-max-capacity", 12741)
    prop._addConstant("eqptcapacityL3v4Usage32Per", "layer3-v4-32-entries-usage-percentage", 12723)
    prop._addConstant("eqptcapacityL3v6Usage128", "layer3-v6-128-entries-usage-count", 12759)
    prop._addConstant("eqptcapacityL3v6Usage128Cap", "layer3-v6-128-entries-max-capacity", 12795)
    prop._addConstant("eqptcapacityL3v6Usage128Per", "layer3-v6-128-entries-usage-percentage", 12777)
    prop._addConstant("eqptcapacityMcastEntry", "multicast-entry", 2947)
    prop._addConstant("eqptcapacityMcastUsage", "multicast-entries-usage", 6671)
    prop._addConstant("eqptcapacityPGLabelEntry", "pg-label-entry", 12861)
    prop._addConstant("eqptcapacityPGLabelUsage", "pg-label-entries-usage", 12879)
    prop._addConstant("eqptcapacityPolEntry", "policy-entry", 2928)
    prop._addConstant("eqptcapacityPolOTCAMEntry", "policy-overflow-tcam-entry", 15762)
    prop._addConstant("eqptcapacityPolOTCAMUsage", "policy-overflow-tcam-entries-usage", 15780)
    prop._addConstant("eqptcapacityPolUsage", "policy-entries-usage", 6707)
    prop._addConstant("eqptcapacityPortUsage", "physical-port-usage", 13727)
    prop._addConstant("eqptcapacityPrefixEntries", "prefix-(i-pv4-and-i-pv6)-entries", 6626)
    prop._addConstant("eqptcapacityPrefixEntriesUsage", "prefix-entries-usage-count", 12815)
    prop._addConstant("eqptcapacityPrefixEntriesUsageCap", "prefix-entries-usage-capacity", 12833)
    prop._addConstant("eqptcapacityRouterIpEntries", "router-ip-(i-pv4-and-i-pv6)-entries", 6761)
    prop._addConstant("eqptcapacityVlanUsage", "vlan-entries-usage", 6743)
    prop._addConstant("eqptcapacityVlanXlateEntries", "vlan-xlate-entries", 7052)
    prop._addConstant("eqptcapacityVrfUsage", "vrf-usage-count", 13673)
    prop._addConstant("eqptcapacityWideTcamPrefixEntries", "wide-tcam-prefix-i-pv6-entries", 11276)
    prop._addConstant("fabricAcDropExcess", "drop-packets", 423)
    prop._addConstant("fabricAcTxRx", "packets", 404)
    prop._addConstant("fabricNodeHealth", "node-health", 462)
    prop._addConstant("fabricOverallHealth", "overall-fabric-health", 444)
    prop._addConstant("fcInputBytes", "input-bytes", 12049)
    prop._addConstant("fcInputC2Frames", "input-c2-frames", 12387)
    prop._addConstant("fcInputCastFrames", "input-cast-frames", 12423)
    prop._addConstant("fcInputClassDiscards", "input-class-discards", 12405)
    prop._addConstant("fcInputDisFrames", "input-discards-frames", 12013)
    prop._addConstant("fcInputErrors", "input-errors", 12441)
    prop._addConstant("fcInputFrames", "input-frames", 11995)
    prop._addConstant("fcInputLIPErrors", "input-lip-errors", 12477)
    prop._addConstant("fcInputLink", "input-link", 12067)
    prop._addConstant("fcInputOtherErrors", "input-other-errors", 12459)
    prop._addConstant("fcInputTotalByte", "total-input-bytes", 12085)
    prop._addConstant("fcInputUnkClass", "input-unknown-class", 12031)
    prop._addConstant("fcLinkFail", "link-failures", 12193)
    prop._addConstant("fcOutputBytes", "output-bytes", 12157)
    prop._addConstant("fcOutputCastFrames", "output-cast-frames", 12495)
    prop._addConstant("fcOutputDisFrames", "output-discards-frames", 12139)
    prop._addConstant("fcOutputFrames", "output-frames", 12121)
    prop._addConstant("fcOutputLIPErrors", "output-lip-errors", 12513)
    prop._addConstant("fcOutputLink", "output-link", 12175)
    prop._addConstant("fcOutputTotalByte", "total-output-bytes", 12211)
    prop._addConstant("fcReceiveB2BCredit", "receive-b2b-credit", 12103)
    prop._addConstant("fcReceiveFecCounters", "fec-counters", 13058)
    prop._addConstant("fcTransmitB2BCredit", "transmit-b2b-credit", 12229)
    prop._addConstant("fvFltCounter", "fault-counter", 9915)
    prop._addConstant("fvOverallHealth", "overall-tenant-health", 2009)
    prop._addConstant("infraClusterStats", "cluster", 4469)
    prop._addConstant("infraReplicaStats", "replica", 4490)
    prop._addConstant("isisFtagTreeStats", "ftag", 2807)
    prop._addConstant("isisIsisCsnpErrStats", "isis-csnp-error-packets", 13359)
    prop._addConstant("isisIsisCsnpStats", "isis-csnp-packets", 13341)
    prop._addConstant("isisIsisLanStats", "isis-lan-packets", 13323)
    prop._addConstant("isisIsisLspErrStats", "isis-lsp-error-packets", 13413)
    prop._addConstant("isisIsisLspStats", "isis-lsp-packets", 13395)
    prop._addConstant("isisIsisP2pStats", "isis-p2p-packets", 13305)
    prop._addConstant("isisIsisPsnpStats", "isis-psnp-packets", 13377)
    prop._addConstant("isisTreeCalcNodeStats", "ftag-global-node", 2788)
    prop._addConstant("isisTreeCalcStats", "ftag-global", 2769)
    prop._addConstant("l2EgrBytes", "egress-bytes", 7382)
    prop._addConstant("l2EgrBytesAg", "aggregated-egress-bytes", 7386)
    prop._addConstant("l2EgrBytesPart", "part-of-egress-bytes", 7384)
    prop._addConstant("l2EgrPkts", "egress-packets", 7328)
    prop._addConstant("l2EgrPktsAg", "aggregated-egress-packets", 7332)
    prop._addConstant("l2EgrPktsPart", "part-of-egress-packets", 7330)
    prop._addConstant("l2IngrBytes", "ingress-bytes", 3494)
    prop._addConstant("l2IngrBytesAg", "aggregated-ingress-bytes", 3498)
    prop._addConstant("l2IngrBytesPart", "part-of-ingress-bytes", 3496)
    prop._addConstant("l2IngrPkts", "ingress-packets", 3439)
    prop._addConstant("l2IngrPktsAg", "aggregated-ingress-packets", 3443)
    prop._addConstant("l2IngrPktsPart", "part-of-ingress-packets", 3441)
    prop._addConstant("lacpPduStats", "lacp-inteface-stats", 13040)
    prop._addConstant("latencyLatencyAvg1", "delay(average-mode-1)", 9589)
    prop._addConstant("latencyLatencyAvg2", "delay(average-mode-2)", 9607)
    prop._addConstant("latencyLatencyHist1", "delay(histogram-mode-1)", 9625)
    prop._addConstant("latencyLatencyHist2", "delay(histogram-mode-2)", 9643)
    prop._addConstant("latencyLatencyHist3", "delay(histogram-mode-3)", 9661)
    prop._addConstant("latencyLatencyHist4", "delay(histogram-mode-4)", 9679)
    prop._addConstant("latencyLatencyHist5", "delay(histogram-mode-5)", 9697)
    prop._addConstant("latencyLatencyHist6", "delay(histogram-mode-6)", 9715)
    prop._addConstant("latencyLatencyHist7", "delay(histogram-mode-7)", 9733)
    prop._addConstant("latencyLatencyHist8", "delay(histogram-mode-8)", 9751)
    prop._addConstant("latencyLatencyHist9", "delay(histogram-mode-9)", 9769)
    prop._addConstant("lldpPduStats", "lldp-inteface-stats", 13022)
    prop._addConstant("opflexIDEpBcastPkts", "broadcast-packets", 5362)
    prop._addConstant("opflexIDEpDfwConn", "dfw-connection-statistics", 6390)
    prop._addConstant("opflexIDEpDfwConnDenied", "dfw-connection-denied-statistics", 6408)
    prop._addConstant("opflexIDEpDfwPktDrop", "dfw-packet-drop-statistics", 6426)
    prop._addConstant("opflexIDEpPolicyDrop", "epg-policy-drop-statistics", 8044)
    prop._addConstant("opflexIDEpRxBytes", "received-bytes", 1045)
    prop._addConstant("opflexIDEpRxPkts", "received-packets", 1026)
    prop._addConstant("opflexIDEpTxBytes", "transmitted-bytes", 1083)
    prop._addConstant("opflexIDEpTxPkts", "transmitted-packets", 1064)
    prop._addConstant("opflexOvsContract", "ovs-contract-stats", 11099)
    prop._addConstant("opflexOvsContractAg", "aggregated-ovs-contract-stats", 11135)
    prop._addConstant("opflexOvsContractPart", "part-of-ovs-contract-stats", 11117)
    prop._addConstant("opflexOvsHpp", "ovs-host-protection-stats", 11153)
    prop._addConstant("opflexOvsHppAg", "aggregated-ovs-host-protection-stats", 11189)
    prop._addConstant("opflexOvsHppPart", "part-of-ovs-host-protection-stats", 11171)
    prop._addConstant("ospfBadErrPktStats", "ospf-bad-error-rcvd-packets", 13994)
    prop._addConstant("ospfBadPktStats", "ospf-bad-rcvd-packets", 13976)
    prop._addConstant("ospfDropUnkStats", "ospf-drop-unknown-packets", 13922)
    prop._addConstant("ospfDupStats", "ospf-dup-packets", 13958)
    prop._addConstant("ospfErrPktStats", "ospf-error-packets", 13868)
    prop._addConstant("ospfIntfStats", "ospf-interface-packets", 14030)
    prop._addConstant("ospfInvalidStats", "ospf-invalid-packets", 13940)
    prop._addConstant("ospfLsRcvdErrPktStats", "ospf-ls-rcvd-error-packets", 13904)
    prop._addConstant("ospfLsRcvdPktStats", "ospf-ls-rcvd-packets", 13886)
    prop._addConstant("ospfLsSentStats", "ospf-ls-sent-packets", 14084)
    prop._addConstant("ospfLsaStats", "ospf-lsa-packets", 14048)
    prop._addConstant("ospfLsuStats", "ospf-lsu-packets", 14120)
    prop._addConstant("ospfPeerPktStats", "ospf-peer-packets", 14012)
    prop._addConstant("ospfPeerStats", "ospf-peer-counter", 14174)
    prop._addConstant("ospfRcvdPktStats", "ospf-rcvd-packets", 13850)
    prop._addConstant("ospfSelfStats", "ospf-self-counter", 14156)
    prop._addConstant("ospfSentPktErrStats", "ospf-sent-error-packets", 14102)
    prop._addConstant("ospfSentPktStats", "ospf-sent-packets", 14066)
    prop._addConstant("ospfThrottleStats", "ospf-throttle-packets", 14138)
    prop._addConstant("procApplicationCPU", "application-cpu-utilization", 9947)
    prop._addConstant("procApplicationMemory", "application-memory-uitlization", 9965)
    prop._addConstant("procCPU", "cpu-utilization", 3917)
    prop._addConstant("procMem", "memory", 3936)
    prop._addConstant("procProcCPU", "process-cpu", 3877)
    prop._addConstant("procProcMem", "process-memory", 3896)
    prop._addConstant("procSysCPU", "system-cpu", 3839)
    prop._addConstant("procSysLoad", "system-load", 3820)
    prop._addConstant("procSysMem", "system-memory", 3858)
    prop._addConstant("qosmEgrPkts", "egress-packets", 2372)
    prop._addConstant("qosmIngrPkts", "ingress-packets", 2353)
    prop._addConstant("slaICMPEchoStats", "icmp-echo-operation-statistics", 14213)
    prop._addConstant("slaICMPEchoStatsAg", "aggregated-icmp-echo-operation-statistics", 14340)
    prop._addConstant("slaTCPConnectStats", "tcp-connect-operation-statistics", 14231)
    prop._addConstant("slaTCPConnectStatsAg", "aggregated-tcp-connect-operation-statistics", 14358)
    prop._addConstant("tunnelEgrTepCntrs", "egress-tep-counters", 13233)
    prop._addConstant("tunnelIngrTepCntrs", "ingress-tep-counters", 13215)
    prop._addConstant("tunnelTunnelFlapCntrs", "tuennl-flap-counters", 13251)
    prop._addConstant("unspecified", None, 0)
    prop._addConstant("vnsRxPkts", "rx-packet-counters", 1509)
    prop._addConstant("vnsTxPkts", "tx-packet-counters", 1543)
    meta.props.add("statClass", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    meta.namingProps.append(getattr(meta.props, "statClass"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Policy"

    def __init__(self, parentMoOrDn, statClass, markDirty=True, **creationProps):
        namingVals = [statClass]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

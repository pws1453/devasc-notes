# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class CreatedBy(Mo):
    """
    A container that captures information about the creator of an object.

    """

    meta = ClassMeta("cobra.model.vz.CreatedBy")

    meta.moClassName = "vzCreatedBy"
    meta.rnFormat = "by-[%(ownerDn)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "None"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Delegate")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.vz.RsRFltAtt")
    meta.parentClasses.add("cobra.model.fv.SharedService")
    meta.parentClasses.add("cobra.model.vz.IntraSecurityDef")

    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")

    meta.rnPrefixes = [
        ('by-', True),
    ]

    prop = PropMeta("str", "action", "action", 36994, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "permit"
    prop._addConstant("deny", "deny", 0)
    prop._addConstant("permit", "permit", 1)
    meta.props.add("action", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "crType", "crType", 16473, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "cleared"
    prop._addConstant("cleared", "cleared", 0)
    prop._addConstant("fwd", "created-while-processing-fwd-filter", 1)
    prop._addConstant("rev", "created-while-processing-rev-filter", 2)
    meta.props.add("crType", prop)

    prop = PropMeta("str", "directives", "directives", 26069, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("log", "log", 2)
    prop._addConstant("no_stats", "enable-policy-compression", 4)
    prop._addConstant("none", "none", 0)
    meta.props.add("directives", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "hasGraph", "hasGraph", 15338, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("hasGraph", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "ownerDn", "ownerDn", 1070, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("ownerDn", prop)

    prop = PropMeta("str", "priorityOverride", "priorityOverride", 37164, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "default"
    prop._addConstant("default", "default-level", 0)
    prop._addConstant("level1", "lowest-priority", 1)
    prop._addConstant("level2", "medium-priority", 2)
    prop._addConstant("level3", "highest-priority", 3)
    meta.props.add("priorityOverride", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "scope", "scope", 16597, PropCategory.REGULAR)
    prop.label = "Scope"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 3
    prop.defaultValueStr = "context"
    prop._addConstant("application-profile", "application-profile", 1)
    prop._addConstant("context", "vrf", 3)
    prop._addConstant("global", "global", 4)
    prop._addConstant("tenant", "tenant", 2)
    meta.props.add("scope", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "ownerDn"))
    getattr(meta.props, "ownerDn").needDelimiter = True

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCpToVzFilterViaVzRsFiltAtt", "From contract to vzFilter", "cobra.model.vz.Filter"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCpToVzFilterViaVzRsSubjFiltAtt", "From contract to vzFilter", "cobra.model.vz.Filter"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHcloudIgw", "From fv:Ctx to hcloud:Igw", "cobra.model.hcloud.Igw"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHcloudVgw", "From fv:Ctx to hcloud:Vgw", "cobra.model.hcloud.Vgw"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToConsVzBrCP", "From cloud ExtEPg to Consumer Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToProvVzBrCP", "From cloud ExtEPg to Provider Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToConsVzBrCP", "From EPg to Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToProvVzBrCP", "From EPg to Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudExtEPg", "From fvCtx (VRF) to cloudExtEPg", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToFvCtx", "cloud:ExtEPg to fv:Ctx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToHCloudEndPoint", "cloud:ExtEPg to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToHcloudSecurityGroup", "cloud:ExtEPg to hcloud:SecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToHCloudCtx", "From cloud ExtEPg to VPCs hCloudCtx", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCPToConsCloudExtEPg", "From contract to Consumer Ext EPG", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCPToProvCloudExtEPg", "From contract to Provider Ext EPG", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudRegion", "From fvCtx (VRF) to CloudRegion", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHcloudCsr", "From fvCtx (VRF) to hcloudCsr (CSR)", "cobra.model.hcloud.Csr"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToHcloudSecurityGroup", "cloud:EPg to hcloud:SecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCpToHcloudEndPointCons", "From contract to Consumer end point", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCpToHcloudEndPointProv", "From contract to Provider EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToFvCtx", "cloud:EPg to fv:Ctx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCPToConsCloudEPg", "From contract to Consumer EPG", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCPToProvCloudEPg", "From contract to Provider EPG", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCPToVzSubj", "From contract to Filters which refer to this contract", "cobra.model.vz.Subj"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHCloudEndPoint", "From fvCtx (VRF) to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToHCloudEndPoint", "cloud:EPg to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHCloudCtx", "From fvCtx (VRF) to hcloudCtx (VPC)", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudCtxProfile", "From fvCtx (VRF) to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudEPg", "From fvCtx (VRF) to cloud EPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToHCloudCtx", "From cloud EPg to VPCs hCloudCtx", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCPToFvRsProv", "From contract to Providers", "cobra.model.fv.RsProv"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCPToFvRsCons", "From contract to Consumers", "cobra.model.fv.RsCons"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VzBrCPToVzRtSubjFiltAtt", "From contract to Filters which refer to this contract", "cobra.model.vz.RtSubjFiltAtt"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("cloudEpgToApp", "cloudEpgToApp", "cobra.model.cloud.App"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CtxToRegion", "Vrf to cloud Region", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ATgToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CtrctIfToEPgCons", "Contract Interface EPG Consumer", "cobra.model.fv.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CtrctIfToEPgConsNwIf", "Contract Interface EPG Consumer Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ABrCPToAnyProv", "Any To Provider", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ABrCPToAnyCons", "Any To Consumer", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AEPgToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ABrCPToEPgProv", "EPG Provider", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ABrCPToEPgCons", "EPG Consumer", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("InBToNode", "Node", "cobra.model.fv.Locale"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EPgToNwIf", "Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CtxToNwIf", "Private Network to Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("GraphInstancesinacontract", "Graph Instances", "cobra.model.vns.GraphInst"))

    def __init__(self, parentMoOrDn, ownerDn, markDirty=True, **creationProps):
        namingVals = [ownerDn]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

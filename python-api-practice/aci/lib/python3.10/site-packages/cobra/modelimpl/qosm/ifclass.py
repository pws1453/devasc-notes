# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class IfClass(Mo):
    """
    A container for information about QoS operated at a per port per class level.

    """

    meta = ClassMeta("cobra.model.qosm.IfClass")

    meta.moClassName = "qosmIfClass"
    meta.rnFormat = "class-%(id)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Qos Interface Class"
    meta.writeAccessMask = 0x100000000000001
    meta.readAccessMask = 0x100000000000001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.qosm.EgrPktsHist5min")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.qosm.EgrPktsHist1year")
    meta.childClasses.add("cobra.model.qosm.EgrPkts1qtr")
    meta.childClasses.add("cobra.model.qosm.QStatDirection")
    meta.childClasses.add("cobra.model.qosm.IngrPkts5min")
    meta.childClasses.add("cobra.model.qosm.IngrPktsHist1d")
    meta.childClasses.add("cobra.model.qosm.IngrPkts1year")
    meta.childClasses.add("cobra.model.qosm.IngrPkts1h")
    meta.childClasses.add("cobra.model.qosm.IngrPkts1d")
    meta.childClasses.add("cobra.model.qosm.EgrPktsHist1mo")
    meta.childClasses.add("cobra.model.qosm.EgrPkts1year")
    meta.childClasses.add("cobra.model.qosm.EgrPkts5min")
    meta.childClasses.add("cobra.model.qosm.EgrPkts1mo")
    meta.childClasses.add("cobra.model.qosm.IngrPktsHist1qtr")
    meta.childClasses.add("cobra.model.qosm.IngrPkts1w")
    meta.childClasses.add("cobra.model.qosm.IngrPktsHist1year")
    meta.childClasses.add("cobra.model.qosm.EgrPkts1d")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.qosm.IngrPkts1qtr")
    meta.childClasses.add("cobra.model.qosm.EgrPktsHist15min")
    meta.childClasses.add("cobra.model.qosm.EgrPkts1h")
    meta.childClasses.add("cobra.model.qosm.EgrPkts1w")
    meta.childClasses.add("cobra.model.qosm.EgrPkts15min")
    meta.childClasses.add("cobra.model.qosm.EgrPktsHist1qtr")
    meta.childClasses.add("cobra.model.qosm.IngrPktsHist15min")
    meta.childClasses.add("cobra.model.qosm.EgrPktsHist1h")
    meta.childClasses.add("cobra.model.qosm.EgrPktsHist1d")
    meta.childClasses.add("cobra.model.qosm.IngrPktsHist1h")
    meta.childClasses.add("cobra.model.qosm.IngrPkts15min")
    meta.childClasses.add("cobra.model.qosm.IngrPktsHist1w")
    meta.childClasses.add("cobra.model.qosm.IngrPkts1mo")
    meta.childClasses.add("cobra.model.qosm.EgrPktsHist1w")
    meta.childClasses.add("cobra.model.qosm.IngrPktsHist5min")
    meta.childClasses.add("cobra.model.qosm.IngrPktsHist1mo")

    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.IngrPktsHist1year", "HDqosmIngrPkts1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.IngrPktsHist15min", "HDqosmIngrPkts15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.EgrPktsHist1year", "HDqosmEgrPkts1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.IngrPkts1year", "CDqosmIngrPkts1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.IngrPktsHist1qtr", "HDqosmIngrPkts1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.EgrPktsHist15min", "HDqosmEgrPkts15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.IngrPkts15min", "CDqosmIngrPkts15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.IngrPktsHist5min", "HDqosmIngrPkts5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.EgrPktsHist5min", "HDqosmEgrPkts5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.IngrPkts5min", "CDqosmIngrPkts5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.EgrPkts1year", "CDqosmEgrPkts1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.IngrPkts1qtr", "CDqosmIngrPkts1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.EgrPkts15min", "CDqosmEgrPkts15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.EgrPktsHist1qtr", "HDqosmEgrPkts1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.IngrPktsHist1mo", "HDqosmIngrPkts1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.EgrPkts1qtr", "CDqosmEgrPkts1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.IngrPktsHist1d", "HDqosmIngrPkts1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.EgrPktsHist1mo", "HDqosmEgrPkts1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.EgrPkts5min", "CDqosmEgrPkts5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.IngrPktsHist1h", "HDqosmIngrPkts1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.IngrPktsHist1w", "HDqosmIngrPkts1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.IngrPkts1mo", "CDqosmIngrPkts1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.IngrPkts1h", "CDqosmIngrPkts1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.IngrPkts1d", "CDqosmIngrPkts1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.EgrPkts1mo", "CDqosmEgrPkts1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.IngrPkts1w", "CDqosmIngrPkts1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.EgrPktsHist1h", "HDqosmEgrPkts1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.EgrPktsHist1d", "HDqosmEgrPkts1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.EgrPktsHist1w", "HDqosmEgrPkts1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.EgrPkts1d", "CDqosmEgrPkts1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.EgrPkts1h", "CDqosmEgrPkts1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.EgrPkts1w", "CDqosmEgrPkts1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.QStatDirection", "dir-"))

    meta.parentClasses.add("cobra.model.qosm.If")

    meta.rnPrefixes = [
        ('class-', True),
    ]

    prop = PropMeta("str", "RxAdmitBytesCount", "RxAdmitBytesCount", 42319, PropCategory.REGULAR)
    prop.label = "Ingress admit bytes count"
    prop.isOper = True
    meta.props.add("RxAdmitBytesCount", prop)

    prop = PropMeta("str", "RxAdmitPacketsCount", "RxAdmitPacketsCount", 42318, PropCategory.REGULAR)
    prop.label = "Ingress admit packets count"
    prop.isOper = True
    meta.props.add("RxAdmitPacketsCount", prop)

    prop = PropMeta("str", "RxDropBytesCount", "RxDropBytesCount", 42321, PropCategory.REGULAR)
    prop.label = "Ingress drop bytes count"
    prop.isOper = True
    meta.props.add("RxDropBytesCount", prop)

    prop = PropMeta("str", "RxDropPacketsCount", "RxDropPacketsCount", 42320, PropCategory.REGULAR)
    prop.label = "Ingress drop packets count"
    prop.isOper = True
    meta.props.add("RxDropPacketsCount", prop)

    prop = PropMeta("str", "TxAdmitBytesCount", "TxAdmitBytesCount", 42323, PropCategory.REGULAR)
    prop.label = "Egress admit bytes count"
    prop.isOper = True
    meta.props.add("TxAdmitBytesCount", prop)

    prop = PropMeta("str", "TxAdmitPacketsCount", "TxAdmitPacketsCount", 42322, PropCategory.REGULAR)
    prop.label = "Egress admit packets count"
    prop.isOper = True
    meta.props.add("TxAdmitPacketsCount", prop)

    prop = PropMeta("str", "TxDropBytesCount", "TxDropBytesCount", 42325, PropCategory.REGULAR)
    prop.label = "Egress drop bytes count"
    prop.isOper = True
    meta.props.add("TxDropBytesCount", prop)

    prop = PropMeta("str", "TxDropPacketsCount", "TxDropPacketsCount", 42324, PropCategory.REGULAR)
    prop.label = "Egress drop packets count"
    prop.isOper = True
    meta.props.add("TxDropPacketsCount", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "id", "id", 2079, PropCategory.REGULAR)
    prop.label = "ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(0, 10)]
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("control-plane", "control-plane", 5)
    prop._addConstant("level1", "level1", 3)
    prop._addConstant("level2", "level2", 2)
    prop._addConstant("level3", "level3-(default)", 1)
    prop._addConstant("level4", "level4", 9)
    prop._addConstant("level5", "level5", 8)
    prop._addConstant("level6", "level6", 7)
    prop._addConstant("policy-plane", "policy-plane", 4)
    prop._addConstant("span", "span", 6)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("id", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14408, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "statsmCfgFailedBmp", "statsmCfgFailedBmp", 43410, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("qosm:IfClassmonPolDn_failed_flag", None, 512)
    meta.props.add("statsmCfgFailedBmp", prop)

    prop = PropMeta("str", "statsmCfgFailedTs", "statsmCfgFailedTs", 43412, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("statsmCfgFailedTs", prop)

    prop = PropMeta("str", "statsmCfgState", "statsmCfgState", 43411, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("statsmCfgState", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "id"))

    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

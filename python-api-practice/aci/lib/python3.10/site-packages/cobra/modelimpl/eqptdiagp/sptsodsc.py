# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class SpTsOdSc(Mo):
    """
    The diagnostic on-demand test set for leaf fabric nodes to run on spine supervisor cards.

    """

    meta = ClassMeta("cobra.model.eqptdiagp.SpTsOdSc")

    meta.moClassName = "eqptdiagpSpTsOdSc"
    meta.rnFormat = "spOdScDiags-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Spine Sup-card On-demand Diags"
    meta.writeAccessMask = 0x800080800000001
    meta.readAccessMask = 0x800080800000001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.eqptdiagp.RsSupCOdDiag")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.RsSupCOdDiag", "rssupCOdDiag-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.fabric.Inst")

    meta.superClasses.add("cobra.model.eqptdiagp.SupCTsOd")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.eqptdiagp.CardTestSetOd")
    meta.superClasses.add("cobra.model.pol.Def")
    meta.superClasses.add("cobra.model.eqptdiagp.TestSetBoot")
    meta.superClasses.add("cobra.model.eqptdiagp.TestSet")
    meta.superClasses.add("cobra.model.eqptdiagp.TestSetOd")

    meta.rnPrefixes = [
        ('spOdScDiags-', True),
    ]

    prop = PropMeta("str", "actnFailBm", "actnFailBm", 1937, PropCategory.REGULAR)
    prop.label = "Bitmask of Diagnostics Tests any Failure of                                  which should Keep the Node Down"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("cpu", "cpu", 2)
    prop._addConstant("internal-conn", "internal-connectivity", 8)
    prop._addConstant("none", "none", 0)
    prop._addConstant("peripherals", "peripherals", 4)
    prop._addConstant("sys-mem", "system-memory", 1)
    meta.props.add("actnFailBm", prop)

    prop = PropMeta("str", "adminSt", "adminSt", 1942, PropCategory.REGULAR)
    prop.label = "Administrative State"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "start"
    prop._addConstant("start", "start", 1)
    prop._addConstant("stop", "stop", 2)
    prop._addConstant("suspend", "suspend", 3)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "annotation", "annotation", 37721, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 5579, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "diagsBm", "diagsBm", 1935, PropCategory.REGULAR)
    prop.label = "Bitmask of Diagnostics Tests to be Run"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("cpu", "cpu", 2)
    prop._addConstant("internal-conn", "internal-connectivity", 8)
    prop._addConstant("none", "none", 0)
    prop._addConstant("peripherals", "peripherals", 4)
    prop._addConstant("sys-mem", "system-memory", 1)
    meta.props.add("diagsBm", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 39860, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "freq", "freq", 1945, PropCategory.REGULAR)
    prop.label = "On-Demand Diag Test Frequency"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "one-shot"
    prop._addConstant("every10mins", "every-10-mins", 600000)
    prop._addConstant("every12hrs", "every-12-hours", 43200000)
    prop._addConstant("every1day", "every-1-day", 86400000)
    prop._addConstant("every1hr", "every-1-hour", 3600000)
    prop._addConstant("every1week", "every-1-week", 604800000)
    prop._addConstant("every2hrs", "every-2-hours", 7200000)
    prop._addConstant("every30mins", "every-30-mins", 1800000)
    prop._addConstant("every4hrs", "every-4-hours", 14400000)
    prop._addConstant("every4weeks", "every-4-weeks", 2419200000)
    prop._addConstant("every5mins", "every-5-mins", 300000)
    prop._addConstant("every8hrs", "every-8-hours", 28800000)
    prop._addConstant("one-shot", "once", 0)
    meta.props.add("freq", prop)

    prop = PropMeta("str", "fullBm", "fullBm", 1936, PropCategory.REGULAR)
    prop.label = "Bitmask of Diagnostics Test Groups for which                                  Full Tests to be Run"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("cpu", "cpu", 2)
    prop._addConstant("internal-conn", "internal-connectivity", 8)
    prop._addConstant("none", "none", 0)
    prop._addConstant("peripherals", "peripherals", 4)
    prop._addConstant("sys-mem", "system-memory", 1)
    meta.props.add("fullBm", prop)

    prop = PropMeta("str", "inclDisruptive", "inclDisruptive", 1946, PropCategory.REGULAR)
    prop.label = "Include Disruptive Tests in the Grp"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("inclDisruptive", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 6407, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15230, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15231, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "triggerTS", "triggerTS", 18417, PropCategory.REGULAR)
    prop.label = "Trigger Time for the Policy"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("triggerTS", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Policy"

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class System(Mo):
    """
    The APIC uses a policy model to combine data into a health score. Health scores can be aggregated for a variety of areas such as for the infrastructure, applications, or services. The category health score is calculated using a Lp -Norm formula. The health score penalty equals 100 minus the health score. The health score penalty represents the overall health score penalties of a set of MOs that belong to a given category and are children or direct relatives of the MO for which a health score is being calculated.

    """

    meta = ClassMeta("cobra.model.top.System")

    meta.moClassName = "topSystem"
    meta.rnFormat = "sys"
    meta.category = MoCategory.REGULAR
    meta.label = "System"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x79ffffffffffffff
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.childClasses.add("cobra.model.telemetry.Entity")
    meta.childClasses.add("cobra.model.top.RsSysPsuInstPolCons")
    meta.childClasses.add("cobra.model.top.RtTrSrc")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.ipagectrl.Entity")
    meta.childClasses.add("cobra.model.poe.Entity")
    meta.childClasses.add("cobra.model.macsec.Entity")
    meta.childClasses.add("cobra.model.cap.Cat")
    meta.childClasses.add("cobra.model.cloudsec.Entity")
    meta.childClasses.add("cobra.model.opflex.OeHupTrigger")
    meta.childClasses.add("cobra.model.poe.Nic")
    meta.childClasses.add("cobra.model.top.RsSystemRack")
    meta.childClasses.add("cobra.model.ptp.Entity")
    meta.childClasses.add("cobra.model.l2.ExtIf")
    meta.childClasses.add("cobra.model.ipsec.Entity")
    meta.childClasses.add("cobra.model.fabric.NodeHealth15min")
    meta.childClasses.add("cobra.model.lldp.Entity")
    meta.childClasses.add("cobra.model.span.Acct")
    meta.childClasses.add("cobra.model.ospf.Entity")
    meta.childClasses.add("cobra.model.ipv6.Entity")
    meta.childClasses.add("cobra.model.aaa.FipsState")
    meta.childClasses.add("cobra.model.eqptdiag.Entity")
    meta.childClasses.add("cobra.model.ac.Entity")
    meta.childClasses.add("cobra.model.top.RsMonPolSystemPolCons")
    meta.childClasses.add("cobra.model.action.LCont")
    meta.childClasses.add("cobra.model.fabrgm.Entity")
    meta.childClasses.add("cobra.model.arp.Entity")
    meta.childClasses.add("cobra.model.cpinfra.Entity")
    meta.childClasses.add("cobra.model.sla.Entity")
    meta.childClasses.add("cobra.model.l3cap.Prov")
    meta.childClasses.add("cobra.model.top.RsSysLldpInstPolCons")
    meta.childClasses.add("cobra.model.monitor.Entity")
    meta.childClasses.add("cobra.model.pc.AggrIf")
    meta.childClasses.add("cobra.model.usrsyslog.Record")
    meta.childClasses.add("cobra.model.eqpt.Ch")
    meta.childClasses.add("cobra.model.nw.Vdc")
    meta.childClasses.add("cobra.model.firmware.FwStatusCont")
    meta.childClasses.add("cobra.model.sysdebug.CoreFileRepository")
    meta.childClasses.add("cobra.model.opflex.ODevCmdReq")
    meta.childClasses.add("cobra.model.actrlcap.Prov")
    meta.childClasses.add("cobra.model.eqpt.ReloadSwitch")
    meta.childClasses.add("cobra.model.aentp.Entity")
    meta.childClasses.add("cobra.model.l1cap.Prov")
    meta.childClasses.add("cobra.model.eqpt.Entity")
    meta.childClasses.add("cobra.model.span.RetryCont")
    meta.childClasses.add("cobra.model.eqpt.FeatureEx")
    meta.childClasses.add("cobra.model.fv.FltCounter1mo")
    meta.childClasses.add("cobra.model.vpc.Entity")
    meta.childClasses.add("cobra.model.top.RsProtGFw")
    meta.childClasses.add("cobra.model.fv.FltCounter1d")
    meta.childClasses.add("cobra.model.fhs.Entity")
    meta.childClasses.add("cobra.model.glean.Entity")
    meta.childClasses.add("cobra.model.top.RsSysBfdIpv4PolCons")
    meta.childClasses.add("cobra.model.cdp.Entity")
    meta.childClasses.add("cobra.model.fv.FltCounterHist1mo")
    meta.childClasses.add("cobra.model.analytics.Entity")
    meta.childClasses.add("cobra.model.twamp.Entity")
    meta.childClasses.add("cobra.model.span.Entity")
    meta.childClasses.add("cobra.model.pki.FabricSelfCACertsModified")
    meta.childClasses.add("cobra.model.firmware.CtrlrFwStatusCont")
    meta.childClasses.add("cobra.model.synthetic.SwTLTestObj")
    meta.childClasses.add("cobra.model.fv.FltCounter1year")
    meta.childClasses.add("cobra.model.top.RsSysFwdScaleProfPolCons")
    meta.childClasses.add("cobra.model.copp.Entity")
    meta.childClasses.add("cobra.model.cnw.PhysIf")
    meta.childClasses.add("cobra.model.rpm.Mmode")
    meta.childClasses.add("cobra.model.proc.Entity")
    meta.childClasses.add("cobra.model.bd.EnforceExpCont")
    meta.childClasses.add("cobra.model.pcons.BootStrapTracking")
    meta.childClasses.add("cobra.model.firmware.CatFwStatusCont")
    meta.childClasses.add("cobra.model.uribv4.Entity")
    meta.childClasses.add("cobra.model.nat.Entity")
    meta.childClasses.add("cobra.model.rpm.Entity")
    meta.childClasses.add("cobra.model.l3.Ctx")
    meta.childClasses.add("cobra.model.l2.InbandIf")
    meta.childClasses.add("cobra.model.l2cap.Prov")
    meta.childClasses.add("cobra.model.mrib.Entity")
    meta.childClasses.add("cobra.model.sts.Entity")
    meta.childClasses.add("cobra.model.slowdrain.Entity")
    meta.childClasses.add("cobra.model.proc.Container")
    meta.childClasses.add("cobra.model.top.RsSysNetflowNodePolCons")
    meta.childClasses.add("cobra.model.veth.Entity")
    meta.childClasses.add("cobra.model.snmp.Entity")
    meta.childClasses.add("cobra.model.cloud.Controller")
    meta.childClasses.add("cobra.model.dhcp.Entity")
    meta.childClasses.add("cobra.model.isis.Entity")
    meta.childClasses.add("cobra.model.fabric.NodeHealthHist1year")
    meta.childClasses.add("cobra.model.fabric.NodeHealthHist5min")
    meta.childClasses.add("cobra.model.telemetry.CapabilityCont")
    meta.childClasses.add("cobra.model.ipv4.Entity")
    meta.childClasses.add("cobra.model.mcp.Entity")
    meta.childClasses.add("cobra.model.pim.Capability")
    meta.childClasses.add("cobra.model.top.RsSysFastLinkFailoverInstPolCons")
    meta.childClasses.add("cobra.model.fcpm.Entity")
    meta.childClasses.add("cobra.model.dpp.Entity")
    meta.childClasses.add("cobra.model.license.Entity")
    meta.childClasses.add("cobra.model.telemetry.Inst")
    meta.childClasses.add("cobra.model.nd.Entity")
    meta.childClasses.add("cobra.model.datetime.ClkPol")
    meta.childClasses.add("cobra.model.usrcallhome.Record")
    meta.childClasses.add("cobra.model.mldsnoop.Entity")
    meta.childClasses.add("cobra.model.mp.Site")
    meta.childClasses.add("cobra.model.svccopy.Entity")
    meta.childClasses.add("cobra.model.regress.If")
    meta.childClasses.add("cobra.model.sysdebug.TechSupFileRepository")
    meta.childClasses.add("cobra.model.platformmgr.PlmgrTrig")
    meta.childClasses.add("cobra.model.eqpt.ExtCh")
    meta.childClasses.add("cobra.model.opflex.ODevRefCont")
    meta.childClasses.add("cobra.model.fv.ImplicitStaleEpCont")
    meta.childClasses.add("cobra.model.fv.FltCounterHist1year")
    meta.childClasses.add("cobra.model.fabric.SystemInfo")
    meta.childClasses.add("cobra.model.dot1x.Nic")
    meta.childClasses.add("cobra.model.cert.Entity")
    meta.childClasses.add("cobra.model.vsanmgr.Entity")
    meta.childClasses.add("cobra.model.icmpv6.Entity")
    meta.childClasses.add("cobra.model.igmp.Entity")
    meta.childClasses.add("cobra.model.nw.ConnGrp")
    meta.childClasses.add("cobra.model.rlpodred.RlPodRedPolicy")
    meta.childClasses.add("cobra.model.top.RsSysFcInstPolCons")
    meta.childClasses.add("cobra.model.mock.MockRoot")
    meta.childClasses.add("cobra.model.comm.TelnetInst")
    meta.childClasses.add("cobra.model.fabric.NodeHealth1w")
    meta.childClasses.add("cobra.model.sysmgr.Entity")
    meta.childClasses.add("cobra.model.compat.SuppFw")
    meta.childClasses.add("cobra.model.actrl.Entity")
    meta.childClasses.add("cobra.model.pim6.Entity")
    meta.childClasses.add("cobra.model.bfd.Entity")
    meta.childClasses.add("cobra.model.dns.Entity")
    meta.childClasses.add("cobra.model.fv.FltCounterHist1w")
    meta.childClasses.add("cobra.model.fv.FltCounterHist1h")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.opflex.ODevCmdResp")
    meta.childClasses.add("cobra.model.fabric.NodeHealth1year")
    meta.childClasses.add("cobra.model.fabric.NodeHealth1d")
    meta.childClasses.add("cobra.model.fabric.NodeHealth1mo")
    meta.childClasses.add("cobra.model.rlpodred.RlSwitchoverPod")
    meta.childClasses.add("cobra.model.fabric.NodeHealth1h")
    meta.childClasses.add("cobra.model.fv.FltCounter1h")
    meta.childClasses.add("cobra.model.fv.FltCounterHist1d")
    meta.childClasses.add("cobra.model.top.RsSysFlashConfigPolCons")
    meta.childClasses.add("cobra.model.ospfv3.Entity")
    meta.childClasses.add("cobra.model.proc.System")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.top.RtExporterToTopSystem")
    meta.childClasses.add("cobra.model.opflexp.ReportedEpReg")
    meta.childClasses.add("cobra.model.top.RsSysIaclProfilePolCons")
    meta.childClasses.add("cobra.model.top.RsSysPoeInstPolCons")
    meta.childClasses.add("cobra.model.pc.Entity")
    meta.childClasses.add("cobra.model.comm.SshInst")
    meta.childClasses.add("cobra.model.npv.Entity")
    meta.childClasses.add("cobra.model.fabric.NodeHealth5min")
    meta.childClasses.add("cobra.model.top.RtTsSrc")
    meta.childClasses.add("cobra.model.top.RsNeighFw")
    meta.childClasses.add("cobra.model.mp.Localfabric")
    meta.childClasses.add("cobra.model.im.Entity")
    meta.childClasses.add("cobra.model.mld.Entity")
    meta.childClasses.add("cobra.model.track.Entity")
    meta.childClasses.add("cobra.model.fabric.NodeHealthHist1h")
    meta.childClasses.add("cobra.model.wwn.Entity")
    meta.childClasses.add("cobra.model.fv.FltCounter1qtr")
    meta.childClasses.add("cobra.model.top.RsSysMstInstPolCons")
    meta.childClasses.add("cobra.model.top.RsSysErrDisRecoverPolCons")
    meta.childClasses.add("cobra.model.top.RsSysL2NodePolAuthCons")
    meta.childClasses.add("cobra.model.fabric.NodeHealthHist1d")
    meta.childClasses.add("cobra.model.fabric.NodeHealthHist1mo")
    meta.childClasses.add("cobra.model.qosm.Entity")
    meta.childClasses.add("cobra.model.fabric.NodeHealthHist15min")
    meta.childClasses.add("cobra.model.bgp.Entity")
    meta.childClasses.add("cobra.model.opflex.PodInfo")
    meta.childClasses.add("cobra.model.coop.Entity")
    meta.childClasses.add("cobra.model.aaa.CtrlrFipsState")
    meta.childClasses.add("cobra.model.fabric.NodeHealthHist1w")
    meta.childClasses.add("cobra.model.l1.PhysIf")
    meta.childClasses.add("cobra.model.tunnel.If")
    meta.childClasses.add("cobra.model.ethpm.Entity")
    meta.childClasses.add("cobra.model.svcredir.Entity")
    meta.childClasses.add("cobra.model.fabric.LeafNodeRole")
    meta.childClasses.add("cobra.model.fv.FltCounter1w")
    meta.childClasses.add("cobra.model.udld.Entity")
    meta.childClasses.add("cobra.model.pim.Entity")
    meta.childClasses.add("cobra.model.fv.StaleTunEpCont")
    meta.childClasses.add("cobra.model.dot1x.Entity")
    meta.childClasses.add("cobra.model.comm.RLTepInfo")
    meta.childClasses.add("cobra.model.fabric.NodeHealth1qtr")
    meta.childClasses.add("cobra.model.mgmt.MgmtIf")
    meta.childClasses.add("cobra.model.cnw.AggrIf")
    meta.childClasses.add("cobra.model.stp.Entity")
    meta.childClasses.add("cobra.model.lacp.Entity")
    meta.childClasses.add("cobra.model.top.RsSysMcpInstPolCons")
    meta.childClasses.add("cobra.model.top.RsSysCdpInstPolCons")
    meta.childClasses.add("cobra.model.top.RtFwinstlsrc")
    meta.childClasses.add("cobra.model.igmpsnoop.Entity")
    meta.childClasses.add("cobra.model.eigrp.Entity")
    meta.childClasses.add("cobra.model.radius.Entity")
    meta.childClasses.add("cobra.model.opflex.VtepRefCont")
    meta.childClasses.add("cobra.model.sysdebug.Ep")
    meta.childClasses.add("cobra.model.opflexp.HupTrigger")
    meta.childClasses.add("cobra.model.opflexp.PolicyResolveReq")
    meta.childClasses.add("cobra.model.fcoe.Entity")
    meta.childClasses.add("cobra.model.fv.FltCounterHist15min")
    meta.childClasses.add("cobra.model.unifiedports.Entity")
    meta.childClasses.add("cobra.model.fabric.NodeHealthHist1qtr")
    meta.childClasses.add("cobra.model.l3.Inst")
    meta.childClasses.add("cobra.model.satm.Entity")
    meta.childClasses.add("cobra.model.fabric.SpineNodeRole")
    meta.childClasses.add("cobra.model.aib.Entity")
    meta.childClasses.add("cobra.model.aclcap.Prov")
    meta.childClasses.add("cobra.model.uribv6.Entity")
    meta.childClasses.add("cobra.model.fabric.MMUpgrader")
    meta.childClasses.add("cobra.model.leqpt.LooseNode")
    meta.childClasses.add("cobra.model.hsrp.Entity")
    meta.childClasses.add("cobra.model.l3.CtxSubstitute")
    meta.childClasses.add("cobra.model.top.RtTrDst")
    meta.childClasses.add("cobra.model.fc.Entity")
    meta.childClasses.add("cobra.model.top.RsSysBfdIpv6PolCons")
    meta.childClasses.add("cobra.model.l3vm.Entity")
    meta.childClasses.add("cobra.model.smm.Entity")
    meta.childClasses.add("cobra.model.syslog.Acct")
    meta.childClasses.add("cobra.model.configprofile.Catalog")
    meta.childClasses.add("cobra.model.vlanmgr.Entity")
    meta.childClasses.add("cobra.model.eqptcapacity.Entity")
    meta.childClasses.add("cobra.model.top.RsSysFcFabricPolCons")
    meta.childClasses.add("cobra.model.fv.FltCounterHist1qtr")
    meta.childClasses.add("cobra.model.fabric.Decommission")
    meta.childClasses.add("cobra.model.topoctrl.Entity")
    meta.childClasses.add("cobra.model.fv.FltCounterHist5min")
    meta.childClasses.add("cobra.model.icmpv4.Entity")
    meta.childClasses.add("cobra.model.opflexp.ReportedRouteReg")
    meta.childClasses.add("cobra.model.opflexp.Reference")
    meta.childClasses.add("cobra.model.acl.Entity")
    meta.childClasses.add("cobra.model.fv.FltCounter5min")
    meta.childClasses.add("cobra.model.fabric.RemoteLeafNodeRole")
    meta.childClasses.add("cobra.model.pc.FcEntity")
    meta.childClasses.add("cobra.model.l2.BrIf")
    meta.childClasses.add("cobra.model.fv.EpNs")
    meta.childClasses.add("cobra.model.fv.FltCounter15min")
    meta.childClasses.add("cobra.model.datetime.Ntpq")

    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysFastLinkFailoverInstPolCons", "rssysFastLinkFailoverInstPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RtExporterToTopSystem", "rtnetflowExporterToTopSystem-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysErrDisRecoverPolCons", "rssysErrDisRecoverPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysFwdScaleProfPolCons", "rssysFwdScaleProfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealthHist1year", "HDfabricNodeHealth1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealthHist15min", "HDfabricNodeHealth15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealth15min", "CDfabricNodeHealth15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysNetflowNodePolCons", "rssysNetflowNodePolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealthHist5min", "HDfabricNodeHealth5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealth1year", "CDfabricNodeHealth1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysFlashConfigPolCons", "rssysFlashConfigPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysIaclProfilePolCons", "rssysIaclProfilePolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealthHist1qtr", "HDfabricNodeHealth1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealth5min", "CDfabricNodeHealth5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysL2NodePolAuthCons", "rssysL2NodePolAuthCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealthHist1mo", "HDfabricNodeHealth1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealth1qtr", "CDfabricNodeHealth1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsMonPolSystemPolCons", "rsmonPolSystemPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealth1mo", "CDfabricNodeHealth1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealthHist1h", "HDfabricNodeHealth1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealthHist1d", "HDfabricNodeHealth1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealthHist1w", "HDfabricNodeHealth1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysLldpInstPolCons", "rssysLldpInstPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FltCounterHist1year", "HDfvFltCounter1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealth1w", "CDfabricNodeHealth1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealth1d", "CDfabricNodeHealth1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealth1h", "CDfabricNodeHealth1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FltCounterHist15min", "HDfvFltCounter15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysFcFabricPolCons", "rssysFcFabricPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysPsuInstPolCons", "rssysPsuInstPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RtTrSrc", "rttraceroutepTrSrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysBfdIpv4PolCons", "rssysBfdIpv4PolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FltCounter1year", "CDfvFltCounter1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysPoeInstPolCons", "rssysPoeInstPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysMstInstPolCons", "rssysMstInstPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysMcpInstPolCons", "rssysMcpInstPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysCdpInstPolCons", "rssysCdpInstPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RtTrDst", "rttraceroutepTrDst-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysBfdIpv6PolCons", "rssysBfdIpv6PolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FltCounterHist1qtr", "HDfvFltCounter1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FltCounterHist5min", "HDfvFltCounter5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FltCounter15min", "CDfvFltCounter15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FltCounterHist1mo", "HDfvFltCounter1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSysFcInstPolCons", "rssysFcInstPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FltCounter1qtr", "CDfvFltCounter1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RtFwinstlsrc", "rtmaintFwinstlsrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FltCounter5min", "CDfvFltCounter5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RemoteLeafNodeRole", "RemoteLeafNodeRole"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FltCounter1mo", "CDfvFltCounter1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.firmware.CtrlrFwStatusCont", "ctrlrfwstatuscont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pcons.BootStrapTracking", "bootstraptracking"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FltCounterHist1w", "HDfvFltCounter1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FltCounterHist1h", "HDfvFltCounter1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FltCounterHist1d", "HDfvFltCounter1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.FeatureEx", "featureExclusion"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FltCounter1d", "CDfvFltCounter1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.sysdebug.TechSupFileRepository", "techsupportfiles"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FltCounter1h", "CDfvFltCounter1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FltCounter1w", "CDfvFltCounter1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflexp.PolicyResolveReq", "policyresolvereq"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflexp.ReportedRouteReg", "reportedroutereg"))
    meta.childNamesAndRnPrefix.append(("cobra.model.firmware.CatFwStatusCont", "catfwstatuscont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.telemetry.CapabilityCont", "nircapabilities"))
    meta.childNamesAndRnPrefix.append(("cobra.model.rlpodred.RlSwitchoverPod", "rlswitchoverpod"))
    meta.childNamesAndRnPrefix.append(("cobra.model.rlpodred.RlPodRedPolicy", "rlpodredpolicy"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RtTsSrc", "rtdbgexpTsSrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.CtrlrFipsState", "ctrlrfipsstate"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.StaleTunEpCont", "StaleTunEpCont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.CtxSubstitute", "ctxsubstitute-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSystemRack", "rssystemRack-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.actrlcap.Prov", "actrlcapprov-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflexp.ReportedEpReg", "reportedepreg"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.SpineNodeRole", "SpineNodeRole"))
    meta.childNamesAndRnPrefix.append(("cobra.model.configprofile.Catalog", "configProfile"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cap.Cat", "capabilities"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.OeHupTrigger", "oehuptrigger"))
    meta.childNamesAndRnPrefix.append(("cobra.model.firmware.FwStatusCont", "fwstatuscont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.ReloadSwitch", "reloadSwitch"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.LeafNodeRole", "LeafNodeRole"))
    meta.childNamesAndRnPrefix.append(("cobra.model.unifiedports.Entity", "unifiedports"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptcapacity.Entity", "eqptcapacity"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.Decommission", "decommission"))
    meta.childNamesAndRnPrefix.append(("cobra.model.usrcallhome.Record", "usrcallhome"))
    meta.childNamesAndRnPrefix.append(("cobra.model.platformmgr.PlmgrTrig", "platformmgr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.ODevRefCont", "odevrefcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.VtepRefCont", "vteprefcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aclcap.Prov", "aclcapprov-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.telemetry.Entity", "teleentity"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3cap.Prov", "l3capprov-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1cap.Prov", "l1capprov-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsProtGFw", "rsprotGFw-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bd.EnforceExpCont", "EnfExpCont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2cap.Prov", "l2capprov-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cloud.Controller", "controller"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.ImplicitStaleEpCont", "impSEpCont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comm.TelnetInst", "telnetinst"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsNeighFw", "rsneighFw-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflexp.HupTrigger", "huptrigger"))
    meta.childNamesAndRnPrefix.append(("cobra.model.syslog.Acct", "syslogacct"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ipagectrl.Entity", "ipagectrl"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.FipsState", "fipsstate"))
    meta.childNamesAndRnPrefix.append(("cobra.model.usrsyslog.Record", "usrsyslog"))
    meta.childNamesAndRnPrefix.append(("cobra.model.sysdebug.CoreFileRepository", "corefiles"))
    meta.childNamesAndRnPrefix.append(("cobra.model.analytics.Entity", "analytics"))
    meta.childNamesAndRnPrefix.append(("cobra.model.slowdrain.Entity", "slowdrain"))
    meta.childNamesAndRnPrefix.append(("cobra.model.telemetry.Inst", "telemetry"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dot1x.Nic", "dot1xnic-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mp.Localfabric", "localfab-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comm.RLTepInfo", "RlTepInfo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.igmpsnoop.Entity", "igmpsnoop"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cloudsec.Entity", "cloudsec"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mldsnoop.Entity", "mldsnoop"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mock.MockRoot", "mockroot"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.ODevCmdResp", "odcresp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.svcredir.Entity", "svcredir"))
    meta.childNamesAndRnPrefix.append(("cobra.model.sysdebug.Ep", "sysdebug"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.MMUpgrader", "upgrader"))
    meta.childNamesAndRnPrefix.append(("cobra.model.topoctrl.Entity", "topoctrl"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.poe.Nic", "poenic-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cpinfra.Entity", "cpinfra"))
    meta.childNamesAndRnPrefix.append(("cobra.model.monitor.Entity", "monitor"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.ODevCmdReq", "odcreq-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pki.FabricSelfCACertsModified", "certmod"))
    meta.childNamesAndRnPrefix.append(("cobra.model.license.Entity", "license"))
    meta.childNamesAndRnPrefix.append(("cobra.model.svccopy.Entity", "svccopy"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vsanmgr.Entity", "vsanmgr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.System", "procsys"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comm.SshInst", "sshinst"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.PodInfo", "podinfo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.If", "tunnel-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.leqpt.LooseNode", "lsnode-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vlanmgr.Entity", "vlanmgr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.macsec.Entity", "macsec"))
    meta.childNamesAndRnPrefix.append(("cobra.model.action.LCont", "action"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabrgm.Entity", "fabrgm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.synthetic.SwTLTestObj", "sectl-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cnw.PhysIf", "cphys-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.Entity", "uribv4"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pim.Capability", "pimcap"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.ExtCh", "extch-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.icmpv6.Entity", "icmpv6"))
    meta.childNamesAndRnPrefix.append(("cobra.model.sysmgr.Entity", "sysmgr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ospfv3.Entity", "ospfv3"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cnw.AggrIf", "caggr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.radius.Entity", "radius"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv6.Entity", "uribv6"))
    meta.childNamesAndRnPrefix.append(("cobra.model.icmpv4.Entity", "icmpv4"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ipsec.Entity", "ipsec"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pc.AggrIf", "aggr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aentp.Entity", "aentp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.span.RetryCont", "retry"))
    meta.childNamesAndRnPrefix.append(("cobra.model.glean.Entity", "glean"))
    meta.childNamesAndRnPrefix.append(("cobra.model.twamp.Entity", "twamp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.rpm.Mmode", "mmode"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.Container", "cntr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mp.Site", "site-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.regress.If", "regr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nw.ConnGrp", "conng"))
    meta.childNamesAndRnPrefix.append(("cobra.model.actrl.Entity", "actrl"))
    meta.childNamesAndRnPrefix.append(("cobra.model.track.Entity", "track"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.PhysIf", "phys-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ethpm.Entity", "ethpm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dot1x.Entity", "dot1x"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mgmt.MgmtIf", "mgmt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eigrp.Entity", "eigrp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.Inst", "inst-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.datetime.Ntpq", "ntpq-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.ExtIf", "ext-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldp.Entity", "lldp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.span.Acct", "acct"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ospf.Entity", "ospf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ipv6.Entity", "ipv6"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiag.Entity", "diag"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nw.Vdc", "vdc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.span.Entity", "span"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Entity", "copp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.Entity", "proc"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.Ctx", "ctx-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.InbandIf", "inb-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mrib.Entity", "mrib"))
    meta.childNamesAndRnPrefix.append(("cobra.model.veth.Entity", "veth"))
    meta.childNamesAndRnPrefix.append(("cobra.model.snmp.Entity", "snmp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcp.Entity", "dhcp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.Entity", "isis"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ipv4.Entity", "ipv4"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fcpm.Entity", "fcpm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.datetime.ClkPol", "time"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cert.Entity", "cert"))
    meta.childNamesAndRnPrefix.append(("cobra.model.igmp.Entity", "igmp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.compat.SuppFw", "sfw-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pim6.Entity", "pim6"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.Entity", "qosm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.coop.Entity", "coop"))
    meta.childNamesAndRnPrefix.append(("cobra.model.udld.Entity", "udld"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lacp.Entity", "lacp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fcoe.Entity", "fcoe"))
    meta.childNamesAndRnPrefix.append(("cobra.model.satm.Entity", "satm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hsrp.Entity", "hsrp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3vm.Entity", "l3vm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pc.FcEntity", "fcpc"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.EpNs", "epns"))
    meta.childNamesAndRnPrefix.append(("cobra.model.poe.Entity", "poe"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ptp.Entity", "ptp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.arp.Entity", "arp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.sla.Entity", "sla"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.Entity", "ops"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vpc.Entity", "vpc"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fhs.Entity", "fhs"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cdp.Entity", "cdp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nat.Entity", "nat"))
    meta.childNamesAndRnPrefix.append(("cobra.model.rpm.Entity", "rpm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.sts.Entity", "sts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mcp.Entity", "mcp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.Entity", "dpp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bfd.Entity", "bfd"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dns.Entity", "dns"))
    meta.childNamesAndRnPrefix.append(("cobra.model.npv.Entity", "npv"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mld.Entity", "mld"))
    meta.childNamesAndRnPrefix.append(("cobra.model.wwn.Entity", "wwn"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.Entity", "bgp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pim.Entity", "pim"))
    meta.childNamesAndRnPrefix.append(("cobra.model.stp.Entity", "stp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aib.Entity", "aib"))
    meta.childNamesAndRnPrefix.append(("cobra.model.smm.Entity", "smm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflexp.Reference", "ref"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acl.Entity", "acl"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.BrIf", "br-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ac.Entity", "ac"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.Ch", "ch"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nd.Entity", "nd"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.SystemInfo", "si"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pc.Entity", "pc"))
    meta.childNamesAndRnPrefix.append(("cobra.model.im.Entity", "im"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fc.Entity", "fc"))

    meta.parentClasses.add("cobra.model.top.Root")
    meta.parentClasses.add("cobra.model.fabric.Node")

    meta.superClasses.add("cobra.model.naming.NamedObject")

    meta.rnPrefixes = [
        ('sys', False),
    ]

    prop = PropMeta("str", "address", "address", 15, PropCategory.REGULAR)
    prop.label = "Address"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("address", prop)

    prop = PropMeta("str", "bootstrapState", "bootstrapState", 26219, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("done", "done", 2)
    prop._addConstant("downloading-bootstrap-config", "downloading-bootstrap-config", 1)
    prop._addConstant("none", "none", 0)
    meta.props.add("bootstrapState", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "clusterTimeDiff", "clusterTimeDiff", 61199, PropCategory.REGULAR)
    prop.label = "Cluster Time Deviation from Local Time"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("clusterTimeDiff", prop)

    prop = PropMeta("str", "configIssues", "configIssues", 16803, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("duplicate-ibmgmt-ipv4", "duplicate-ibmgmt-ipv4", 1)
    prop._addConstant("duplicate-ibmgmt-ipv6", "duplicate-ibmgmt-ipv6", 16)
    prop._addConstant("duplicate-oobmgmt-ipv4", "duplicate-oobmgmt-ipv4", 2)
    prop._addConstant("duplicate-oobmgmt-ipv6", "duplicate-oobmgmt-ipv6", 32)
    prop._addConstant("invalid-ibmgmt-encap", "invalid-ibmgmt-encap", 4)
    prop._addConstant("none", "none", 0)
    prop._addConstant("oobmgmt-ip-in-use", "oobmgmt-ip-in-use", 8)
    meta.props.add("configIssues", prop)

    prop = PropMeta("str", "controlPlaneMTU", "controlPlaneMTU", 31099, PropCategory.REGULAR)
    prop.label = "Control Plane MTU"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(576, 9000)]
    prop.defaultValue = 9000
    prop.defaultValueStr = "9000"
    meta.props.add("controlPlaneMTU", prop)

    prop = PropMeta("str", "currentTime", "currentTime", 19, PropCategory.REGULAR)
    prop.label = "Current Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("currentTime", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "enforceSubnetCheck", "enforceSubnetCheck", 35374, PropCategory.REGULAR)
    prop.label = "Enforce subnet check on all VRFs"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("enforceSubnetCheck", prop)

    prop = PropMeta("str", "etepAddr", "etepAddr", 20625, PropCategory.REGULAR)
    prop.label = "External Tunnel Endpoint Address"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("etepAddr", prop)

    prop = PropMeta("str", "fabricDomain", "fabricDomain", 21363, PropCategory.REGULAR)
    prop.label = "Fabric Domain"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("fabricDomain", prop)

    prop = PropMeta("str", "fabricId", "fabricId", 24, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("fabricId", prop)

    prop = PropMeta("str", "fabricMAC", "fabricMAC", 25, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 280487012409856
    prop.defaultValueStr = "280487012409856"
    meta.props.add("fabricMAC", prop)

    prop = PropMeta("str", "id", "id", 12, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "inbMgmtAddr", "inbMgmtAddr", 17, PropCategory.REGULAR)
    prop.label = "In-band Management IP Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("inbMgmtAddr", prop)

    prop = PropMeta("str", "inbMgmtAddr6", "inbMgmtAddr6", 23250, PropCategory.REGULAR)
    prop.label = "In-band Management IPv6 Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("inbMgmtAddr6", prop)

    prop = PropMeta("str", "inbMgmtAddr6Mask", "inbMgmtAddr6Mask", 34327, PropCategory.REGULAR)
    prop.label = "In-band Management IPv6 Address Mask"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("inbMgmtAddr6Mask", prop)

    prop = PropMeta("str", "inbMgmtAddrMask", "inbMgmtAddrMask", 34326, PropCategory.REGULAR)
    prop.label = "In-band Management IP Address Mask"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("inbMgmtAddrMask", prop)

    prop = PropMeta("str", "inbMgmtGateway", "inbMgmtGateway", 34328, PropCategory.REGULAR)
    prop.label = "In-band Management IP Gateway"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("inbMgmtGateway", prop)

    prop = PropMeta("str", "inbMgmtGateway6", "inbMgmtGateway6", 34329, PropCategory.REGULAR)
    prop.label = "In-band Management IPv6 Gateway"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("inbMgmtGateway6", prop)

    prop = PropMeta("str", "lastRebootTime", "lastRebootTime", 54139, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("lastRebootTime", prop)

    prop = PropMeta("str", "lastResetReason", "lastResetReason", 54138, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("asic", "reset-performed-due-to-component-error", 22)
    prop._addConstant("bad-bus-volt", "reset-due-to-bad-system-bus-voltage", 94)
    prop._addConstant("bad-intermediate-bus-volt", "reset-due-to-bad-intermediate-bus-voltage", 95)
    prop._addConstant("bad-volt", "reset-due-to-bad-voltage", 93)
    prop._addConstant("boot-err", "reset-(powered-down)-because-module-does-not-boot", 27)
    prop._addConstant("bootflash-corrupt", "reset-(powered-down)-because-bootflash-access-failed", 30)
    prop._addConstant("card-incompat", "module-not-supported-in-this-chassis", 113)
    prop._addConstant("chassis-rst", "chassis-reset-by-sup", 105)
    prop._addConstant("clock", "system-reset-due-to-clock-failure", 12)
    prop._addConstant("clock-switchover", "vegaslc-reset-due-to-clock-switchover", 37)
    prop._addConstant("cold-boot", "system-power-cycled-due-to-cold-boot", 140)
    prop._addConstant("decommissioned", "decommissioned", 134)
    prop._addConstant("deep-sleep", "preparing-to-enter-deep-sleep-mode", 126)
    prop._addConstant("dme-clean-config-reset", "dme-clean-config-reset", 132)
    prop._addConstant("eem-pwr-dwn", "powered-down-due-to-eem-event-policy-trigger", 97)
    prop._addConstant("ejector", "all-the-ejectors-are-open", 99)
    prop._addConstant("eobc", "reset-triggered-due-to-bad-backplane-communication-channel", 25)
    prop._addConstant("epc-fail", "epc-failure", 130)
    prop._addConstant("epld", "power-down/up-epld-upgrade-process", 33)
    prop._addConstant("epld-upg-nw-crd-mode", "power-down/up-epld-upgrade-process", 125)
    prop._addConstant("ha-reset", "reset-triggered-due-to-ha-policy-of-reset", 16)
    prop._addConstant("ha-switchover", "reset-triggered-due-to-ha-policy-of-switchover", 15)
    prop._addConstant("halt", "kernel-halt", 13)
    prop._addConstant("hw", "reset-triggered-due-to-hardware-error", 21)
    prop._addConstant("idprom-err", "bootup-error-accessing-module-idprom", 114)
    prop._addConstant("incompat-config", "reset-(powered-down)-because-of-incompatible-configuration", 43)
    prop._addConstant("ins-seq-fail-pwr-dwn", "reset-(powered-down)-due-to-insertion-sequence-failed", 89)
    prop._addConstant("installer", "reset-by-installer", 31)
    prop._addConstant("insufficient-resource", "reset-(powered-down)-because-of-insufficient-resources-(di)", 38)
    prop._addConstant("issu-restart", "reset-due-to-upgrade", 88)
    prop._addConstant("klm-fail", "klm-load-failure", 131)
    prop._addConstant("last-fc-down", "reloading-linecard-on-removal-of-last-fabric-card", 133)
    prop._addConstant("last-sc-down", "reloading-linecard-and-fabric-card-on-removal-of-last-sc", 136)
    prop._addConstant("lcm-async-notice-fail", "stop-async-notice-failed", 77)
    prop._addConstant("lcm-boot-srg-timeout", "srg-info-response-timeout", 47)
    prop._addConstant("lcm-coredump", "core-dump-initiation", 48)
    prop._addConstant("lcm-disruptive-upg", "disruptive-upgrade", 49)
    prop._addConstant("lcm-ha-restart", "ha-system-restart", 45)
    prop._addConstant("lcm-haswitchover-done", "ha-switchover-done", 46)
    prop._addConstant("lcm-hitfull-img-check", "hitful-image-compatibility-check", 68)
    prop._addConstant("lcm-hitless-mod-rem", "hitless-module-removal", 51)
    prop._addConstant("lcm-hitless-proc-notice", "catastrophic-error-from-lc", 53)
    prop._addConstant("lcm-hitless-pwr-dwn", "hitless-power-down", 52)
    prop._addConstant("lcm-hitless-reg-fail", "hitless-registration-failed", 54)
    prop._addConstant("lcm-hitless-timeout", "hitless-upgrade-timeout", 55)
    prop._addConstant("lcm-hitless-upg-fail", "hitless-upgrade-failed", 59)
    prop._addConstant("lcm-img-check-pwr-cycle", "image-compatibility-check-(action:powercycle)", 69)
    prop._addConstant("lcm-img-check-pwr-dwn", "image-compatibility-check-(action:powerdown)", 70)
    prop._addConstant("lcm-img-check-switch-over", "switchover-:-image-compatibility-check", 71)
    prop._addConstant("lcm-img-upg-timeout", "line-card-image-upgrade-(failure)", 56)
    prop._addConstant("lcm-img-upgsuccess", "line-card-image-upgrade-(success)", 57)
    prop._addConstant("lcm-lc-fail", "line-card-failure", 50)
    prop._addConstant("lcm-lc-ins-seq-fail", "lc-insertion-sequence-failure", 58)
    prop._addConstant("lcm-lc-no-resp", "line-card-not-responding", 60)
    prop._addConstant("lcm-lc-reg-more3", "line-card-3+-registration", 61)
    prop._addConstant("lcm-lc-reg-timeout", "line-card-registration-timeout", 62)
    prop._addConstant("lcm-lc-rem", "module-is-removed", 74)
    prop._addConstant("lcm-power-down", "module-is-powered-down-or-power-cycled", 72)
    prop._addConstant("lcm-proc-notice", "line-card-catastrophic-error", 66)
    prop._addConstant("lcm-runtime-diag-fail", "runtime-diagnostic-failure", 63)
    prop._addConstant("lcm-runtime-diag-timeout", "runtime-diagnostic-timeout", 64)
    prop._addConstant("lcm-save-state-fail", "save-state-response-(failure)", 67)
    prop._addConstant("lcm-seeprom-timeout", "line-card-seeprom-contents-response-timeout", 65)
    prop._addConstant("lcm-srg-incompat", "upgraded-srg-incompatible", 80)
    prop._addConstant("lcm-srg-timeout", "srg-infor-response-timeout", 76)
    prop._addConstant("lcm-sup-rem", "supervisor-card-is-removed-or-power-cycled", 73)
    prop._addConstant("lcm-switchover-fail", "switchover-failed", 78)
    prop._addConstant("lcm-timeout", "addon-image-response-timeout", 79)
    prop._addConstant("lcm-unknown", "unknown-reason", 44)
    prop._addConstant("lcm-unknown-mod", "unknown-line-card-insertion", 75)
    prop._addConstant("max-bring-up-exceed", "failure(powered-down)-since-maximum-number-of-bringups-were-exceeded", 120)
    prop._addConstant("max-switchover", "reset-(powered-down)-since-maximum-number-of-swovers-were-exceeded", 107)
    prop._addConstant("mgmt-app", "reset-requested-by-management-application", 20)
    prop._addConstant("mod-err", "reset-requested-due-to-fatal-module-error", 4)
    prop._addConstant("mod-fail", "module-failed", 111)
    prop._addConstant("mod-fail-pwr-up", "unable-to-power-up-card-(power-ok-not-set)", 119)
    prop._addConstant("mod-pwr-cycle", "module-powercycled", 112)
    prop._addConstant("netboot-err", "reset-(powered-down)-because-netboot-failed", 29)
    prop._addConstant("no-bootflash", "reset-(powered-down)-because-there-is-no-bootflash", 28)
    prop._addConstant("no-plugin", "plugin-absent/-not-loaded", 117)
    prop._addConstant("no-sup", "reset-due-to-no-sup", 92)
    prop._addConstant("outofservice", "out-of-service", 86)
    prop._addConstant("panic", "kernel-panic", 19)
    prop._addConstant("pfm-power-dwn", "power-down-triggered-due-to-platform-manager-event", 18)
    prop._addConstant("pfm-rtime", "power-down-triggered-due-to-platform-manager-runtime-error", 17)
    prop._addConstant("policy-fan", "powered-down-due-to-fan-policy-trigger", 104)
    prop._addConstant("policy-reset", "policy-trigger-initiated-reset:", 103)
    prop._addConstant("psp", "reset-due-to-cmp", 96)
    prop._addConstant("push-button", "linecard-reset-by-push-button", 101)
    prop._addConstant("pwr-cfg", "configured-power-down", 5)
    prop._addConstant("reboot", "kernel-reboot", 1)
    prop._addConstant("redun-channel", "reset-triggered-due-to-bad-redundancy-channel", 23)
    prop._addConstant("redundancy", "reset-requested-by-redundancy", 14)
    prop._addConstant("reload", "reset-requested-by-cli-command-reload", 9)
    prop._addConstant("sigkill-fail", "reset-triggered-due-to-failure-to-respond-to-sigkill", 34)
    prop._addConstant("sprom-upd", "reset-requested-due-to-sprom-update", 10)
    prop._addConstant("ssd-firmware-upgrade", "system-power-cycled-due-to-ssd-firmware-upgrade", 139)
    prop._addConstant("sup-dev-err", "supervisor-device-error", 87)
    prop._addConstant("sw-card-id-unknown", "unknown-card-(could-not-get-software-card-id)", 118)
    prop._addConstant("switchover-timeout", "reset-since-switchover-timeout", 108)
    prop._addConstant("sys-cfg-dwn", "system-reset-due-to-element-manager", 11)
    prop._addConstant("sys-gen-fail", "reset-triggered-by-system-manager-for-generic-failure", 35)
    prop._addConstant("sys-health", "reset-due-to-bad-hw-detected-by-system-health", 24)
    prop._addConstant("sys-rst", "system-reset-by-active-sup-(by-writing-to-pmfpga-regs)", 100)
    prop._addConstant("sysmgr", "reset-requested-due-to-fatal-system-error", 3)
    prop._addConstant("sysmgr-timeout", "reset-of-standby-by-active-sup-due-to-sysmgr-timeout", 109)
    prop._addConstant("temp-alaram", "power-down-due-to-temperature-sensor-policy-trigger", 6)
    prop._addConstant("unknown", "unknown", 0)
    prop._addConstant("unknown-mod", "unsupported/unknown-module", 110)
    prop._addConstant("unspecified", "non-specific-deadend-error,-check-platform-int-error", 115)
    prop._addConstant("upg-err", "reset-requested-due-to-fatal-upgrade-error", 8)
    prop._addConstant("usd-fail", "reset-due-to-usd-failure", 98)
    prop._addConstant("user-switchover", "reset-triggered-due-to-switchover-request-by-user", 7)
    prop._addConstant("watchdog", "watchdog-timeout", 2)
    meta.props.add("lastResetReason", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 14, PropCategory.REGULAR)
    prop.label = "Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("cluster", "cluster", 2)
    prop._addConstant("stand-alone", "stand-alone", 1)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 13769, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 13, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.regex = ['[a-zA-Z][a-zA-Z0-9-]{0,29}']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "nodeType", "nodeType", 34407, PropCategory.REGULAR)
    prop.label = "NodeType"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("remote-leaf-wan", "remote-leaf-wan", 1)
    prop._addConstant("tier-2-leaf", "tier-2-leaf", 3)
    prop._addConstant("unspecified", "unspecified", 0)
    prop._addConstant("virtual", "virtual", 2)
    meta.props.add("nodeType", prop)

    prop = PropMeta("str", "oobMgmtAddr", "oobMgmtAddr", 16, PropCategory.REGULAR)
    prop.label = "Out-of-band Management IP Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("oobMgmtAddr", prop)

    prop = PropMeta("str", "oobMgmtAddr6", "oobMgmtAddr6", 23249, PropCategory.REGULAR)
    prop.label = "Out-of-band Management IPv6 Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("oobMgmtAddr6", prop)

    prop = PropMeta("str", "oobMgmtAddr6Mask", "oobMgmtAddr6Mask", 34323, PropCategory.REGULAR)
    prop.label = "Out-of-band Management IPv6 Address Mask"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("oobMgmtAddr6Mask", prop)

    prop = PropMeta("str", "oobMgmtAddrMask", "oobMgmtAddrMask", 34322, PropCategory.REGULAR)
    prop.label = "Out-of-band Management IP Address Mask"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("oobMgmtAddrMask", prop)

    prop = PropMeta("str", "oobMgmtGateway", "oobMgmtGateway", 34324, PropCategory.REGULAR)
    prop.label = "Out-of-band Management IP Gateway"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("oobMgmtGateway", prop)

    prop = PropMeta("str", "oobMgmtGateway6", "oobMgmtGateway6", 34325, PropCategory.REGULAR)
    prop.label = "Out-of-band Management IPv6 Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("oobMgmtGateway6", prop)

    prop = PropMeta("str", "podId", "podId", 23, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 254)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("podId", prop)

    prop = PropMeta("str", "remoteNetworkId", "remoteNetworkId", 20624, PropCategory.REGULAR)
    prop.label = "Remote Network ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("remoteNetworkId", prop)

    prop = PropMeta("str", "remoteNode", "remoteNode", 20623, PropCategory.REGULAR)
    prop.label = "Remote"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("remoteNode", prop)

    prop = PropMeta("str", "rlOperPodId", "rlOperPodId", 54436, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("rlOperPodId", prop)

    prop = PropMeta("str", "rlRoutableMode", "rlRoutableMode", 53306, PropCategory.REGULAR)
    prop.label = "Is RL Routable"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("rlRoutableMode", prop)

    prop = PropMeta("str", "rldirectMode", "rldirectMode", 49951, PropCategory.REGULAR)
    prop.label = "RlDirectMode"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("rldirectMode", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "role", "role", 18, PropCategory.REGULAR)
    prop.label = "Role"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unsupported"
    prop._addConstant("controller", "controller", 1)
    prop._addConstant("leaf", "leaf", 2)
    prop._addConstant("protection-chain", "protection-chain", 6)
    prop._addConstant("spine", "spine", 3)
    prop._addConstant("unsupported", "unknown", 0)
    prop._addConstant("vip", "vip", 5)
    prop._addConstant("vleaf", "vleaf", 4)
    meta.props.add("role", prop)

    prop = PropMeta("str", "serial", "serial", 22, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("serial", prop)

    prop = PropMeta("str", "serverType", "serverType", 44455, PropCategory.REGULAR)
    prop.label = "DhcpServerType"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("primary", "primary", 1)
    prop._addConstant("secondary", "secondary", 2)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("serverType", prop)

    prop = PropMeta("str", "siteId", "siteId", 29954, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 1000)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("siteId", prop)

    prop = PropMeta("str", "state", "state", 26, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "out-of-service"
    prop._addConstant("downloading-boot-script", "downloading-boot-script", 5)
    prop._addConstant("downloading-firmware", "downloading-firmware", 6)
    prop._addConstant("in-service", "in-service", 2)
    prop._addConstant("invalid-ver", "invalid-ver", 1)
    prop._addConstant("out-of-service", "out-of-service", 0)
    prop._addConstant("requesting-tep", "requesting-tep", 4)
    meta.props.add("state", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "systemUpTime", "systemUpTime", 21, PropCategory.REGULAR)
    prop.label = "System Up Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("systemUpTime", prop)

    prop = PropMeta("str", "tepPool", "tepPool", 32651, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("tepPool", prop)

    prop = PropMeta("str", "unicastXrEpLearnDisable", "unicastXrEpLearnDisable", 33382, PropCategory.REGULAR)
    prop.label = "Disable xrLeanrs"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("unicastXrEpLearnDisable", prop)

    prop = PropMeta("str", "version", "version", 54140, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("version", prop)

    prop = PropMeta("str", "virtualMode", "virtualMode", 44456, PropCategory.REGULAR)
    prop.label = "VirtualMode"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("virtualMode", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

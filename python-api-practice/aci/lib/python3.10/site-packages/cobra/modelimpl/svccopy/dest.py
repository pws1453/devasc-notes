# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Dest(Mo):
    """
     Copy dest, represents a destination to which is a copy is sent 

    """

    meta = ClassMeta("cobra.model.svccopy.Dest")

    meta.moClassName = "svccopyDest"
    meta.rnFormat = "dest-[%(tepIp)s]-[%(bdVnid)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Copy Destination"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x2000000000000001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.vns.SvcCopyCons")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.svccopy.RtCopyDestAtt")

    meta.childNamesAndRnPrefix.append(("cobra.model.svccopy.RtCopyDestAtt", "rtcopyDestAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.SvcCopyCons", "svccopycons-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.svccopy.Inst")

    meta.rnPrefixes = [
        ('dest-', True),
        ('-', True),
    ]

    prop = PropMeta("str", "bdVnid", "bdVnid", 22008, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("bdVnid", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "id", "id", 23315, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 65535)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("id", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 26390, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "mtu", "mtu", 22009, PropCategory.REGULAR)
    prop.label = "Truncation MTU"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(64, 9216)]
    prop.defaultValue = 1518
    prop.defaultValueStr = "1518"
    meta.props.add("mtu", prop)

    prop = PropMeta("str", "nodeId", "nodeId", 23314, PropCategory.REGULAR)
    prop.label = "Node ID"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 16000)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("nodeId", prop)

    prop = PropMeta("str", "operSt", "operSt", 22010, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "operStQual", "operStQual", 22011, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "no-oper-dest"
    prop._addConstant("active", "the-session-is-up", 1)
    prop._addConstant("error", "generic-error", 3)
    prop._addConstant("hw-err", "hardware-error", 9)
    prop._addConstant("no-hw-res", "no-hardware-resource", 2)
    prop._addConstant("no-oper-dest", "no-oper-dest", 0)
    prop._addConstant("obj-error", "objstore-input-error", 8)
    prop._addConstant("tun-down", "tunnel-down", 6)
    prop._addConstant("unknown-vlan", "vlan-of-interface-in-copy-bd-is-not-available-yet", 7)
    prop._addConstant("unknown-vrf", "unknown-vrf", 4)
    prop._addConstant("unres-tun-ip", "unresolved-tunnel-ip", 5)
    meta.props.add("operStQual", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "svccopyCfgFailedBmp", "svccopyCfgFailedBmp", 25830, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("svccopy:DestbdVnid_failed_flag", None, 1)
    prop._addConstant("svccopy:Destid_failed_flag", None, 2)
    prop._addConstant("svccopy:DestlcOwn_failed_flag", None, -9223372036854775808)
    prop._addConstant("svccopy:DestmodTs_failed_flag", None, 2305843009213693952)
    prop._addConstant("svccopy:DestmonPolDn_failed_flag", None, 4)
    prop._addConstant("svccopy:Destmtu_failed_flag", None, 8)
    prop._addConstant("svccopy:DestnodeId_failed_flag", None, 16)
    prop._addConstant("svccopy:DesttepIp_failed_flag", None, 1024)
    meta.props.add("svccopyCfgFailedBmp", prop)

    prop = PropMeta("str", "svccopyCfgFailedTs", "svccopyCfgFailedTs", 25832, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("svccopyCfgFailedTs", prop)

    prop = PropMeta("str", "svccopyCfgState", "svccopyCfgState", 25831, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("svccopyCfgState", prop)

    prop = PropMeta("str", "tepIp", "tepIp", 22007, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("tepIp", prop)

    meta.namingProps.append(getattr(meta.props, "tepIp"))
    getattr(meta.props, "tepIp").needDelimiter = True
    meta.namingProps.append(getattr(meta.props, "bdVnid"))
    getattr(meta.props, "bdVnid").needDelimiter = True

    def __init__(self, parentMoOrDn, tepIp, bdVnid, markDirty=True, **creationProps):
        namingVals = [tepIp, bdVnid]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

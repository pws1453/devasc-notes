# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Node(Mo):
    """
    The root node for the APIC.

    """

    meta = ClassMeta("cobra.model.fabric.Node")

    meta.moClassName = "fabricNode"
    meta.rnFormat = "node-%(id)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Fabric Node"
    meta.writeAccessMask = 0x80000000001
    meta.readAccessMask = 0x7bffffffffffffff
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.childClasses.add("cobra.model.fabric.RtNginxFabricNode")
    meta.childClasses.add("cobra.model.ctx.ClassCnt")
    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.tag.AliasInst")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.tag.Inst")
    meta.childClasses.add("cobra.model.infra.LoNode")
    meta.childClasses.add("cobra.model.fault.CountsWithDetails")
    meta.childClasses.add("cobra.model.top.System")
    meta.childClasses.add("cobra.model.fabric.RtNodeL3OutAtt")
    meta.childClasses.add("cobra.model.fabric.RtOFabricNode")
    meta.childClasses.add("cobra.model.fabric.Heartbeat")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.fabric.RtDestApic")
    meta.childClasses.add("cobra.model.tag.AliasDelInst")
    meta.childClasses.add("cobra.model.fabric.RtNodeLocation")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.fabric.RtSrcToNode")
    meta.childClasses.add("cobra.model.fabric.RtInBStNode")
    meta.childClasses.add("cobra.model.fabric.RtFabricNodeRef")
    meta.childClasses.add("cobra.model.fabric.RtDbgrNodeRel")
    meta.childClasses.add("cobra.model.telemetry.Alert")
    meta.childClasses.add("cobra.model.tag.ExtMngdInst")
    meta.childClasses.add("cobra.model.fabric.RtStCEpToNode")
    meta.childClasses.add("cobra.model.infra.Cont")
    meta.childClasses.add("cobra.model.stats.ExportStatusCont")
    meta.childClasses.add("cobra.model.dbg.NDbgs")
    meta.childClasses.add("cobra.model.fabric.RtNodeAtt")
    meta.childClasses.add("cobra.model.fabric.RtFabricNode")
    meta.childClasses.add("cobra.model.fabric.RtOoBStNode")
    meta.childClasses.add("cobra.model.fabric.NodeInfo")
    meta.childClasses.add("cobra.model.fabric.RtHealthFabricNode")
    meta.childClasses.add("cobra.model.fabric.RtDecommissionNode")
    meta.childClasses.add("cobra.model.comm.WebServer")
    meta.childClasses.add("cobra.model.fabric.RtNodeDefL3OutAtt")
    meta.childClasses.add("cobra.model.ctx.Local")
    meta.childClasses.add("cobra.model.fabric.SubscribeToPMAction")

    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RtFabricNodeRef", "rtobserverFabricNodeRef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RtHealthFabricNode", "rtfaultHealthFabricNode-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RtNodeDefL3OutAtt", "rtl3extNodeDefL3OutAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RtNginxFabricNode", "rtaaaNginxFabricNode-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RtNodeL3OutAtt", "rtl3extNodeL3OutAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RtFabricNode", "rtinfraFabricNode-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RtDecommissionNode", "rtDecommissionNode"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RtDbgrNodeRel", "rtpolDbgrNodeRel-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RtInBStNode", "rtmgmtInBStNode-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RtStCEpToNode", "rtfvStCEpToNode-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RtOoBStNode", "rtmgmtOoBStNode-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RtOFabricNode", "rtOFabricNode-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RtNodeLocation", "rtnodeLocation"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RtNodeAtt", "rtfvNodeAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RtSrcToNode", "rtsrcToNode"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.RtDestApic", "rtdestApic"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.Heartbeat", "heartbeat"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasDelInst", "aliasdel-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.stats.ExportStatusCont", "statexpst"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.CountsWithDetails", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.ExtMngdInst", "extmngd"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.telemetry.Alert", "alert-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ctx.ClassCnt", "ccnt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasInst", "alias"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dbg.NDbgs", "ndbgs"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ctx.Local", "local"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.SubscribeToPMAction", "stpma"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Inst", "tag-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.LoNode", "lon"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.System", "sys"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comm.WebServer", "web"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.Cont", "av"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeInfo", "ni"))

    meta.parentClasses.add("cobra.model.fabric.Pod")

    meta.superClasses.add("cobra.model.naming.NamedObject")

    meta.rnPrefixes = [
        ('node-', True),
    ]

    prop = PropMeta("str", "adSt", "adSt", 669, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "on"
    prop._addConstant("locate", "locate", 5)
    prop._addConstant("locate-off", "locate-off", 6)
    prop._addConstant("off", "off", 1)
    prop._addConstant("on", "on", 2)
    prop._addConstant("reboot", "reboot", 4)
    prop._addConstant("shutdown", "shutdown", 3)
    meta.props.add("adSt", prop)

    prop = PropMeta("str", "address", "address", 49949, PropCategory.REGULAR)
    prop.label = "IP Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("address", prop)

    prop = PropMeta("str", "annotation", "annotation", 37342, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "apicType", "apicType", 44554, PropCategory.REGULAR)
    prop.label = "APIC type"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "apic"
    prop._addConstant("apic", "apic", 1)
    prop._addConstant("apicX", "apicx", 2)
    meta.props.add("apicType", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "delayedHeartbeat", "delayedHeartbeat", 671, PropCategory.REGULAR)
    prop.label = "Delayed Heartbeat"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("delayedHeartbeat", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 39481, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "fabricSt", "fabricSt", 16162, PropCategory.REGULAR)
    prop.label = "Fabric State"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 7
    prop.defaultValueStr = "unknown"
    prop._addConstant("active", "active", 1)
    prop._addConstant("decommissioned", "decommissioned", 8)
    prop._addConstant("disabled", "disabled", 3)
    prop._addConstant("discovering", "discovering", 4)
    prop._addConstant("inactive", "inactive", 2)
    prop._addConstant("undiscovered", "undiscovered", 5)
    prop._addConstant("unknown", "unknown", 7)
    prop._addConstant("unsupported", "unsupported", 6)
    meta.props.add("fabricSt", prop)

    prop = PropMeta("str", "id", "id", 663, PropCategory.REGULAR)
    prop.label = "Id"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "lastStateModTs", "lastStateModTs", 35757, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("lastStateModTs", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "model", "model", 666, PropCategory.REGULAR)
    prop.label = "Model"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("model", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 13856, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 662, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "nodeType", "nodeType", 34408, PropCategory.REGULAR)
    prop.label = "Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("remote-leaf-wan", "remote-leaf-wan", 1)
    prop._addConstant("tier-2-leaf", "tier-2-leaf", 3)
    prop._addConstant("unspecified", "unspecified", 0)
    prop._addConstant("virtual", "virtual", 2)
    meta.props.add("nodeType", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "role", "role", 664, PropCategory.REGULAR)
    prop.label = "Role"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unsupported"
    prop._addConstant("controller", "controller", 1)
    prop._addConstant("leaf", "leaf", 2)
    prop._addConstant("protection-chain", "protection-chain", 6)
    prop._addConstant("spine", "spine", 3)
    prop._addConstant("unsupported", "unknown", 0)
    prop._addConstant("vip", "vip", 5)
    prop._addConstant("vleaf", "vleaf", 4)
    meta.props.add("role", prop)

    prop = PropMeta("str", "serial", "serial", 668, PropCategory.REGULAR)
    prop.label = "Serial"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("serial", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "vendor", "vendor", 665, PropCategory.REGULAR)
    prop.label = "Vendor"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    prop.defaultValue = "Cisco Systems, Inc"
    prop.defaultValueStr = "Cisco Systems, Inc"
    meta.props.add("vendor", prop)

    prop = PropMeta("str", "version", "version", 667, PropCategory.REGULAR)
    prop.label = "Version"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("version", prop)

    meta.namingProps.append(getattr(meta.props, "id"))

    meta.deploymentCategory = DeploymentCategory("node", "Node")
    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

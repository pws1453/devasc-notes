# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class ClientResp(Mo):
    """
    The DHCP client response.

    """

    meta = ClassMeta("cobra.model.dhcp.ClientResp")

    meta.moClassName = "dhcpClientResp"
    meta.rnFormat = "resp"
    meta.category = MoCategory.REGULAR
    meta.label = "Client Response"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.dhcptlv.UByte")
    meta.childClasses.add("cobra.model.dhcptlv.UInt16")
    meta.childClasses.add("cobra.model.dhcptlv.UInt64")
    meta.childClasses.add("cobra.model.dhcptlv.Complex")
    meta.childClasses.add("cobra.model.dhcptlv.UInt32")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.dhcptlv.Ip")
    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.dhcptlv.Text")
    meta.childClasses.add("cobra.model.dhcptlv.Mac")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcptlv.Complex", "complex-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcptlv.UInt16", "uint16-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcptlv.UInt64", "uint64-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcptlv.UInt32", "uint32-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcptlv.UByte", "ubyte-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcptlv.Text", "text-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcptlv.Mac", "mac-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcptlv.Ip", "ip-"))

    meta.parentClasses.add("cobra.model.dhcp.ClientIf")

    meta.superClasses.add("cobra.model.dhcp.Resp")

    meta.rnPrefixes = [
        ('resp', False),
    ]

    prop = PropMeta("str", "annotation", "annotation", 37755, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "chAddr", "chAddr", 2945, PropCategory.REGULAR)
    prop.label = "Client Hardware Address"
    prop.isOper = True
    meta.props.add("chAddr", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 39894, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "file", "file", 2948, PropCategory.REGULAR)
    prop.label = "File"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("file", prop)

    prop = PropMeta("str", "gwAddr", "gwAddr", 24632, PropCategory.REGULAR)
    prop.label = "Router IP"
    prop.isOper = True
    meta.props.add("gwAddr", prop)

    prop = PropMeta("str", "hostName", "hostName", 2953, PropCategory.REGULAR)
    prop.label = "Host Name"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("hostName", prop)

    prop = PropMeta("str", "ifId", "ifId", 2954, PropCategory.REGULAR)
    prop.label = "Interface ID"
    prop.isOper = True
    meta.props.add("ifId", prop)

    prop = PropMeta("str", "leaseTime", "leaseTime", 2952, PropCategory.REGULAR)
    prop.label = "Lease Time"
    prop.isOper = True
    meta.props.add("leaseTime", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "msgT", "msgT", 2949, PropCategory.REGULAR)
    prop.label = "Message Type"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "discover"
    prop._addConstant("ack", "ack", 5)
    prop._addConstant("decline", "decline", 4)
    prop._addConstant("discover", "discover", 1)
    prop._addConstant("inform", "inform", 8)
    prop._addConstant("invalid", "invalid", 255)
    prop._addConstant("nak", "nak", 6)
    prop._addConstant("offer", "offer", 2)
    prop._addConstant("release", "release", 7)
    prop._addConstant("request", "request", 3)
    meta.props.add("msgT", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "serverId", "serverId", 2950, PropCategory.REGULAR)
    prop.label = "Server ID"
    prop.isOper = True
    meta.props.add("serverId", prop)

    prop = PropMeta("str", "siAddr", "siAddr", 2947, PropCategory.REGULAR)
    prop.label = "Server IP Address"
    prop.isOper = True
    meta.props.add("siAddr", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "subnetMask", "subnetMask", 2951, PropCategory.REGULAR)
    prop.label = "Subnet Mask"
    prop.isOper = True
    meta.props.add("subnetMask", prop)

    prop = PropMeta("str", "yiAddr", "yiAddr", 2946, PropCategory.REGULAR)
    prop.label = "Your IP Address"
    prop.isOper = True
    meta.props.add("yiAddr", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Inst(Mo):
    """
    The DHCP instance information. There is only one instance of DHCP relay currently running in the system.

    """

    meta = ClassMeta("cobra.model.dhcp.Inst")

    meta.moClassName = "dhcpInst"
    meta.rnFormat = "inst"
    meta.category = MoCategory.REGULAR
    meta.label = "DHCP Instance"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.dhcp.RelayIf")
    meta.childClasses.add("cobra.model.dhcp.DiscvryIpRouteDef")
    meta.childClasses.add("cobra.model.dhcp.ServerInfo")
    meta.childClasses.add("cobra.model.dhcp.ClientIf")
    meta.childClasses.add("cobra.model.dhcp.BootStrapLoader")
    meta.childClasses.add("cobra.model.dhcp.ServerIf")

    meta.childNamesAndRnPrefix.append(("cobra.model.dhcp.BootStrapLoader", "bootstraploader"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcp.DiscvryIpRouteDef", "DscIpRouteDef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcp.ServerInfo", "dhcpserverinfo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcp.ClientIf", "clientif-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcp.ServerIf", "serverif-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcp.RelayIf", "relayif-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.dhcp.Entity")

    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.l3.ProtInst")
    meta.superClasses.add("cobra.model.nw.CpInst")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.ProtInst")
    meta.superClasses.add("cobra.model.nw.GEp")

    meta.rnPrefixes = [
        ('inst', False),
    ]

    prop = PropMeta("str", "adminSt", "adminSt", 3679, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 3680, PropCategory.REGULAR)
    prop.label = "Controls"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("stateful-ha", "stateful-ha", 1)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "discovryIssues", "discovryIssues", 54491, PropCategory.REGULAR)
    prop.label = "reason for boostscript/bootstrap failure"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("discovryIssues", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14476, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 3678, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operErr", "operErr", 3681, PropCategory.REGULAR)
    prop.label = "Operational Errors Qualifier"
    prop.isOper = True
    prop._addConstant("feature-unsupported", "feature-unsupported", 64)
    prop._addConstant("init-err", "initialization-error", 1)
    prop._addConstant("int-err", "internal-error", 8)
    prop._addConstant("ipc-err", "ipc-error", 4)
    prop._addConstant("mem-err", "memory-error", 2)
    prop._addConstant("proto-err", "protocol-error", 32)
    prop._addConstant("sock-err", "socket-error", 16)
    meta.props.add("operErr", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

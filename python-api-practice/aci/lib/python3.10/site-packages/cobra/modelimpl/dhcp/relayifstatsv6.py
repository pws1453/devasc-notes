# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class RelayIfStatsv6(Mo):
    """
    

    """

    meta = ClassMeta("cobra.model.dhcp.RelayIfStatsv6")

    meta.moClassName = "dhcpRelayIfStatsv6"
    meta.rnFormat = "statv6"
    meta.category = MoCategory.REGULAR
    meta.label = "IPv6 Relay Interface Statistics"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))

    meta.parentClasses.add("cobra.model.dhcp.RelayIf")

    meta.rnPrefixes = [
        ('statv6', False),
    ]

    prop = PropMeta("str", "annotation", "annotation", 38231, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "badContext", "badContext", 19800, PropCategory.REGULAR)
    prop.label = "Bad Context"
    prop.isOper = True
    meta.props.add("badContext", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "directReply", "directReply", 19802, PropCategory.REGULAR)
    prop.label = "Direct Reply"
    prop.isOper = True
    meta.props.add("directReply", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 40370, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "hopLimitExceeded", "hopLimitExceeded", 19798, PropCategory.REGULAR)
    prop.label = "Hop Limit Exceeded"
    prop.isOper = True
    meta.props.add("hopLimitExceeded", prop)

    prop = PropMeta("str", "intfError", "intfError", 19804, PropCategory.REGULAR)
    prop.label = "Interface Error"
    prop.isOper = True
    meta.props.add("intfError", prop)

    prop = PropMeta("str", "ipv6ExtnHdrsPresent", "ipv6ExtnHdrsPresent", 19807, PropCategory.REGULAR)
    prop.label = "IPv6 Extension Headers Present"
    prop.isOper = True
    meta.props.add("ipv6ExtnHdrsPresent", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "noIpv6Addr", "noIpv6Addr", 19805, PropCategory.REGULAR)
    prop.label = "Missing IPv6 Address"
    prop.isOper = True
    meta.props.add("noIpv6Addr", prop)

    prop = PropMeta("str", "optInsertFail", "optInsertFail", 19801, PropCategory.REGULAR)
    prop.label = "Option Insert Failure"
    prop.isOper = True
    meta.props.add("optInsertFail", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "unkownOutputIntf", "unkownOutputIntf", 19803, PropCategory.REGULAR)
    prop.label = "Unknown Output Interface"
    prop.isOper = True
    meta.props.add("unkownOutputIntf", prop)

    prop = PropMeta("str", "v6RelayDisabled", "v6RelayDisabled", 19797, PropCategory.REGULAR)
    prop.label = "IPv6 Relay Disabled"
    prop.isOper = True
    meta.props.add("v6RelayDisabled", prop)

    prop = PropMeta("str", "validationFailed", "validationFailed", 19799, PropCategory.REGULAR)
    prop.label = "Validation Failure"
    prop.isOper = True
    meta.props.add("validationFailed", prop)

    prop = PropMeta("str", "vpnOptDisabled", "vpnOptDisabled", 19806, PropCategory.REGULAR)
    prop.label = "VPN Option Disabled"
    prop.isOper = True
    meta.props.add("vpnOptDisabled", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

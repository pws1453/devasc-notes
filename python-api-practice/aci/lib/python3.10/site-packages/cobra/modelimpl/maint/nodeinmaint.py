# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class NodeInMaint(Mo):
    """
    A scheduler keeps a list consisting only of nodes with an upgrade in progress. This object is used by the scheduler to   keep track of nodes in the installation and only exists on the controller.

    """

    meta = ClassMeta("cobra.model.maint.NodeInMaint")

    meta.moClassName = "maintNodeInMaint"
    meta.rnFormat = "node-%(nodeId)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Node in Maintenance"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x80000000001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.maint.UpgStatus")
    meta.parentClasses.add("cobra.model.maint.UpgJob")

    meta.rnPrefixes = [
        ('node-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "fwName", "fwName", 655, PropCategory.REGULAR)
    prop.label = "Firmware Policy Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("fwName", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 13848, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "nodeId", "nodeId", 648, PropCategory.REGULAR)
    prop.label = "Node Id"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("nodeId", prop)

    prop = PropMeta("str", "nodeIp", "nodeIp", 649, PropCategory.REGULAR)
    prop.label = "Node Ip"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("nodeIp", prop)

    prop = PropMeta("str", "peerNodeIp", "peerNodeIp", 650, PropCategory.REGULAR)
    prop.label = "Peer Node Ip"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("peerNodeIp", prop)

    prop = PropMeta("str", "polName", "polName", 654, PropCategory.REGULAR)
    prop.label = "Maintenance Policy Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("polName", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "schedulerCommStatus", "schedulerCommStatus", 44531, PropCategory.REGULAR)
    prop.label = "Scheduler communication status"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("obtained-upgrade-token-from-scheduler", "obtained-upgrade-token-from-scheduler", 3)
    prop._addConstant("requesting-upgrade-token-from-scheduler", "requesting-upgrade-token-from-scheduler", 2)
    prop._addConstant("sending-upgrade-status-to-scheduler", "sending-upgrade-status-to-scheduler", 0)
    prop._addConstant("sent-upgrade-status-to-scheduler", "sent-upgrade-status-to-scheduler", 1)
    meta.props.add("schedulerCommStatus", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "upgradeStatus", "upgradeStatus", 651, PropCategory.REGULAR)
    prop.label = "Upgrade Status"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "scheduled"
    prop._addConstant("completenok", "failed", 5)
    prop._addConstant("completeok", "completed-successfully", 4)
    prop._addConstant("downloadimgmmode", "downloading-image-in-maintenance-mode", 10)
    prop._addConstant("incompatible", "failed-due-to-incompatible-desired-version", 7)
    prop._addConstant("inprogress", "in-progress", 2)
    prop._addConstant("inqueue", "in-queue", 1)
    prop._addConstant("inretryqueue", "queued-for-retry", 8)
    prop._addConstant("notscheduled", "no-maintenance-scheduled", 6)
    prop._addConstant("scheduled", "scheduled", 0)
    prop._addConstant("waitonbootup", "waiting-on-bootup-completion", 9)
    meta.props.add("upgradeStatus", prop)

    prop = PropMeta("str", "windowStartTime", "windowStartTime", 652, PropCategory.REGULAR)
    prop.label = "Window Start Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("windowStartTime", prop)

    prop = PropMeta("str", "windowTimeCap", "windowTimeCap", 653, PropCategory.REGULAR)
    prop.label = "Maximum Allowed Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("windowTimeCap", prop)

    meta.namingProps.append(getattr(meta.props, "nodeId"))

    def __init__(self, parentMoOrDn, nodeId, markDirty=True, **creationProps):
        namingVals = [nodeId]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

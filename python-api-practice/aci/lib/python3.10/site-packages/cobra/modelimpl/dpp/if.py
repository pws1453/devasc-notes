# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class If(Mo):
    """
     Interface info 

    """

    meta = ClassMeta("cobra.model.dpp.If")

    meta.moClassName = "dppIf"
    meta.rnFormat = "if-[%(id)s]-%(direction)s"
    meta.category = MoCategory.REGULAR
    meta.label = "DPP Interface"
    meta.writeAccessMask = 0x100000000000001
    meta.readAccessMask = 0x100000000000001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.dpp.RsDppIfCreatedByFvIfConn")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.dpp.IfCktAllow1h")
    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.dpp.IfCktAllow1d")
    meta.childClasses.add("cobra.model.dpp.IfCktAllow5min")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowHist1d")
    meta.childClasses.add("cobra.model.dpp.IfCktAllow1qtr")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowHist1w")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowHist5min")
    meta.childClasses.add("cobra.model.dpp.IfCktAllow1w")
    meta.childClasses.add("cobra.model.dpp.IfCktDrop1qtr")
    meta.childClasses.add("cobra.model.dpp.IfCktDropHist15min")
    meta.childClasses.add("cobra.model.dpp.IfCktDropHist1h")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.dpp.IfCktAllow1year")
    meta.childClasses.add("cobra.model.dpp.IfCktDrop15min")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowHist1mo")
    meta.childClasses.add("cobra.model.dpp.IfCktDropHist1w")
    meta.childClasses.add("cobra.model.dpp.IfCktDrop1mo")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowHist1h")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.dpp.IfCktDropHist1d")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowHist1year")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowHist1qtr")
    meta.childClasses.add("cobra.model.dpp.IfCktAllow1mo")
    meta.childClasses.add("cobra.model.dpp.IfCktDrop5min")
    meta.childClasses.add("cobra.model.dpp.IfCktDropHist1mo")
    meta.childClasses.add("cobra.model.dpp.IfCktAllow15min")
    meta.childClasses.add("cobra.model.dpp.IfCktDrop1year")
    meta.childClasses.add("cobra.model.dpp.IfCktDrop1h")
    meta.childClasses.add("cobra.model.dpp.IfCktDrop1d")
    meta.childClasses.add("cobra.model.dpp.IfCktDropHist5min")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowHist15min")
    meta.childClasses.add("cobra.model.dpp.IfCktDropHist1qtr")
    meta.childClasses.add("cobra.model.dpp.IfCktDrop1w")
    meta.childClasses.add("cobra.model.dpp.IfCktDropHist1year")

    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.RsDppIfCreatedByFvIfConn", "rsDppIfCreatedByFvIfConn"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowHist1year", "HDdppIfCktAllow1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowHist15min", "HDdppIfCktAllow15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowHist5min", "HDdppIfCktAllow5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropHist15min", "HDdppIfCktDrop15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllow1year", "CDdppIfCktAllow1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowHist1qtr", "HDdppIfCktAllow1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllow15min", "CDdppIfCktAllow15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropHist1year", "HDdppIfCktDrop1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllow5min", "CDdppIfCktAllow5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllow1qtr", "CDdppIfCktAllow1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDrop15min", "CDdppIfCktDrop15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowHist1mo", "HDdppIfCktAllow1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDrop1year", "CDdppIfCktDrop1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropHist5min", "HDdppIfCktDrop5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropHist1qtr", "HDdppIfCktDrop1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowHist1d", "HDdppIfCktAllow1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowHist1w", "HDdppIfCktAllow1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDrop1qtr", "CDdppIfCktDrop1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowHist1h", "HDdppIfCktAllow1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllow1mo", "CDdppIfCktAllow1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDrop5min", "CDdppIfCktDrop5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropHist1mo", "HDdppIfCktDrop1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllow1h", "CDdppIfCktAllow1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllow1d", "CDdppIfCktAllow1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllow1w", "CDdppIfCktAllow1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropHist1h", "HDdppIfCktDrop1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropHist1w", "HDdppIfCktDrop1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDrop1mo", "CDdppIfCktDrop1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropHist1d", "HDdppIfCktDrop1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDrop1h", "CDdppIfCktDrop1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDrop1d", "CDdppIfCktDrop1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDrop1w", "CDdppIfCktDrop1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.dpp.Class")
    meta.parentClasses.add("cobra.model.dpp.Ckt")

    meta.rnPrefixes = [
        ('if-', True),
        ('-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 38344, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "direction", "direction", 23138, PropCategory.REGULAR)
    prop.label = "Ingress or Egress direction"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 1
    prop.defaultValueStr = "ingress"
    prop._addConstant("egress", "egress", 2)
    prop._addConstant("ingress", "ingress", 1)
    meta.props.add("direction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 40483, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "id", "id", 22255, PropCategory.REGULAR)
    prop.label = "ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "layer", "layer", 22940, PropCategory.REGULAR)
    prop.label = "Layer"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "Layer3"
    prop._addConstant("Layer2", "switched", 1)
    prop._addConstant("Layer3", "routed", 2)
    meta.props.add("layer", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 23566, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "operSt", "operSt", 22941, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "operStQual", "operStQual", 22942, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("dedicated-policer-mode", "policer-configured-with-dedicated-mode", 10)
    prop._addConstant("hwprog-fail", "hardware-programming-failed", 1)
    prop._addConstant("l3-policer-active", "l3-policer-is-already-active", 9)
    prop._addConstant("link-is-down", "policer-is-not-enabled-as-the-link-is-down", 5)
    prop._addConstant("max-if-policer-limit-reached", "max-interface-policer-limit-reached", 2)
    prop._addConstant("policer-action-unsupported", "specified-policer-action-is-not-supported-on-this-platform", 8)
    prop._addConstant("policer-mode-unsupported", "specified-policer-mode-is-not-supported-on-this-platform", 6)
    prop._addConstant("policer-type-unsupported", "specified-policer-type-is-not-supported-on-this-platform", 7)
    prop._addConstant("transient-error", "a-transient-error-occurred,-auto-retry-will-be-attempted", 4)
    prop._addConstant("unspecified", "unspecified", 0)
    prop._addConstant("unsupported-interface-type", "policer-is-not-supported-on-this-type-of-interface", 3)
    meta.props.add("operStQual", prop)

    prop = PropMeta("str", "qosmCfgFailedBmp", "qosmCfgFailedBmp", 23161, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("dpp:Ifannotation_failed_flag", None, 1)
    prop._addConstant("dpp:Ifdirection_failed_flag", None, 2)
    prop._addConstant("dpp:IfextMngdBy_failed_flag", None, 4)
    prop._addConstant("dpp:Ifid_failed_flag", None, 8)
    prop._addConstant("dpp:Iflayer_failed_flag", None, 16)
    prop._addConstant("dpp:IflcOwn_failed_flag", None, -9223372036854775808)
    prop._addConstant("dpp:IfmodTs_failed_flag", None, 2305843009213693952)
    prop._addConstant("dpp:IfmonPolDn_failed_flag", None, 32)
    prop._addConstant("dpp:Ifuid_failed_flag", None, 4611686018427387904)
    meta.props.add("qosmCfgFailedBmp", prop)

    prop = PropMeta("str", "qosmCfgFailedTs", "qosmCfgFailedTs", 23163, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("qosmCfgFailedTs", prop)

    prop = PropMeta("str", "qosmCfgState", "qosmCfgState", 23162, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("qosmCfgState", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    meta.namingProps.append(getattr(meta.props, "id"))
    getattr(meta.props, "id").needDelimiter = True
    meta.namingProps.append(getattr(meta.props, "direction"))

    def __init__(self, parentMoOrDn, id, direction, markDirty=True, **creationProps):
        namingVals = [id, direction]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class CEpDef(Mo):
    """
    The VSPAN Cisco endpoint definition.

    """

    meta = ClassMeta("cobra.model.span.CEpDef")

    meta.moClassName = "spanCEpDef"
    meta.rnFormat = "CEpD-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "SPAN Destination End Point Defn."
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x20001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fv.RsHyper")
    meta.childClasses.add("cobra.model.fv.RsToVm")
    meta.childClasses.add("cobra.model.fv.RsToNic")
    meta.childClasses.add("cobra.model.fv.RtDestToVPort")
    meta.childClasses.add("cobra.model.fv.RtSrcToVPort")

    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtDestToVPort", "rtspanDestToVPort-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtSrcToVPort", "rtspanSrcToVPort-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RsHyper", "rshyper-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RsToNic", "rstoNic-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RsToVm", "rstoVm-"))

    meta.parentClasses.add("cobra.model.span.VDestDef")
    meta.parentClasses.add("cobra.model.span.VSrcDef")

    meta.superClasses.add("cobra.model.span.ACEpDef")
    meta.superClasses.add("cobra.model.naming.NamedIdentifiedObject")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.fv.ATp")
    meta.superClasses.add("cobra.model.fv.NwEp")
    meta.superClasses.add("cobra.model.fv.Ep")

    meta.rnPrefixes = [
        ('CEpD-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "encap", "encap", 1775, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("encap", prop)

    prop = PropMeta("str", "handle", "handle", 16505, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("handle", prop)

    prop = PropMeta("str", "id", "id", 5586, PropCategory.REGULAR)
    prop.label = "Id"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "ip", "ip", 1773, PropCategory.REGULAR)
    prop.label = "IP Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("ip", prop)

    prop = PropMeta("str", "lcC", "lcC", 1772, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("802-dot-1x", "802-dot-1x", 16)
    prop._addConstant("dynamic", "dynamic", 8)
    prop._addConstant("learned", "learned", 2)
    prop._addConstant("poe", "poe", 32)
    prop._addConstant("static", "static", 4)
    prop._addConstant("vmm", "vmm", 1)
    meta.props.add("lcC", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "mac", "mac", 1774, PropCategory.REGULAR)
    prop.label = "MacAddress"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("mac", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 4722, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "nicDn", "nicDn", 16504, PropCategory.REGULAR)
    prop.label = "Nic Dn"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("nicDn", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uuid", "uuid", 1776, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("uuid", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVmmOrchsProvPlan", "Provider Plans", "cobra.model.vmm.OrchsProvPlan"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("SpanSrcGrpToLocale2", "Fabric Nodes(Infra/Fabric)", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("SpanSrcGrpToLocale1", "Interfaces(Tenant)", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ADomPToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("L3ExtOutToNwIf", "Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ControllerToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ControllerToVmmEpPD", "Portgroups", "cobra.model.vmm.EpPD"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVmmEpPD", "Portgroups", "cobra.model.vmm.EpPD"))

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

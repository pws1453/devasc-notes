# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class LDestination(Mo):
    """
    The local SPAN destination, which is where network traffic is sent for analysis by a network analyzer.  When you create a traffic monitoring session, you must select an local SPAN source and destination. The type of session (Tenant, Access, or Fabric) determines the allowed types of local SPAN sources and destinations. The destination can be either a port or endpoint group. If the destination is a port, it should not be one that has been configured for other purposes.

    """

    meta = ClassMeta("cobra.model.span.LDestination")

    meta.moClassName = "spanLDestination"
    meta.rnFormat = "ldst"
    meta.category = MoCategory.REGULAR
    meta.label = "Local Span Destination"
    meta.writeAccessMask = 0x20001
    meta.readAccessMask = 0x20001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fault.Delegate")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.span.Session")

    meta.superClasses.add("cobra.model.span.Destination")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Comp")
    meta.superClasses.add("cobra.model.naming.NamedObject")

    meta.rnPrefixes = [
        ('ldst', False),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 5582, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14403, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "mtu", "mtu", 2039, PropCategory.REGULAR)
    prop.label = "MTU"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(64, 9216)]
    prop.defaultValue = 1518
    prop.defaultValueStr = "1518"
    meta.props.add("mtu", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "operSt", "operSt", 2040, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "down"
    prop._addConstant("down", "down", 2)
    prop._addConstant("failed", "failed", 3)
    prop._addConstant("partial", "partial", 4)
    prop._addConstant("unspecified", "unspecified", 0)
    prop._addConstant("up", "up", 1)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "operStQual", "operStQual", 2041, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop.defaultValue = 3
    prop.defaultValueStr = "no-oper-src-dst"
    prop._addConstant("Dst-PC-Member-Not-Supported-err", "a-pc-member-port-cannot-be-a-local-span-destination", 19)
    prop._addConstant("active", "the-session-is-up", 1)
    prop._addConstant("dummy-src-err", "span-src-is-partially/fully-impacted,-not-programmed-due-to-hw-res-exhaustion", 20)
    prop._addConstant("error", "generic-error", 4)
    prop._addConstant("hw-err", "hardware-error", 15)
    prop._addConstant("invalid-dst-mode", "dst-in-wrong-mode", 9)
    prop._addConstant("invalid-ip", "no-valid-ip-address", 12)
    prop._addConstant("invalid-src-mode", "src-in-wrong-mode", 10)
    prop._addConstant("invalid-vrf", "no-valid-vrf", 11)
    prop._addConstant("no-dst", "no-dest-configured", 6)
    prop._addConstant("no-eg-intf", "egress-interface-not-resolved", 14)
    prop._addConstant("no-hw-res", "no-hardware-resource", 2)
    prop._addConstant("no-oper-src-dst", "no-operational-src/dst", 3)
    prop._addConstant("no-route", "no-route-to-destination-ip-address", 13)
    prop._addConstant("no-src", "no-sources-configured", 5)
    prop._addConstant("no-src-dst", "no-src/dst-configured", 7)
    prop._addConstant("not-supported-err", "configuration-not-supported-on-this-tor", 17)
    prop._addConstant("pc-with-lacp-err", "pc-destination-with-lacp-not-supported", 18)
    prop._addConstant("shut", "session-admin-shut", 8)
    prop._addConstant("ver-error", "erspan-version-not-supported", 16)
    meta.props.add("operStQual", prop)

    prop = PropMeta("str", "port", "port", 2051, PropCategory.REGULAR)
    prop.label = "Port"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("port", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "spanCfgFailedBmp", "spanCfgFailedBmp", 14942, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("span:LDestinationdescr_failed_flag", None, 4)
    prop._addConstant("span:LDestinationlcOwn_failed_flag", None, -9223372036854775808)
    prop._addConstant("span:LDestinationmodTs_failed_flag", None, 2305843009213693952)
    prop._addConstant("span:LDestinationmonPolDn_failed_flag", None, 64)
    prop._addConstant("span:LDestinationmtu_failed_flag", None, 8)
    prop._addConstant("span:LDestinationnameAlias_failed_flag", None, 2)
    prop._addConstant("span:LDestinationname_failed_flag", None, 1)
    prop._addConstant("span:LDestinationport_failed_flag", None, 128)
    meta.props.add("spanCfgFailedBmp", prop)

    prop = PropMeta("str", "spanCfgFailedTs", "spanCfgFailedTs", 14944, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("spanCfgFailedTs", prop)

    prop = PropMeta("str", "spanCfgState", "spanCfgState", 14943, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("spanCfgState", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

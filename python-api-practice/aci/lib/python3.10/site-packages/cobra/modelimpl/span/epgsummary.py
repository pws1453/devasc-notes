# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class EpgSummary(Mo):
    """
    The SPAN destination Epg summary.

    """

    meta = ClassMeta("cobra.model.span.EpgSummary")

    meta.moClassName = "spanEpgSummary"
    meta.rnFormat = "epgsummary"
    meta.category = MoCategory.REGULAR
    meta.label = "SPAN Destination EPG Summary"
    meta.writeAccessMask = 0x20001
    meta.readAccessMask = 0x20001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fv.RsEPgDefToL2Dom")
    meta.childClasses.add("cobra.model.ip.RouteDef")
    meta.childClasses.add("cobra.model.fv.RsEPgDefToL3Dom")
    meta.childClasses.add("cobra.model.fault.Delegate")

    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RsEPgDefToL2Dom", "rsEPgDefToL2Dom"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RsEPgDefToL3Dom", "rsEPgDefToL3Dom"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ip.RouteDef", "rt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.span.Dest")

    meta.superClasses.add("cobra.model.fv.EPgDef")
    meta.superClasses.add("cobra.model.fv.AEPgDef")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Def")
    meta.superClasses.add("cobra.model.span.ADestSummary")
    meta.superClasses.add("cobra.model.span.AEpgSummary")
    meta.superClasses.add("cobra.model.fv.EPgCont")

    meta.rnPrefixes = [
        ('epgsummary', False),
    ]

    prop = PropMeta("str", "bdDefDn", "bdDefDn", 1811, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("bdDefDn", prop)

    prop = PropMeta("str", "bdDefStQual", "bdDefStQual", 1812, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("default-target", "default-target", 2)
    prop._addConstant("mismatch-target", "mismatch-target", 1)
    prop._addConstant("none", "none", 0)
    meta.props.add("bdDefStQual", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctxDefDn", "ctxDefDn", 1813, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("ctxDefDn", prop)

    prop = PropMeta("str", "ctxDefStQual", "ctxDefStQual", 1814, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("default-target", "default-target", 2)
    prop._addConstant("mismatch-target", "mismatch-target", 1)
    prop._addConstant("none", "none", 0)
    meta.props.add("ctxDefStQual", prop)

    prop = PropMeta("str", "ctxSeg", "ctxSeg", 1809, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("ctxSeg", prop)

    prop = PropMeta("str", "descr", "descr", 5579, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dscp", "dscp", 4714, PropCategory.REGULAR)
    prop.label = "DSCP"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.defaultValue = 64
    prop.defaultValueStr = "unspecified"
    prop._addConstant("AF11", "af11-low-drop", 10)
    prop._addConstant("AF12", "af12-medium-drop", 12)
    prop._addConstant("AF13", "af13-high-drop", 14)
    prop._addConstant("AF21", "af21-low-drop", 18)
    prop._addConstant("AF22", "af22-medium-drop", 20)
    prop._addConstant("AF23", "af23-high-drop", 22)
    prop._addConstant("AF31", "af31-low-drop", 26)
    prop._addConstant("AF32", "af32-medium-drop", 28)
    prop._addConstant("AF33", "af33-high-drop", 30)
    prop._addConstant("AF41", "af41-low-drop", 34)
    prop._addConstant("AF42", "af42-medium-drop", 36)
    prop._addConstant("AF43", "af43-high-drop", 38)
    prop._addConstant("CS0", "cs0", 0)
    prop._addConstant("CS1", "cs1", 8)
    prop._addConstant("CS2", "cs2", 16)
    prop._addConstant("CS3", "cs3", 24)
    prop._addConstant("CS4", "cs4", 32)
    prop._addConstant("CS5", "cs5", 40)
    prop._addConstant("CS6", "cs6", 48)
    prop._addConstant("CS7", "cs7", 56)
    prop._addConstant("EF", "expedited-forwarding", 46)
    prop._addConstant("VA", "voice-admit", 44)
    prop._addConstant("unspecified", "unspecified", 64)
    meta.props.add("dscp", prop)

    prop = PropMeta("str", "dstIp", "dstIp", 4707, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("dstIp", prop)

    prop = PropMeta("str", "epgDn", "epgDn", 1807, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("epgDn", prop)

    prop = PropMeta("str", "flowId", "flowId", 4710, PropCategory.REGULAR)
    prop.label = "Flow ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 1023)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("flowId", prop)

    prop = PropMeta("str", "invalid", "invalid", 4716, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("invalid", prop)

    prop = PropMeta("str", "l3CtxEncap", "l3CtxEncap", 1815, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("l3CtxEncap", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 4715, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "not-visible"
    prop._addConstant("not-visible", "not-visible", 1)
    prop._addConstant("visible", "visible", 0)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14642, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "mtu", "mtu", 4713, PropCategory.REGULAR)
    prop.label = "MTU"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(64, 9216)]
    prop.defaultValue = 1518
    prop.defaultValueStr = "1518"
    meta.props.add("mtu", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15230, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15231, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "pcTag", "pcTag", 1808, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("any", "any", 0)
    meta.props.add("pcTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "routeIp", "routeIp", 4717, PropCategory.REGULAR)
    prop.label = "Dest IP for Routing Table"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("routeIp", prop)

    prop = PropMeta("str", "scope", "scope", 30058, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "private"
    prop._addConstant("private", "private-to-vrf", 2)
    prop._addConstant("public", "advertised-externally", 1)
    prop._addConstant("shared", "shared-between-vrfs", 4)
    meta.props.add("scope", prop)

    prop = PropMeta("str", "scopeId", "scopeId", 1810, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 16777215)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("scopeId", prop)

    prop = PropMeta("str", "srcIpPrefix", "srcIpPrefix", 4708, PropCategory.REGULAR)
    prop.label = "Source IP of ERSPAN Packet"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("srcIpPrefix", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "ttl", "ttl", 4711, PropCategory.REGULAR)
    prop.label = "Time-To-Live"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 255)]
    prop.defaultValue = 64
    prop.defaultValueStr = "64"
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("ttl", prop)

    prop = PropMeta("str", "ver", "ver", 4709, PropCategory.REGULAR)
    prop.label = "ERSPAN Version"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "ver2"
    prop._addConstant("ver1", "version-1", 1)
    prop._addConstant("ver2", "version-2", 2)
    meta.props.add("ver", prop)

    prop = PropMeta("str", "verEnforced", "verEnforced", 24092, PropCategory.REGULAR)
    prop.label = "Version Enforced"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("verEnforced", prop)

    prop = PropMeta("str", "vrfName", "vrfName", 4712, PropCategory.REGULAR)
    prop.label = "VRF"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("vrfName", prop)

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("SpanDestGrpToEthIf", "Fabric Nodes or Interfaces", "cobra.model.l1.EthIf"))

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Peer(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.hcbgp.Peer")

    meta.moClassName = "hcbgpPeer"
    meta.rnFormat = "peer-[%(addr)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Cloud BGP Peer"
    meta.writeAccessMask = 0x8008021042001
    meta.readAccessMask = 0x8008021042001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.hcbgp.PeerAf")
    meta.childClasses.add("cobra.model.hcbgp.RsBgpPeerTohcl3RoutedIf")
    meta.childClasses.add("cobra.model.hcbgp.RsBgpPeerTolbRoutedIf")
    meta.childClasses.add("cobra.model.hcbgp.PeerIntervals")
    meta.childClasses.add("cobra.model.hcbgp.LocalAsn")
    meta.childClasses.add("cobra.model.hcbgp.PeerOper")
    meta.childClasses.add("cobra.model.hcbgp.RsBgpPeerTohctunnIf")

    meta.childNamesAndRnPrefix.append(("cobra.model.hcbgp.RsBgpPeerTohcl3RoutedIf", "rsbgpPeerTohcl3RoutedIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcbgp.RsBgpPeerTolbRoutedIf", "rsbgpPeerTolbRoutedIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcbgp.RsBgpPeerTohctunnIf", "rsbgpPeerTohctunnIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcbgp.PeerIntervals", "peerintervals"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcbgp.LocalAsn", "localasn"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcbgp.PeerOper", "oper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcbgp.PeerAf", "af-"))

    meta.parentClasses.add("cobra.model.hcbgp.Dom")

    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.nw.AdjEp")
    meta.superClasses.add("cobra.model.l3.ProtAdjEp")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.ProtAdjEp")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.hcbgp.APeer")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.rnPrefixes = [
        ('peer-', True),
    ]

    prop = PropMeta("str", "addr", "addr", 50219, PropCategory.REGULAR)
    prop.label = "Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("addr", prop)

    prop = PropMeta("str", "adminSt", "adminSt", 50220, PropCategory.REGULAR)
    prop.label = "Administrative State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "asn", "asn", 55273, PropCategory.REGULAR)
    prop.label = "Autonomous System Number"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 4294967295)]
    meta.props.add("asn", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 50225, PropCategory.REGULAR)
    prop.label = "Peer AF Controls"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop._addConstant("allow-self-as", "allow-self-as", 32)
    prop._addConstant("as-override", "as-override", 4)
    prop._addConstant("dis-peer-as-check", "disable-peer-as-check", 16)
    prop._addConstant("nh-self", "next-hop-self", 8)
    prop._addConstant("send-com", "send-community", 1)
    prop._addConstant("send-ext-com", "send-extended-community", 2)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "password", "password", 55274, PropCategory.REGULAR)
    prop.label = "Password"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isPassword = True
    meta.props.add("password", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "srcIf", "srcIf", 50222, PropCategory.REGULAR)
    prop.label = "Source Interface"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("srcIf", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "ttl", "ttl", 50224, PropCategory.REGULAR)
    prop.label = "eBGP Multihop"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 255)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("ttl", prop)

    prop = PropMeta("str", "type", "type", 56780, PropCategory.REGULAR)
    prop.label = "Type of Peer - Intra-site/Inter-site"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 4
    prop.defaultValueStr = "local"
    prop._addConstant("inter-site", "peer-for-inter-site-connectivity", 32)
    prop._addConstant("intra-pod", "peer-for-intra-pod-connectivity-in-case-of-multi-site", 64)
    prop._addConstant("intra-site", "peer-for-intra-site-connectivity", 1)
    prop._addConstant("local", "peer-for-local-pod-connectivity", 4)
    prop._addConstant("manual", "peer-configured-manually", 8)
    prop._addConstant("trusted-cloud", "peer-for-trusted-cloud-avs-connectivity", 16)
    prop._addConstant("wan", "peer-for-wan-connectivity", 2)
    meta.props.add("type", prop)

    meta.namingProps.append(getattr(meta.props, "addr"))
    getattr(meta.props, "addr").needDelimiter = True

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcbgpPeer", "From hcloudCsr to hcbgpPeer", "cobra.model.hcbgp.Peer"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcl3LoopbackRoutedIf", "From hcloudCsr to hcl3LoopbackRoutedIf", "cobra.model.hcl3.LoopbackRoutedIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcospfRsTunnIf", "From hcloudCsr to hcospfRsTunnIf", "cobra.model.hcospf.RsTunnIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHctunnIf", "From hcloudCsr to hctunnIf", "cobra.model.hctunn.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcloudNetworkInterface", "From hcloudCsr to hcloudNetworkInterface", "cobra.model.hcloud.NetworkInterface"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcloudEndPointOper", "From hcloudCsr to hcloudEndPointOper", "cobra.model.hcloud.EndPointOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcl1PhysicalIf", "From hcloudCsr to hcl1PhysicalIf", "cobra.model.hcl1.PhysicalIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToCloudCtxProfile", "From hcloudCsr to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcl3Vrf", "From hcloudCsr to hcl3Vrf", "cobra.model.hcl3.Vrf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcloudInstanceOper", "From hcloudCsr to hcloudInstanceOper", "cobra.model.hcloud.InstanceOper"))

    def __init__(self, parentMoOrDn, addr, markDirty=True, **creationProps):
        namingVals = [addr]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class PermitL2Record(Mo):
    meta = ClassMeta("cobra.model.acllog.PermitL2Record")

    meta.isAbstract = True
    meta.moClassName = "acllogPermitL2Record"


    meta.moClassName = "acllogPermitL2Record"
    meta.rnFormat = ""
    meta.category = MoCategory.REGULAR
    meta.label = "Flow L2 Permit Record"
    meta.writeAccessMask = 0x0
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.acllog.FlowCounterHist1year")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.acllog.FlowCounterAgHist1year")
    meta.childClasses.add("cobra.model.acllog.FlowCounterAg1qtr")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.acllog.FlowCounter1w")
    meta.childClasses.add("cobra.model.acllog.FlowCounter1h")
    meta.childClasses.add("cobra.model.acllog.FlowCounter1year")
    meta.childClasses.add("cobra.model.acllog.FlowCounter1d")
    meta.childClasses.add("cobra.model.acllog.FlowCounterAgHist1mo")
    meta.childClasses.add("cobra.model.acllog.FlowCounterAg1year")
    meta.childClasses.add("cobra.model.acllog.FlowCounterHist1w")
    meta.childClasses.add("cobra.model.acllog.FlowCounterAg1mo")
    meta.childClasses.add("cobra.model.acllog.FlowCounterHist15min")
    meta.childClasses.add("cobra.model.acllog.FlowCounterHist1d")
    meta.childClasses.add("cobra.model.acllog.FlowCounterHist1h")
    meta.childClasses.add("cobra.model.acllog.FlowCounterAgHist15min")
    meta.childClasses.add("cobra.model.acllog.FlowCounterHist5min")
    meta.childClasses.add("cobra.model.acllog.FlowCounterAg1w")
    meta.childClasses.add("cobra.model.acllog.FlowCounterAg15min")
    meta.childClasses.add("cobra.model.acllog.FlowCounterAgHist1qtr")
    meta.childClasses.add("cobra.model.acllog.FlowCounterAg1h")
    meta.childClasses.add("cobra.model.acllog.FlowCounterAg1d")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.acllog.FlowCounterAgHist1d")
    meta.childClasses.add("cobra.model.acllog.FlowCounterHist1qtr")
    meta.childClasses.add("cobra.model.acllog.FlowCounterHist1mo")
    meta.childClasses.add("cobra.model.acllog.FlowCounterAgHist1h")
    meta.childClasses.add("cobra.model.acllog.FlowCounter1qtr")
    meta.childClasses.add("cobra.model.acllog.FlowCounter5min")
    meta.childClasses.add("cobra.model.acllog.FlowCounterAgHist1w")
    meta.childClasses.add("cobra.model.acllog.FlowCounter15min")
    meta.childClasses.add("cobra.model.acllog.FlowCounter1mo")

    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterAgHist1year", "HDacllogFlowCounterAg1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterAgHist15min", "HDacllogFlowCounterAg15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterAg1year", "CDacllogFlowCounterAg1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterAg15min", "CDacllogFlowCounterAg15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterAgHist1qtr", "HDacllogFlowCounterAg1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterHist1year", "HDacllogFlowCounter1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterAg1qtr", "CDacllogFlowCounterAg1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterAgHist1mo", "HDacllogFlowCounterAg1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterHist15min", "HDacllogFlowCounter15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounter1year", "CDacllogFlowCounter1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterAg1mo", "CDacllogFlowCounterAg1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterHist5min", "HDacllogFlowCounter5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterAgHist1d", "HDacllogFlowCounterAg1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterHist1qtr", "HDacllogFlowCounter1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterAgHist1h", "HDacllogFlowCounterAg1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterAgHist1w", "HDacllogFlowCounterAg1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounter15min", "CDacllogFlowCounter15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterAg1w", "CDacllogFlowCounterAg1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterAg1h", "CDacllogFlowCounterAg1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterAg1d", "CDacllogFlowCounterAg1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterHist1mo", "HDacllogFlowCounter1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounter1qtr", "CDacllogFlowCounter1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounter5min", "CDacllogFlowCounter5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterHist1w", "HDacllogFlowCounter1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterHist1d", "HDacllogFlowCounter1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounterHist1h", "HDacllogFlowCounter1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounter1mo", "CDacllogFlowCounter1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounter1w", "CDacllogFlowCounter1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounter1h", "CDacllogFlowCounter1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.acllog.FlowCounter1d", "CDacllogFlowCounter1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.superClasses.add("cobra.model.acllog.Record")
    meta.superClasses.add("cobra.model.acllog.PermitRecord")

    meta.concreteSubClasses.add("cobra.model.acllog.PermitL2Pkt")
    meta.concreteSubClasses.add("cobra.model.acllog.PermitL2Flow")

    meta.rnPrefixes = [
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dstEpgName", "dstEpgName", 37082, PropCategory.REGULAR)
    prop.label = "Destination EPG>"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.regex = ['[a-zA-Z0-9:|._-]+']
    meta.props.add("dstEpgName", prop)

    prop = PropMeta("str", "dstMacAddr", "dstMacAddr", 25025, PropCategory.REGULAR)
    prop.label = "Destination MAC address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dstMacAddr", prop)

    prop = PropMeta("str", "dstPcTag", "dstPcTag", 37080, PropCategory.REGULAR)
    prop.label = "Destination PcTag"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop._addConstant("any", "any", 0)
    meta.props.add("dstPcTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "srcEpgName", "srcEpgName", 37081, PropCategory.REGULAR)
    prop.label = "Srouce EPG"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.regex = ['[a-zA-Z0-9:|._-]+']
    meta.props.add("srcEpgName", prop)

    prop = PropMeta("str", "srcIntf", "srcIntf", 25023, PropCategory.REGULAR)
    prop.label = "Source interface"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.range = [(0, 256)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("srcIntf", prop)

    prop = PropMeta("str", "srcMacAddr", "srcMacAddr", 25024, PropCategory.REGULAR)
    prop.label = "Source MAC address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("srcMacAddr", prop)

    prop = PropMeta("str", "srcPcTag", "srcPcTag", 37079, PropCategory.REGULAR)
    prop.label = "Source PC Tag"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop._addConstant("any", "any", 0)
    meta.props.add("srcPcTag", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "vlan", "vlan", 25033, PropCategory.REGULAR)
    prop.label = "VLAN Id"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.range = [(0, 4095)]
    prop.defaultValue = 0
    prop.defaultValueStr = "invalid"
    prop._addConstant("invalid", "invalid", 0)
    meta.props.add("vlan", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Addr(Mo):
    """
     Class for HSRP secondary vips 

    """

    meta = ClassMeta("cobra.model.hsrp.Addr")

    meta.moClassName = "hsrpAddr"
    meta.rnFormat = "addr-[%(ip)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "HSRP Secondary VIP"
    meta.writeAccessMask = 0x20000001
    meta.readAccessMask = 0x20000001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.hsrp.GroupV1")
    meta.parentClasses.add("cobra.model.hsrp.GroupV2")

    meta.rnPrefixes = [
        ('addr-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "hsrpCfgFailedBmp", "hsrpCfgFailedBmp", 28471, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("hsrp:Addrip_failed_flag", None, 8)
    prop._addConstant("hsrp:AddrlcOwn_failed_flag", None, -9223372036854775808)
    prop._addConstant("hsrp:AddrmodTs_failed_flag", None, 2305843009213693952)
    prop._addConstant("hsrp:AddrmonPolDn_failed_flag", None, 16)
    meta.props.add("hsrpCfgFailedBmp", prop)

    prop = PropMeta("str", "hsrpCfgFailedTs", "hsrpCfgFailedTs", 28473, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("hsrpCfgFailedTs", prop)

    prop = PropMeta("str", "hsrpCfgState", "hsrpCfgState", 28472, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("hsrpCfgState", prop)

    prop = PropMeta("str", "ip", "ip", 24613, PropCategory.REGULAR)
    prop.label = "Secondary IP Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("ip", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 28596, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "operSt", "operSt", 24614, PropCategory.REGULAR)
    prop.label = "Operational State of the ip"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "down"
    prop._addConstant("down", "down", 0)
    prop._addConstant("up", "up", 1)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "operStQual", "operStQual", 24615, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "down"
    prop._addConstant("addr-type-mismatch", "master-slave-addr-type-mismatch", 2)
    prop._addConstant("bcast-vip", "broadcast-address-not-allowed", 4)
    prop._addConstant("down", "mismatch-with-interface-subnet", 0)
    prop._addConstant("dup-vip", "duplicate-virtual-ip", 8)
    prop._addConstant("internal-err", "internal-error", 11)
    prop._addConstant("invalid-site-local-ip", "site-local-ip-not-allowed", 9)
    prop._addConstant("lb-vip", "loopback-address-not-allowed", 7)
    prop._addConstant("mcast-vip", "multicast-address-not-allowed", 6)
    prop._addConstant("net-directed-bcast", "net-directed-broadcast-address-not-allowed", 5)
    prop._addConstant("subnet-mismatch", "mismatch-with-interface-subnet", 1)
    prop._addConstant("unsupported-ip", "unsupported-ip-address", 10)
    prop._addConstant("up", "up", 12)
    prop._addConstant("vip-mismatch", "vip-and-interface-ip-clash", 3)
    meta.props.add("operStQual", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "ip"))
    getattr(meta.props, "ip").needDelimiter = True

    def __init__(self, parentMoOrDn, ip, markDirty=True, **creationProps):
        namingVals = [ip]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

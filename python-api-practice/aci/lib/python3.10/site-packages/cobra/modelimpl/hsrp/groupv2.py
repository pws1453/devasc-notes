# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class GroupV2(Mo):
    """
    

    """

    meta = ClassMeta("cobra.model.hsrp.GroupV2")

    meta.moClassName = "hsrpGroupV2"
    meta.rnFormat = "grpv2-%(id)s-%(af)s"
    meta.category = MoCategory.REGULAR
    meta.label = "HSRP Group"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.hsrp.Addr")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.hsrp.Peer")
    meta.childClasses.add("cobra.model.hsrp.GroupStats")
    meta.childClasses.add("cobra.model.hsrp.AuthP")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hsrp.Addr", "addr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hsrp.Peer", "peer-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hsrp.GroupStats", "stats"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hsrp.AuthP", "auth"))

    meta.parentClasses.add("cobra.model.hsrp.If")

    meta.superClasses.add("cobra.model.hsrp.Group")

    meta.rnPrefixes = [
        ('grpv2-', True),
        ('-', True),
    ]

    prop = PropMeta("str", "af", "af", 24622, PropCategory.REGULAR)
    prop.label = "Group Address Family"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 1
    prop.defaultValueStr = "ipv4"
    prop._addConstant("ipv4", "ipv4-address-family", 1)
    prop._addConstant("ipv6", "ipv6-address-family", 2)
    meta.props.add("af", prop)

    prop = PropMeta("str", "bfdOperSt", "bfdOperSt", 24930, PropCategory.REGULAR)
    prop.label = "BFD Operational State of the group"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "disabled"
    prop._addConstant("active", "active", 3)
    prop._addConstant("deleted", "deleted", 2)
    prop._addConstant("disabled", "bfd-disabled", 0)
    prop._addConstant("inactive", "inactive", 1)
    meta.props.add("bfdOperSt", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 24592, PropCategory.REGULAR)
    prop.label = "Group control bits"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("preempt", "enable-preemption-for-the-group", 1)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "flags", "flags", 24599, PropCategory.REGULAR)
    prop.label = "Group oper flags"
    prop.isOper = True
    prop._addConstant("peer-link-redirect", "redirect-the-traffic-over-the-peer-link", 1)
    prop._addConstant("preempt-min-delay-active", "preempt-min-delay-active", 4)
    prop._addConstant("preempt-reload-delay-active", "preempt-reload-delay-active", 8)
    prop._addConstant("preempt-sync-delay-active", "preempt-sync-delay-active", 2)
    meta.props.add("flags", prop)

    prop = PropMeta("str", "helloIntvl", "helloIntvl", 24596, PropCategory.REGULAR)
    prop.label = "Hello Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(250, 254000)]
    prop.defaultValue = 3000
    prop.defaultValueStr = "3000"
    meta.props.add("helloIntvl", prop)

    prop = PropMeta("str", "holdIntvl", "holdIntvl", 24597, PropCategory.REGULAR)
    prop.label = "Hold Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(750, 255000)]
    prop.defaultValue = 10000
    prop.defaultValueStr = "10000"
    meta.props.add("holdIntvl", prop)

    prop = PropMeta("str", "hsrpCfgFailedBmp", "hsrpCfgFailedBmp", 28474, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("hsrp:GroupV2af_failed_flag", None, 8388608)
    prop._addConstant("hsrp:GroupV2ctrl_failed_flag", None, 2)
    prop._addConstant("hsrp:GroupV2helloIntvl_failed_flag", None, 8)
    prop._addConstant("hsrp:GroupV2holdIntvl_failed_flag", None, 16)
    prop._addConstant("hsrp:GroupV2id_failed_flag", None, 134217728)
    prop._addConstant("hsrp:GroupV2ipObtainMode_failed_flag", None, 64)
    prop._addConstant("hsrp:GroupV2ip_failed_flag", None, 32)
    prop._addConstant("hsrp:GroupV2lcOwn_failed_flag", None, -9223372036854775808)
    prop._addConstant("hsrp:GroupV2mac_failed_flag", None, 256)
    prop._addConstant("hsrp:GroupV2modTs_failed_flag", None, 2305843009213693952)
    prop._addConstant("hsrp:GroupV2monPolDn_failed_flag", None, 268435456)
    prop._addConstant("hsrp:GroupV2name_failed_flag", None, 512)
    prop._addConstant("hsrp:GroupV2preemptDelayMin_failed_flag", None, 262144)
    prop._addConstant("hsrp:GroupV2preemptDelayReload_failed_flag", None, 524288)
    prop._addConstant("hsrp:GroupV2preemptDelaySync_failed_flag", None, 1048576)
    prop._addConstant("hsrp:GroupV2prio_failed_flag", None, 2097152)
    meta.props.add("hsrpCfgFailedBmp", prop)

    prop = PropMeta("str", "hsrpCfgFailedTs", "hsrpCfgFailedTs", 28476, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("hsrpCfgFailedTs", prop)

    prop = PropMeta("str", "hsrpCfgState", "hsrpCfgState", 28475, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("hsrpCfgState", prop)

    prop = PropMeta("str", "id", "id", 24621, PropCategory.REGULAR)
    prop.label = "Group Id"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(0, 4095)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("id", prop)

    prop = PropMeta("str", "ip", "ip", 24588, PropCategory.REGULAR)
    prop.label = "Primary IP Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("ip", prop)

    prop = PropMeta("str", "ipObtainMode", "ipObtainMode", 24589, PropCategory.REGULAR)
    prop.label = "IP Obtain Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "admin"
    prop._addConstant("admin", "address-is-configured", 0)
    prop._addConstant("auto", "auto-configure-ipv6-address", 1)
    prop._addConstant("learn", "learn-ip-from-hsrp-peer", 2)
    meta.props.add("ipObtainMode", prop)

    prop = PropMeta("str", "lastStateChgTs", "lastStateChgTs", 24606, PropCategory.REGULAR)
    prop.label = "Last state transition time"
    prop.isOper = True
    meta.props.add("lastStateChgTs", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "mac", "mac", 24590, PropCategory.REGULAR)
    prop.label = "Configured MAC address for the group"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("mac", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 27661, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 24591, PropCategory.REGULAR)
    prop.label = "Group Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operHelloIntvl", "operHelloIntvl", 24601, PropCategory.REGULAR)
    prop.label = "Current hello interval"
    prop.isOper = True
    prop.range = [(250, 254000)]
    prop.defaultValue = 3000
    prop.defaultValueStr = "3000"
    meta.props.add("operHelloIntvl", prop)

    prop = PropMeta("str", "operHoldIntvl", "operHoldIntvl", 24602, PropCategory.REGULAR)
    prop.label = "Current Hold Interval"
    prop.isOper = True
    prop.range = [(750, 255000)]
    prop.defaultValue = 10000
    prop.defaultValueStr = "10000"
    meta.props.add("operHoldIntvl", prop)

    prop = PropMeta("str", "operIp", "operIp", 24604, PropCategory.REGULAR)
    prop.label = "Group ip address"
    prop.isOper = True
    meta.props.add("operIp", prop)

    prop = PropMeta("str", "operMac", "operMac", 24603, PropCategory.REGULAR)
    prop.label = "Group MAC address"
    prop.isOper = True
    meta.props.add("operMac", prop)

    prop = PropMeta("str", "operName", "operName", 24607, PropCategory.REGULAR)
    prop.label = "Group name"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("operName", prop)

    prop = PropMeta("str", "operPrio", "operPrio", 24600, PropCategory.REGULAR)
    prop.label = "Current priority"
    prop.isOper = True
    prop.range = [(0, 255)]
    prop.defaultValue = 100
    prop.defaultValueStr = "100"
    meta.props.add("operPrio", prop)

    prop = PropMeta("str", "operSt", "operSt", 24608, PropCategory.REGULAR)
    prop.label = "Operational State of the group"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "init"
    prop._addConstant("active", "active", 5)
    prop._addConstant("init", "initializing", 0)
    prop._addConstant("learn", "learn", 1)
    prop._addConstant("listen", "listen", 2)
    prop._addConstant("speak", "speak", 3)
    prop._addConstant("standby", "standby", 4)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "operStQual", "operStQual", 24609, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "down"
    prop._addConstant("addr-type-mismatch", "master-slave-addr-type-mismatch", 11)
    prop._addConstant("bcast-vip", "broadcast-address-not-allowed", 13)
    prop._addConstant("down", "down", 0)
    prop._addConstant("dup-mac-addr", "duplicate-mac-address", 28)
    prop._addConstant("dup-name", "duplicate-name", 21)
    prop._addConstant("dup-vip", "duplicate-virtual-ip", 17)
    prop._addConstant("if-down", "interface-down", 2)
    prop._addConstant("internal-err", "internal-error", 4)
    prop._addConstant("invalid-autocfg", "autoconfig-on-ipv4-address-not-allowed", 20)
    prop._addConstant("invalid-bcast-mac-addr", "broadcast-mac-address-not-allowed", 25)
    prop._addConstant("invalid-hold-intvl", "invalid-hold-interval", 22)
    prop._addConstant("invalid-mac-addr", "invalid-mac-address", 24)
    prop._addConstant("invalid-mac-cfg", "mac-configuration-not-allowed-when-bia-flag-is-enabled-on-interface", 23)
    prop._addConstant("invalid-mcast-mac-addr", "multicast-mac-address-not-allowed", 26)
    prop._addConstant("invalid-rsvd-mac-addr", "reserved-mac-address-for-protocols", 27)
    prop._addConstant("invalid-sec-ip", "sec-ip-subnet-mismatch", 1)
    prop._addConstant("invalid-site-local-ip", "site-local-ip-not-allowed", 29)
    prop._addConstant("invalid-vip", "invalid-virtual-ip", 18)
    prop._addConstant("lb-vip", "loopback-address-not-allowed", 16)
    prop._addConstant("master-down", "master-group-down", 9)
    prop._addConstant("mcast-vip", "multicast-address-not-allowed", 15)
    prop._addConstant("net-directed-bcast", "net-directed-broadcast-address-not-allowed", 14)
    prop._addConstant("no-ip", "if-ip-not-cfged", 3)
    prop._addConstant("no-master", "no-master-for-slave", 8)
    prop._addConstant("no-vip", "group-vip-not-configured", 5)
    prop._addConstant("subnet-mismatch", "mismatch-with-interface-subnet", 6)
    prop._addConstant("unsupported-ip", "unsupported-ip-address", 30)
    prop._addConstant("up", "up", 31)
    prop._addConstant("ver-mismatch", "master-slave-ver-mismatch", 10)
    prop._addConstant("vip-mismatch", "vip-and-interface-ip-clash", 12)
    prop._addConstant("vip-type-mismatch", "af-and-virtual-ip-type-mismatch", 19)
    prop._addConstant("vmac-add-failed", "vmac-add-to-hardware-failed", 32)
    prop._addConstant("vmac-not-ready", "vmac-not-ready", 7)
    meta.props.add("operStQual", prop)

    prop = PropMeta("str", "preemptDelayMin", "preemptDelayMin", 24593, PropCategory.REGULAR)
    prop.label = "Miminum delay before preempt"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 3600)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("preemptDelayMin", prop)

    prop = PropMeta("str", "preemptDelayReload", "preemptDelayReload", 24594, PropCategory.REGULAR)
    prop.label = "Preempt delay after a switch reload"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 3600)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("preemptDelayReload", prop)

    prop = PropMeta("str", "preemptDelaySync", "preemptDelaySync", 24595, PropCategory.REGULAR)
    prop.label = "Wait for IP redundancy clients"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 3600)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("preemptDelaySync", prop)

    prop = PropMeta("str", "prio", "prio", 24598, PropCategory.REGULAR)
    prop.label = "Group Priority"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 255)]
    prop.defaultValue = 100
    prop.defaultValueStr = "100"
    meta.props.add("prio", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "stateChgs", "stateChgs", 24605, PropCategory.REGULAR)
    prop.label = "No of state transitions"
    prop.isOper = True
    meta.props.add("stateChgs", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "id"))
    meta.namingProps.append(getattr(meta.props, "af"))

    def __init__(self, parentMoOrDn, id, af, markDirty=True, **creationProps):
        namingVals = [id, af]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class TreeCalcStatsHist15min(Mo):
    """
    A class that represents historical statistics for FTAG global in a 15 minute sampling interval.  This class updates every 5 minutes.

    """

    meta = StatsClassMeta("cobra.model.isis.TreeCalcStatsHist15min", "FTAG global")

    counter = CounterMeta("avgCalcEff", CounterCategory.COUNTER, "transactions", "average effective calculations")
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "avgCalcEffCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "avgCalcEffPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "avgCalcEffMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "avgCalcEffMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "avgCalcEffAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "avgCalcEffSpct"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "avgCalcEffThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "avgCalcEffTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "avgCalcEffRate"
    meta._counters.append(counter)

    counter = CounterMeta("calcEff", CounterCategory.COUNTER, "transactions", "effective calculations")
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "calcEffCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "calcEffPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "calcEffMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "calcEffMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "calcEffAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "calcEffSpct"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "calcEffThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "calcEffTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "calcEffRate"
    meta._counters.append(counter)

    counter = CounterMeta("runs", CounterCategory.COUNTER, "transactions", "runs")
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "runsCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "runsPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "runsMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "runsMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "runsAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "runsSpct"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "runsThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "runsTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "runsRate"
    meta._counters.append(counter)

    meta.moClassName = "isisTreeCalcStatsHist15min"
    meta.rnFormat = "HDisisTreeCalcStats15min-%(index)s"
    meta.category = MoCategory.STATS_HISTORY
    meta.label = "historical FTAG global stats in 15 minute"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.parentClasses.add("cobra.model.isis.Dom")

    meta.superClasses.add("cobra.model.stats.Item")
    meta.superClasses.add("cobra.model.stats.Hist")
    meta.superClasses.add("cobra.model.isis.TreeCalcStatsHist")

    meta.rnPrefixes = [
        ('HDisisTreeCalcStats15min-', True),
    ]

    prop = PropMeta("str", "avgCalcEffAvg", "avgCalcEffAvg", 9600, PropCategory.IMPLICIT_AVG)
    prop.label = "average effective calculations average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("avgCalcEffAvg", prop)

    prop = PropMeta("str", "avgCalcEffCum", "avgCalcEffCum", 9596, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "average effective calculations cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("avgCalcEffCum", prop)

    prop = PropMeta("str", "avgCalcEffMax", "avgCalcEffMax", 9599, PropCategory.IMPLICIT_MAX)
    prop.label = "average effective calculations maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("avgCalcEffMax", prop)

    prop = PropMeta("str", "avgCalcEffMin", "avgCalcEffMin", 9598, PropCategory.IMPLICIT_MIN)
    prop.label = "average effective calculations minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("avgCalcEffMin", prop)

    prop = PropMeta("str", "avgCalcEffPer", "avgCalcEffPer", 9597, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "average effective calculations periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("avgCalcEffPer", prop)

    prop = PropMeta("str", "avgCalcEffRate", "avgCalcEffRate", 9604, PropCategory.IMPLICIT_RATE)
    prop.label = "average effective calculations rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("avgCalcEffRate", prop)

    prop = PropMeta("str", "avgCalcEffSpct", "avgCalcEffSpct", 9601, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "average effective calculations suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("avgCalcEffSpct", prop)

    prop = PropMeta("str", "avgCalcEffThr", "avgCalcEffThr", 9602, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "average effective calculations thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("avgCalcEffThr", prop)

    prop = PropMeta("str", "avgCalcEffTr", "avgCalcEffTr", 9603, PropCategory.IMPLICIT_TREND)
    prop.label = "average effective calculations trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("avgCalcEffTr", prop)

    prop = PropMeta("str", "calcEffAvg", "calcEffAvg", 9627, PropCategory.IMPLICIT_AVG)
    prop.label = "effective calculations average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("calcEffAvg", prop)

    prop = PropMeta("str", "calcEffCum", "calcEffCum", 9623, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "effective calculations cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("calcEffCum", prop)

    prop = PropMeta("str", "calcEffMax", "calcEffMax", 9626, PropCategory.IMPLICIT_MAX)
    prop.label = "effective calculations maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("calcEffMax", prop)

    prop = PropMeta("str", "calcEffMin", "calcEffMin", 9625, PropCategory.IMPLICIT_MIN)
    prop.label = "effective calculations minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("calcEffMin", prop)

    prop = PropMeta("str", "calcEffPer", "calcEffPer", 9624, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "effective calculations periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("calcEffPer", prop)

    prop = PropMeta("str", "calcEffRate", "calcEffRate", 9631, PropCategory.IMPLICIT_RATE)
    prop.label = "effective calculations rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("calcEffRate", prop)

    prop = PropMeta("str", "calcEffSpct", "calcEffSpct", 9628, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "effective calculations suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("calcEffSpct", prop)

    prop = PropMeta("str", "calcEffThr", "calcEffThr", 9629, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "effective calculations thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("calcEffThr", prop)

    prop = PropMeta("str", "calcEffTr", "calcEffTr", 9630, PropCategory.IMPLICIT_TREND)
    prop.label = "effective calculations trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("calcEffTr", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cnt", "cnt", 16212, PropCategory.REGULAR)
    prop.label = "Number of Collections During this Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("cnt", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "index", "index", 6719, PropCategory.REGULAR)
    prop.label = "History Index"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("index", prop)

    prop = PropMeta("str", "lastCollOffset", "lastCollOffset", 111, PropCategory.REGULAR)
    prop.label = "Collection Length"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("lastCollOffset", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "repIntvEnd", "repIntvEnd", 110, PropCategory.REGULAR)
    prop.label = "Reporting End Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvEnd", prop)

    prop = PropMeta("str", "repIntvStart", "repIntvStart", 109, PropCategory.REGULAR)
    prop.label = "Reporting Start Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvStart", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "runsAvg", "runsAvg", 9654, PropCategory.IMPLICIT_AVG)
    prop.label = "runs average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("runsAvg", prop)

    prop = PropMeta("str", "runsCum", "runsCum", 9650, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "runs cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("runsCum", prop)

    prop = PropMeta("str", "runsMax", "runsMax", 9653, PropCategory.IMPLICIT_MAX)
    prop.label = "runs maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("runsMax", prop)

    prop = PropMeta("str", "runsMin", "runsMin", 9652, PropCategory.IMPLICIT_MIN)
    prop.label = "runs minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("runsMin", prop)

    prop = PropMeta("str", "runsPer", "runsPer", 9651, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "runs periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("runsPer", prop)

    prop = PropMeta("str", "runsRate", "runsRate", 9658, PropCategory.IMPLICIT_RATE)
    prop.label = "runs rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("runsRate", prop)

    prop = PropMeta("str", "runsSpct", "runsSpct", 9655, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "runs suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("runsSpct", prop)

    prop = PropMeta("str", "runsThr", "runsThr", 9656, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "runs thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("runsThr", prop)

    prop = PropMeta("str", "runsTr", "runsTr", 9657, PropCategory.IMPLICIT_TREND)
    prop.label = "runs trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("runsTr", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "index"))

    def __init__(self, parentMoOrDn, index, markDirty=True, **creationProps):
        namingVals = [index]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

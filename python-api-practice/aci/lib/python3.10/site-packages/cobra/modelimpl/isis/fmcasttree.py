# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class FmcastTree(Mo):
    """
    The ISIS Fabric Multicast(ftag) tree element is a manged object that captures ISIS fabric-wide multicast tree membership information.

    """

    meta = ClassMeta("cobra.model.isis.FmcastTree")

    meta.moClassName = "isisFmcastTree"
    meta.rnFormat = "fmtree-%(id)s"
    meta.category = MoCategory.REGULAR
    meta.label = "IS-IS Fabric Multicast Tree"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.isis.OifListSpine")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.isis.FtagTreeStats1qtr")
    meta.childClasses.add("cobra.model.isis.FtagTreeStatsHist1qtr")
    meta.childClasses.add("cobra.model.isis.FtagTreeStats1d")
    meta.childClasses.add("cobra.model.isis.FtagTreeStatsHist1year")
    meta.childClasses.add("cobra.model.isis.FtagTreeStats1w")
    meta.childClasses.add("cobra.model.isis.FtagTreeStatsHist1d")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.isis.OifListLeaf")
    meta.childClasses.add("cobra.model.isis.FtagTreeStats15min")
    meta.childClasses.add("cobra.model.isis.FtagTreeStatsHist1h")
    meta.childClasses.add("cobra.model.isis.FtagTreeStatsHist1mo")
    meta.childClasses.add("cobra.model.isis.FtagTreeStatsHist1w")
    meta.childClasses.add("cobra.model.isis.FtagTreeStatsHist15min")
    meta.childClasses.add("cobra.model.isis.FtagTreeStats1mo")
    meta.childClasses.add("cobra.model.isis.FtagTreeStats1h")
    meta.childClasses.add("cobra.model.isis.FtagTreeStatsHist5min")
    meta.childClasses.add("cobra.model.isis.FtagTreeStats1year")
    meta.childClasses.add("cobra.model.isis.FtagTreeStats5min")
    meta.childClasses.add("cobra.model.isis.NodeIdRec")

    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FtagTreeStatsHist1year", "HDisisFtagTreeStats1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FtagTreeStatsHist15min", "HDisisFtagTreeStats15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FtagTreeStatsHist1qtr", "HDisisFtagTreeStats1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FtagTreeStats15min", "CDisisFtagTreeStats15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FtagTreeStatsHist5min", "HDisisFtagTreeStats5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FtagTreeStats1year", "CDisisFtagTreeStats1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FtagTreeStats1qtr", "CDisisFtagTreeStats1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FtagTreeStatsHist1mo", "HDisisFtagTreeStats1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FtagTreeStats5min", "CDisisFtagTreeStats5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FtagTreeStatsHist1d", "HDisisFtagTreeStats1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FtagTreeStatsHist1h", "HDisisFtagTreeStats1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FtagTreeStatsHist1w", "HDisisFtagTreeStats1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FtagTreeStats1mo", "CDisisFtagTreeStats1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FtagTreeStats1d", "CDisisFtagTreeStats1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FtagTreeStats1w", "CDisisFtagTreeStats1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FtagTreeStats1h", "CDisisFtagTreeStats1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.OifListSpine", "oifspine-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.OifListLeaf", "oifleaf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.NodeIdRec", "node-"))

    meta.parentClasses.add("cobra.model.isis.Dom")

    meta.superClasses.add("cobra.model.mcast.Tree")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.Tree")
    meta.superClasses.add("cobra.model.nw.Item")

    meta.rnPrefixes = [
        ('fmtree-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "diaAlert", "diaAlert", 3122, PropCategory.REGULAR)
    prop.label = "Diameter Alert"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "inactive"
    prop._addConstant("active", "excessive-diameter-alert", 2)
    prop._addConstant("inactive", "normal", 1)
    meta.props.add("diaAlert", prop)

    prop = PropMeta("str", "diameter", "diameter", 3121, PropCategory.REGULAR)
    prop.label = "Diameter"
    prop.isOper = True
    meta.props.add("diameter", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "id", "id", 3117, PropCategory.REGULAR)
    prop.label = "Tree ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 12)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("id", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14486, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 16438, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operSt", "operSt", 3120, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "inactive"
    prop._addConstant("active", "active", 1)
    prop._addConstant("inactive", "inactive", 2)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "origin", "origin", 3118, PropCategory.REGULAR)
    prop.label = "Origin"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "static"
    prop._addConstant("isis", "learned-through-isis", 2)
    prop._addConstant("static", "static", 1)
    meta.props.add("origin", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "root", "root", 3119, PropCategory.REGULAR)
    prop.label = "Root"
    prop.isOper = True
    meta.props.add("root", prop)

    prop = PropMeta("str", "rootPort", "rootPort", 3123, PropCategory.REGULAR)
    prop.label = "Root Port"
    prop.isOper = True
    meta.props.add("rootPort", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "usage", "usage", 20613, PropCategory.REGULAR)
    prop.label = "Ftag Usage type"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "user"
    prop._addConstant("internal", "fabric-internal-usage", 1)
    prop._addConstant("user", "user", 0)
    meta.props.add("usage", prop)

    meta.namingProps.append(getattr(meta.props, "id"))

    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

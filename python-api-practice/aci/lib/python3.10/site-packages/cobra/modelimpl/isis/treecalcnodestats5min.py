# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class TreeCalcNodeStats5min(Mo):
    """
    A class that represents the most current statistics for FTAG global node in a 5 minute sampling interval.  This class updates every 10 seconds.

    """

    meta = StatsClassMeta("cobra.model.isis.TreeCalcNodeStats5min", "FTAG global node")

    counter = CounterMeta("spineCount", CounterCategory.COUNTER, "count", "spine count")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "spineCountLast"
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "spineCountCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "spineCountPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "spineCountMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "spineCountMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "spineCountAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "spineCountSpct"
    counter._propRefs[PropCategory.IMPLICIT_BASELINE] = "spineCountBase"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "spineCountThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "spineCountTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "spineCountTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "spineCountRate"
    meta._counters.append(counter)

    counter = CounterMeta("leafCount", CounterCategory.COUNTER, "count", "leaf count")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "leafCountLast"
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "leafCountCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "leafCountPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "leafCountMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "leafCountMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "leafCountAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "leafCountSpct"
    counter._propRefs[PropCategory.IMPLICIT_BASELINE] = "leafCountBase"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "leafCountThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "leafCountTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "leafCountTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "leafCountRate"
    meta._counters.append(counter)

    meta.moClassName = "isisTreeCalcNodeStats5min"
    meta.rnFormat = "CDisisTreeCalcNodeStats5min"
    meta.category = MoCategory.STATS_CURRENT
    meta.label = "current FTAG global node stats in 5 minute"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.parentClasses.add("cobra.model.isis.Dom")

    meta.superClasses.add("cobra.model.stats.Item")
    meta.superClasses.add("cobra.model.stats.Curr")
    meta.superClasses.add("cobra.model.isis.TreeCalcNodeStats")

    meta.rnPrefixes = [
        ('CDisisTreeCalcNodeStats5min', False),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cnt", "cnt", 16212, PropCategory.REGULAR)
    prop.label = "Number of Collections During this Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("cnt", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lastCollOffset", "lastCollOffset", 111, PropCategory.REGULAR)
    prop.label = "Collection Length"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("lastCollOffset", prop)

    prop = PropMeta("str", "leafCountAvg", "leafCountAvg", 9536, PropCategory.IMPLICIT_AVG)
    prop.label = "leaf count average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("leafCountAvg", prop)

    prop = PropMeta("str", "leafCountBase", "leafCountBase", 9531, PropCategory.IMPLICIT_BASELINE)
    prop.label = "leaf count baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("leafCountBase", prop)

    prop = PropMeta("str", "leafCountCum", "leafCountCum", 9532, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "leaf count cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("leafCountCum", prop)

    prop = PropMeta("str", "leafCountLast", "leafCountLast", 9530, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "leaf count current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("leafCountLast", prop)

    prop = PropMeta("str", "leafCountMax", "leafCountMax", 9535, PropCategory.IMPLICIT_MAX)
    prop.label = "leaf count maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("leafCountMax", prop)

    prop = PropMeta("str", "leafCountMin", "leafCountMin", 9534, PropCategory.IMPLICIT_MIN)
    prop.label = "leaf count minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("leafCountMin", prop)

    prop = PropMeta("str", "leafCountPer", "leafCountPer", 9533, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "leaf count periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("leafCountPer", prop)

    prop = PropMeta("str", "leafCountRate", "leafCountRate", 9541, PropCategory.IMPLICIT_RATE)
    prop.label = "leaf count rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("leafCountRate", prop)

    prop = PropMeta("str", "leafCountSpct", "leafCountSpct", 9537, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "leaf count suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("leafCountSpct", prop)

    prop = PropMeta("str", "leafCountThr", "leafCountThr", 9538, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "leaf count thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("leafCountThr", prop)

    prop = PropMeta("str", "leafCountTr", "leafCountTr", 9540, PropCategory.IMPLICIT_TREND)
    prop.label = "leaf count trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("leafCountTr", prop)

    prop = PropMeta("str", "leafCountTrBase", "leafCountTrBase", 9539, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "leaf count trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("leafCountTrBase", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "repIntvEnd", "repIntvEnd", 110, PropCategory.REGULAR)
    prop.label = "Reporting End Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvEnd", prop)

    prop = PropMeta("str", "repIntvStart", "repIntvStart", 109, PropCategory.REGULAR)
    prop.label = "Reporting Start Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvStart", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "spineCountAvg", "spineCountAvg", 9563, PropCategory.IMPLICIT_AVG)
    prop.label = "spine count average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("spineCountAvg", prop)

    prop = PropMeta("str", "spineCountBase", "spineCountBase", 9558, PropCategory.IMPLICIT_BASELINE)
    prop.label = "spine count baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("spineCountBase", prop)

    prop = PropMeta("str", "spineCountCum", "spineCountCum", 9559, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "spine count cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("spineCountCum", prop)

    prop = PropMeta("str", "spineCountLast", "spineCountLast", 9557, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "spine count current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("spineCountLast", prop)

    prop = PropMeta("str", "spineCountMax", "spineCountMax", 9562, PropCategory.IMPLICIT_MAX)
    prop.label = "spine count maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("spineCountMax", prop)

    prop = PropMeta("str", "spineCountMin", "spineCountMin", 9561, PropCategory.IMPLICIT_MIN)
    prop.label = "spine count minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("spineCountMin", prop)

    prop = PropMeta("str", "spineCountPer", "spineCountPer", 9560, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "spine count periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("spineCountPer", prop)

    prop = PropMeta("str", "spineCountRate", "spineCountRate", 9568, PropCategory.IMPLICIT_RATE)
    prop.label = "spine count rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("spineCountRate", prop)

    prop = PropMeta("str", "spineCountSpct", "spineCountSpct", 9564, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "spine count suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("spineCountSpct", prop)

    prop = PropMeta("str", "spineCountThr", "spineCountThr", 9565, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "spine count thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("spineCountThr", prop)

    prop = PropMeta("str", "spineCountTr", "spineCountTr", 9567, PropCategory.IMPLICIT_TREND)
    prop.label = "spine count trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("spineCountTr", prop)

    prop = PropMeta("str", "spineCountTrBase", "spineCountTrBase", 9566, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "spine count trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("spineCountTrBase", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Dom(Mo):
    """
    The IS-IS domain (vrf) information.

    """

    meta = ClassMeta("cobra.model.isis.Dom")

    meta.moClassName = "isisDom"
    meta.rnFormat = "dom-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "IS-IS Domain"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.isis.TreeCalcNodeStats1year")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.isis.LeakCtrlP")
    meta.childClasses.add("cobra.model.isis.TreeCalcNodeStatsHist1d")
    meta.childClasses.add("cobra.model.isis.TreeCalcStatsHist1qtr")
    meta.childClasses.add("cobra.model.isis.TreeCalcStatsHist5min")
    meta.childClasses.add("cobra.model.isis.FmcastTree")
    meta.childClasses.add("cobra.model.isis.TreeCalcStats1year")
    meta.childClasses.add("cobra.model.isis.TreeCalcNodeStatsHist15min")
    meta.childClasses.add("cobra.model.isis.TreeCalcStats1mo")
    meta.childClasses.add("cobra.model.isis.IntraLeakP")
    meta.childClasses.add("cobra.model.isis.TreeCalcNodeStatsHist1h")
    meta.childClasses.add("cobra.model.isis.TreeCalcNodeStatsHist1qtr")
    meta.childClasses.add("cobra.model.isis.TreeCalcNodeStats1mo")
    meta.childClasses.add("cobra.model.isis.TreeCalcStats5min")
    meta.childClasses.add("cobra.model.isis.Gr")
    meta.childClasses.add("cobra.model.isis.Db")
    meta.childClasses.add("cobra.model.isis.Overload")
    meta.childClasses.add("cobra.model.isis.ExtIf")
    meta.childClasses.add("cobra.model.isis.TreeCalcNodeStats15min")
    meta.childClasses.add("cobra.model.isis.DomAf")
    meta.childClasses.add("cobra.model.isis.TreeCalcStatsHist1year")
    meta.childClasses.add("cobra.model.isis.RibLeakP")
    meta.childClasses.add("cobra.model.isis.TreeCalcNodeStatsHist1w")
    meta.childClasses.add("cobra.model.isis.TreeCalcNodeStatsHist5min")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.isis.TreeCalcStats15min")
    meta.childClasses.add("cobra.model.isis.TreeCalcStatsHist1mo")
    meta.childClasses.add("cobra.model.isis.If")
    meta.childClasses.add("cobra.model.isis.InterLeakP")
    meta.childClasses.add("cobra.model.isis.TreeCalcNodeStatsHist1mo")
    meta.childClasses.add("cobra.model.isis.DomLvl")
    meta.childClasses.add("cobra.model.isis.TreeCalcNodeStats1d")
    meta.childClasses.add("cobra.model.isis.TreeCalcNodeStats5min")
    meta.childClasses.add("cobra.model.isis.TreeCalcStats1qtr")
    meta.childClasses.add("cobra.model.isis.TreeCalcStatsHist1w")
    meta.childClasses.add("cobra.model.isis.TreeCalcNodeStatsHist1year")
    meta.childClasses.add("cobra.model.isis.TreeCalcNodeStats1h")
    meta.childClasses.add("cobra.model.isis.TreeCalcStats1w")
    meta.childClasses.add("cobra.model.isis.TreeCalcStatsHist15min")
    meta.childClasses.add("cobra.model.isis.TreeCalcStats1h")
    meta.childClasses.add("cobra.model.isis.TreeCalcNodeStats1w")
    meta.childClasses.add("cobra.model.isis.TreeCalcStatsHist1h")
    meta.childClasses.add("cobra.model.isis.TreeCalcNodeStats1qtr")
    meta.childClasses.add("cobra.model.isis.TreeCalcStatsHist1d")
    meta.childClasses.add("cobra.model.isis.DefRtLeakP")
    meta.childClasses.add("cobra.model.isis.TreeCalcStats1d")

    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcNodeStatsHist15min", "HDisisTreeCalcNodeStats15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcNodeStatsHist1year", "HDisisTreeCalcNodeStats1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcNodeStats1year", "CDisisTreeCalcNodeStats1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcNodeStatsHist1qtr", "HDisisTreeCalcNodeStats1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcNodeStats15min", "CDisisTreeCalcNodeStats15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcNodeStatsHist5min", "HDisisTreeCalcNodeStats5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcNodeStatsHist1mo", "HDisisTreeCalcNodeStats1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcNodeStats5min", "CDisisTreeCalcNodeStats5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcNodeStats1qtr", "CDisisTreeCalcNodeStats1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcNodeStatsHist1d", "HDisisTreeCalcNodeStats1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcNodeStatsHist1h", "HDisisTreeCalcNodeStats1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcNodeStats1mo", "CDisisTreeCalcNodeStats1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcNodeStatsHist1w", "HDisisTreeCalcNodeStats1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcStatsHist1year", "HDisisTreeCalcStats1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcNodeStats1d", "CDisisTreeCalcNodeStats1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcNodeStats1h", "CDisisTreeCalcNodeStats1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcStatsHist15min", "HDisisTreeCalcStats15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcNodeStats1w", "CDisisTreeCalcNodeStats1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcStatsHist1qtr", "HDisisTreeCalcStats1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcStatsHist5min", "HDisisTreeCalcStats5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcStats1year", "CDisisTreeCalcStats1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcStats15min", "CDisisTreeCalcStats15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcStats5min", "CDisisTreeCalcStats5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcStatsHist1mo", "HDisisTreeCalcStats1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcStats1qtr", "CDisisTreeCalcStats1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcStats1mo", "CDisisTreeCalcStats1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcStatsHist1w", "HDisisTreeCalcStats1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcStatsHist1h", "HDisisTreeCalcStats1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcStatsHist1d", "HDisisTreeCalcStats1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcStats1w", "CDisisTreeCalcStats1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcStats1h", "CDisisTreeCalcStats1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.TreeCalcStats1d", "CDisisTreeCalcStats1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.InterLeakP", "interleak-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.IntraLeakP", "intraleak"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.DefRtLeakP", "defrtleak"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.LeakCtrlP", "leakctrl"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.Overload", "overload"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.FmcastTree", "fmtree-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.RibLeakP", "ribleak"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.ExtIf", "extif-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.DomLvl", "lvl-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.Db", "db-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.DomAf", "af-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.If", "if-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.Gr", "gr"))

    meta.parentClasses.add("cobra.model.isis.Inst")

    meta.superClasses.add("cobra.model.nw.ProtDom")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.CpDom")
    meta.superClasses.add("cobra.model.nw.GEp")
    meta.superClasses.add("cobra.model.l3.ProtDom")

    meta.rnPrefixes = [
        ('dom-', True),
    ]

    prop = PropMeta("str", "aggFabAdjOperSt", "aggFabAdjOperSt", 21303, PropCategory.REGULAR)
    prop.label = "Aggregate Fabric Adjacency Operational State"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "down"
    prop._addConstant("down", "down", 2)
    prop._addConstant("up", "up", 1)
    meta.props.add("aggFabAdjOperSt", prop)

    prop = PropMeta("str", "areaId", "areaId", 3129, PropCategory.REGULAR)
    prop.label = "Area ID"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 255)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("areaId", prop)

    prop = PropMeta("str", "bwRef", "bwRef", 3134, PropCategory.REGULAR)
    prop.label = "Bandwidth Reference"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 4000000)]
    prop.defaultValue = 400000
    prop.defaultValueStr = "400000"
    meta.props.add("bwRef", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "contextId", "contextId", 3137, PropCategory.REGULAR)
    prop.label = "Context ID"
    prop.isOper = True
    meta.props.add("contextId", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 28536, PropCategory.REGULAR)
    prop.label = "Controls"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("use-cfg-sys-gipo", "use-configured-system-gipo", 1)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "fastCsnps", "fastCsnps", 3139, PropCategory.REGULAR)
    prop.label = "Fast CSNPs Sent"
    prop.isOper = True
    meta.props.add("fastCsnps", prop)

    prop = PropMeta("str", "fastLsps", "fastLsps", 3138, PropCategory.REGULAR)
    prop.label = "Fast LSPs Sent"
    prop.isOper = True
    meta.props.add("fastLsps", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "lspPurged", "lspPurged", 3143, PropCategory.REGULAR)
    prop.label = "Total LSP Purged"
    prop.isOper = True
    meta.props.add("lspPurged", prop)

    prop = PropMeta("str", "lspRefreshed", "lspRefreshed", 3142, PropCategory.REGULAR)
    prop.label = "Total LSP Refreshed"
    prop.isOper = True
    meta.props.add("lspRefreshed", prop)

    prop = PropMeta("str", "lspSourced", "lspSourced", 3141, PropCategory.REGULAR)
    prop.label = "Total LSP Sourced"
    prop.isOper = True
    meta.props.add("lspSourced", prop)

    prop = PropMeta("str", "maxEcmp", "maxEcmp", 3133, PropCategory.REGULAR)
    prop.label = "Max ECMP"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 32)]
    prop.defaultValue = 18
    prop.defaultValueStr = "18"
    meta.props.add("maxEcmp", prop)

    prop = PropMeta("str", "metricStyle", "metricStyle", 3135, PropCategory.REGULAR)
    prop.label = "Metric Style"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "narrow"
    prop._addConstant("narrow", "narrow", 1)
    prop._addConstant("wide", "wide", 2)
    meta.props.add("metricStyle", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 3128, PropCategory.REGULAR)
    prop.label = "Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "fabric"
    prop._addConstant("external", "external", 2)
    prop._addConstant("fabric", "fabric", 1)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14487, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "mtsError", "mtsError", 3146, PropCategory.REGULAR)
    prop.label = "Mts Error"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("mtsError", prop)

    prop = PropMeta("str", "mtu", "mtu", 3132, PropCategory.REGULAR)
    prop.label = "Maximum Transmission Unit"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(256, 4352)]
    prop.defaultValue = 1492
    prop.defaultValueStr = "1492"
    meta.props.add("mtu", prop)

    prop = PropMeta("str", "nSel", "nSel", 3131, PropCategory.REGULAR)
    prop.label = "Network Selector"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "ip"
    prop._addConstant("ip", "ip", 0)
    meta.props.add("nSel", prop)

    prop = PropMeta("str", "name", "name", 6692, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operSt", "operSt", 3136, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop._addConstant("failed", "failed", 3)
    prop._addConstant("initializing", "initializing", 1)
    prop._addConstant("ok", "running-smoothly", 2)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "redistribMetric", "redistribMetric", 34385, PropCategory.REGULAR)
    prop.label = "Metric"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 63)]
    prop.defaultValue = 63
    prop.defaultValueStr = "63"
    meta.props.add("redistribMetric", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "seqWrapError", "seqWrapError", 3144, PropCategory.REGULAR)
    prop.label = "Sequence Wrap Error"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("seqWrapError", prop)

    prop = PropMeta("str", "spfCalculated", "spfCalculated", 3140, PropCategory.REGULAR)
    prop.label = "Total SPF Calculations"
    prop.isOper = True
    meta.props.add("spfCalculated", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "sysId", "sysId", 3130, PropCategory.REGULAR)
    prop.label = "System ID"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("sysId", prop)

    prop = PropMeta("str", "systemGipo", "systemGipo", 24297, PropCategory.REGULAR)
    prop.label = "Configured System GIPo for the overlay"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("systemGipo", prop)

    prop = PropMeta("str", "systemGipoOperSt", "systemGipoOperSt", 26320, PropCategory.REGULAR)
    prop.label = "System GIPo Operational State"
    prop.isOper = True
    meta.props.add("systemGipoOperSt", prop)

    prop = PropMeta("str", "uribError", "uribError", 3145, PropCategory.REGULAR)
    prop.label = "Urib Error"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("uribError", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class AdjEp(Mo):
    """
    The ISIS adjacency neighbor endpoint is a managed object that captures ISIS adjacency specific information such as peer system identifier and peer circuit identifier.

    """

    meta = ClassMeta("cobra.model.isis.AdjEp")

    meta.moClassName = "isisAdjEp"
    meta.rnFormat = "adj-%(type)s-adj-%(sysId)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Adjacency"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.isis.PeerIpAddr")

    meta.childNamesAndRnPrefix.append(("cobra.model.isis.PeerIpAddr", "addr-"))

    meta.parentClasses.add("cobra.model.isis.If")

    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.nw.AdjEp")
    meta.superClasses.add("cobra.model.l3.ProtAdjEp")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.ProtAdjEp")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.rnPrefixes = [
        ('adj-', True),
        ('-adj-', True),
    ]

    prop = PropMeta("str", "bfdOperSt", "bfdOperSt", 32647, PropCategory.REGULAR)
    prop.label = "BFD Operational State"
    prop.isOper = True
    prop._addConstant("down", "down", 0)
    prop._addConstant("up", "up", 1)
    meta.props.add("bfdOperSt", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cktType", "cktType", 3103, PropCategory.REGULAR)
    prop.label = "Circuit Type"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "p2p"
    prop._addConstant("bcast", "broadcast", 2)
    prop._addConstant("p2p", "point-to-point", 1)
    meta.props.add("cktType", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "holdExpTs", "holdExpTs", 3102, PropCategory.REGULAR)
    prop.label = "Holdtime Expired Timestamp"
    prop.isOper = True
    meta.props.add("holdExpTs", prop)

    prop = PropMeta("str", "lanId", "lanId", 3105, PropCategory.REGULAR)
    prop.label = "LAN Circuit ID"
    prop.isOper = True
    meta.props.add("lanId", prop)

    prop = PropMeta("str", "lastTrans", "lastTrans", 3109, PropCategory.REGULAR)
    prop.label = "Last Adjacency Transition"
    prop.isOper = True
    meta.props.add("lastTrans", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 15786, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "numAdjTrans", "numAdjTrans", 3108, PropCategory.REGULAR)
    prop.label = "Adjacency Transitions"
    prop.isOper = True
    meta.props.add("numAdjTrans", prop)

    prop = PropMeta("str", "operSt", "operSt", 3101, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "init"
    prop._addConstant("down", "down", 3)
    prop._addConstant("gr-init", "graceful-restart-initializing", 4)
    prop._addConstant("init", "initializing", 1)
    prop._addConstant("up", "up", 2)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "peerCktId", "peerCktId", 3104, PropCategory.REGULAR)
    prop.label = "Peer Circuit Type"
    prop.isOper = True
    meta.props.add("peerCktId", prop)

    prop = PropMeta("str", "peerCktPrio", "peerCktPrio", 3106, PropCategory.REGULAR)
    prop.label = "Peer Circuit Priority"
    prop.isOper = True
    prop.range = [(0, 127)]
    prop.defaultValue = 64
    prop.defaultValueStr = "64"
    meta.props.add("peerCktPrio", prop)

    prop = PropMeta("str", "peerGrFlags", "peerGrFlags", 3107, PropCategory.REGULAR)
    prop.label = "Peer Graceful Restart Flags"
    prop.isOper = True
    prop._addConstant("ack", "acknowledged", 2)
    prop._addConstant("capable", "capable", 1)
    meta.props.add("peerGrFlags", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "sysId", "sysId", 3100, PropCategory.REGULAR)
    prop.label = "System ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("sysId", prop)

    prop = PropMeta("str", "type", "type", 3099, PropCategory.REGULAR)
    prop.label = "Level Type"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 1
    prop.defaultValueStr = "l1"
    prop._addConstant("l1", "level1", 1)
    prop._addConstant("l2", "level2", 2)
    meta.props.add("type", prop)

    meta.namingProps.append(getattr(meta.props, "type"))
    meta.namingProps.append(getattr(meta.props, "sysId"))

    def __init__(self, parentMoOrDn, type, sysId, markDirty=True, **creationProps):
        namingVals = [type, sysId]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

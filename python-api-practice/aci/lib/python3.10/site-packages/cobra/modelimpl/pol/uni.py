# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Uni(Mo):
    """
    Represents policy definition/resolution universe.

    """

    meta = ClassMeta("cobra.model.pol.Uni")

    meta.moClassName = "polUni"
    meta.rnFormat = "uni"
    meta.category = MoCategory.REGULAR
    meta.label = "Policy Universe"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x7bffffffffffffff
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fv.AppCtxRefCont")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fv.EpCPCont")
    meta.childClasses.add("cobra.model.pki.ExportEncryptionKey")
    meta.childClasses.add("cobra.model.vmm.ProvP")
    meta.childClasses.add("cobra.model.vns.VDev")
    meta.childClasses.add("cobra.model.vns.SDEPpInfo")
    meta.childClasses.add("cobra.model.planner.Cont")
    meta.childClasses.add("cobra.model.tag.AliasDef")
    meta.childClasses.add("cobra.model.config.BackupStatusCont")
    meta.childClasses.add("cobra.model.qos.DscpTransCont")
    meta.childClasses.add("cobra.model.fv.BDDef")
    meta.childClasses.add("cobra.model.pki.SchedulerToken")
    meta.childClasses.add("cobra.model.aaa.UserSessionEp")
    meta.childClasses.add("cobra.model.fv.CtxDef")
    meta.childClasses.add("cobra.model.dbg.DebugP")
    meta.childClasses.add("cobra.model.tag.Def")
    meta.childClasses.add("cobra.model.ui.SettingsCont")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.ctrlr.Inst")
    meta.childClasses.add("cobra.model.ap.PluginPolContainer")
    meta.childClasses.add("cobra.model.license.FeatureCont")
    meta.childClasses.add("cobra.model.cloud.DomP")
    meta.childClasses.add("cobra.model.aaa.UserEp")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.cloud.ResourceGroup")
    meta.childClasses.add("cobra.model.l3ext.DomP")
    meta.childClasses.add("cobra.model.l2ext.DomP")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.notif.Cont")
    meta.childClasses.add("cobra.model.extdev.GroupP")
    meta.childClasses.add("cobra.model.hostprot.PolDef")
    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fv.EpPCont")
    meta.childClasses.add("cobra.model.vmm.TenantCont")
    meta.childClasses.add("cobra.model.vns.SLDevInst")
    meta.childClasses.add("cobra.model.pki.SchedulerCert")
    meta.childClasses.add("cobra.model.pki.FabricCommunicationEp")
    meta.childClasses.add("cobra.model.fc.DomP")
    meta.childClasses.add("cobra.model.fv.Tenant")
    meta.childClasses.add("cobra.model.aaa.RbacEp")
    meta.childClasses.add("cobra.model.quota.Cont")
    meta.childClasses.add("cobra.model.fv.FailedXlateCont")
    meta.childClasses.add("cobra.model.infra.Infra")
    meta.childClasses.add("cobra.model.vns.ScriptHandlerState")
    meta.childClasses.add("cobra.model.cloud.SvcDefCont")
    meta.childClasses.add("cobra.model.fabric.Inst")
    meta.childClasses.add("cobra.model.pki.FabricSelfCAEp")
    meta.childClasses.add("cobra.model.vns.SHSEPpInfo")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.phys.DomP")

    meta.childNamesAndRnPrefix.append(("cobra.model.ap.PluginPolContainer", "pluginPolContainer"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.FailedXlateCont", "failedxlatecont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pki.ExportEncryptionKey", "exportcryptkey"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pki.SchedulerToken", "schedulertoken"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ui.SettingsCont", "uisettingscont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qos.DscpTransCont", "dscptranscont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.notif.Cont", "notifications"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pki.SchedulerCert", "schedulercert"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.UserSessionEp", "usersessext"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.AppCtxRefCont", "ctxrefcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ctrlr.Inst", "controller"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pki.FabricCommunicationEp", "fabsslcomm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cloud.SvcDefCont", "svcdefcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cloud.DomP", "clouddomp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.quota.Cont", "quotacont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pki.FabricSelfCAEp", "fabselfca"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.EpCPCont", "epcpcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.config.BackupStatusCont", "backupst"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.license.FeatureCont", "features"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.planner.Cont", "planner"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.UserEp", "userext"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cloud.ResourceGroup", "resgrp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.SHSEPpInfo", "shldev-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasDef", "alias-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3ext.DomP", "l3dom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2ext.DomP", "l2dom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.TenantCont", "tnref-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.SLDevInst", "RInst-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacEp", "rbacdb"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.Inst", "fabric"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.ProvP", "vmmp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.VDev", "vDev-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.SDEPpInfo", "ldev-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.Infra", "infra"))
    meta.childNamesAndRnPrefix.append(("cobra.model.phys.DomP", "phys-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.CtxDef", "ctx-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Def", "tag-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.extdev.GroupP", "grp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.ScriptHandlerState", "ten-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.BDDef", "bd-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dbg.DebugP", "dbg"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hostprot.PolDef", "dp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.EpPCont", "epp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fc.DomP", "fc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.Tenant", "tn-"))

    meta.parentClasses.add("cobra.model.top.Root")
    meta.parentClasses.add("cobra.model.ctx.Application")

    meta.superClasses.add("cobra.model.pol.Dom")
    meta.superClasses.add("cobra.model.pol.Cont")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")

    meta.rnPrefixes = [
        ('uni', False),
    ]

    prop = PropMeta("str", "annotation", "annotation", 37949, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 40088, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14794, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 15234, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15235, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15236, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

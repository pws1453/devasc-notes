# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Module(Mo):
    """
    The runtime state of a module.

    """

    meta = ClassMeta("cobra.model.im.Module")

    meta.moClassName = "imModule"
    meta.rnFormat = "module-%(id)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Module"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.im.PhysIf")
    meta.childClasses.add("cobra.model.im.PortInfo")

    meta.childNamesAndRnPrefix.append(("cobra.model.im.PortInfo", "portinfo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.im.PhysIf", "phys-"))

    meta.parentClasses.add("cobra.model.im.Inst")

    meta.rnPrefixes = [
        ('module-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "id", "id", 4015, PropCategory.REGULAR)
    prop.label = "Module Id"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "isPresent", "isPresent", 4021, PropCategory.REGULAR)
    prop.label = "Module Presence Status"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("isPresent", prop)

    prop = PropMeta("str", "lcExceptionFlag", "lcExceptionFlag", 4024, PropCategory.REGULAR)
    prop.label = "LC Exception Flag"
    prop.isOper = True
    meta.props.add("lcExceptionFlag", prop)

    prop = PropMeta("str", "lcInsertPld", "lcInsertPld", 4026, PropCategory.REGULAR)
    prop.label = "LC Insertion Paylod"
    prop.isOper = True
    meta.props.add("lcInsertPld", prop)

    prop = PropMeta("str", "lcInsertPldSz", "lcInsertPldSz", 4025, PropCategory.REGULAR)
    prop.label = "LC Insertion Payload Size"
    prop.isOper = True
    meta.props.add("lcInsertPldSz", prop)

    prop = PropMeta("str", "lcNodeAddress", "lcNodeAddress", 4019, PropCategory.REGULAR)
    prop.label = "LC Node Address"
    prop.isOper = True
    meta.props.add("lcNodeAddress", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "moduleInitiEvalFlag", "moduleInitiEvalFlag", 4023, PropCategory.REGULAR)
    prop.label = "Module Init Eval Flag"
    prop.isOper = True
    meta.props.add("moduleInitiEvalFlag", prop)

    prop = PropMeta("str", "moduleType", "moduleType", 4017, PropCategory.REGULAR)
    prop.label = "Module Type"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "lc"
    prop._addConstant("lc", "lc", 1)
    prop._addConstant("sup", "sup", 0)
    meta.props.add("moduleType", prop)

    prop = PropMeta("str", "numPorts", "numPorts", 4016, PropCategory.REGULAR)
    prop.label = "Number of Port"
    prop.isOper = True
    meta.props.add("numPorts", prop)

    prop = PropMeta("str", "portCfgSap", "portCfgSap", 4020, PropCategory.REGULAR)
    prop.label = "Port Config Sap"
    prop.isOper = True
    meta.props.add("portCfgSap", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "runtimeFlag", "runtimeFlag", 4022, PropCategory.REGULAR)
    prop.label = "Runtime Flag"
    prop.isOper = True
    meta.props.add("runtimeFlag", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "swCardId", "swCardId", 4018, PropCategory.REGULAR)
    prop.label = "Software Card Id"
    prop.isOper = True
    meta.props.add("swCardId", prop)

    meta.namingProps.append(getattr(meta.props, "id"))

    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

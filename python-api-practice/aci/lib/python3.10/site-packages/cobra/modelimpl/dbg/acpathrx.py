# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class AcPathRx(Mo):
    """
    The atomic counter path Rx

    """

    meta = ClassMeta("cobra.model.dbg.AcPathRx")

    meta.moClassName = "dbgAcPathRx"
    meta.rnFormat = "pathRx-%(srcNodeId)s-to-%(dstNodeId)s"
    meta.category = MoCategory.REGULAR
    meta.label = "On-Going Path Atomic Counter Receive Stats"
    meta.writeAccessMask = 0x800081800000001
    meta.readAccessMask = 0x800081800000001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.dbg.AcTrailRx")

    meta.childNamesAndRnPrefix.append(("cobra.model.dbg.AcTrailRx", "trailRx-"))

    meta.parentClasses.add("cobra.model.dbg.DVPCPath")
    meta.parentClasses.add("cobra.model.dbg.AcPath")
    meta.parentClasses.add("cobra.model.dbg.OGACB0")
    meta.parentClasses.add("cobra.model.dbg.SVPCPath")
    meta.parentClasses.add("cobra.model.dbg.SDVPCPath")
    meta.parentClasses.add("cobra.model.dbg.OGACB1")

    meta.superClasses.add("cobra.model.dbg.AcOgE")

    meta.rnPrefixes = [
        ('pathRx-', True),
        ('-to-', True),
    ]

    prop = PropMeta("str", "admitB", "admitB", 4567, PropCategory.REGULAR)
    prop.label = "Admitted Bytes"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("admitB", prop)

    prop = PropMeta("str", "admitP", "admitP", 4568, PropCategory.REGULAR)
    prop.label = "Admitted Packets"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("admitP", prop)

    prop = PropMeta("str", "admitTotB", "admitTotB", 4571, PropCategory.REGULAR)
    prop.label = "Admitted Bytes"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("admitTotB", prop)

    prop = PropMeta("str", "admitTotP", "admitTotP", 4572, PropCategory.REGULAR)
    prop.label = "Admitted Packets"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("admitTotP", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dropB", "dropB", 4569, PropCategory.REGULAR)
    prop.label = "Dropped Bytes"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("dropB", prop)

    prop = PropMeta("str", "dropP", "dropP", 4570, PropCategory.REGULAR)
    prop.label = "Dropped Packets"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("dropP", prop)

    prop = PropMeta("str", "dropTotB", "dropTotB", 4573, PropCategory.REGULAR)
    prop.label = "Dropped Bytes"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("dropTotB", prop)

    prop = PropMeta("str", "dropTotP", "dropTotP", 4574, PropCategory.REGULAR)
    prop.label = "Dropped Packets"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("dropTotP", prop)

    prop = PropMeta("str", "dstNodeId", "dstNodeId", 6032, PropCategory.REGULAR)
    prop.label = "Destination Fabric Node ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 16000)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("dstNodeId", prop)

    prop = PropMeta("str", "dstNodeId2", "dstNodeId2", 16000, PropCategory.REGULAR)
    prop.label = "Destination VPC peer Fabric Node ID; valid only if pathType is vpcToVpc or nodeToVpc"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 16000)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("dstNodeId2", prop)

    prop = PropMeta("str", "firstCollTs", "firstCollTs", 4565, PropCategory.REGULAR)
    prop.label = "First Collection Timestamp in Milliseconds Sicne Epoch"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("firstCollTs", prop)

    prop = PropMeta("str", "lastCollTs", "lastCollTs", 4564, PropCategory.REGULAR)
    prop.label = "Last Collection Timestamp in Milliseconds Sicne Epoch"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("lastCollTs", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "pathDn", "pathDn", 16506, PropCategory.REGULAR)
    prop.label = "DN of the path"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("pathDn", prop)

    prop = PropMeta("str", "pathType", "pathType", 15998, PropCategory.REGULAR)
    prop.label = "Type of path"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "nodeToNode"
    prop._addConstant("nodeToNode", "nodetonode", 0)
    prop._addConstant("nodeToVpc", "nodetovpc", 3)
    prop._addConstant("vpcToNode", "vpctonode", 2)
    prop._addConstant("vpcToVpc", "vpctovpc", 1)
    meta.props.add("pathType", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "seqNo", "seqNo", 4566, PropCategory.REGULAR)
    prop.label = "Sequence Number, Increaed by 1 every Collection"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("seqNo", prop)

    prop = PropMeta("str", "srcNodeId", "srcNodeId", 6031, PropCategory.REGULAR)
    prop.label = "Source Fabric Node ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 16000)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("srcNodeId", prop)

    prop = PropMeta("str", "srcNodeId2", "srcNodeId2", 15999, PropCategory.REGULAR)
    prop.label = "Source VPC peer Fabric Node ID; valid only if pathType is vpcToVpc or vpcToNode"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 16000)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("srcNodeId2", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "srcNodeId"))
    meta.namingProps.append(getattr(meta.props, "dstNodeId"))

    def __init__(self, parentMoOrDn, srcNodeId, dstNodeId, markDirty=True, **creationProps):
        namingVals = [srcNodeId, dstNodeId]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

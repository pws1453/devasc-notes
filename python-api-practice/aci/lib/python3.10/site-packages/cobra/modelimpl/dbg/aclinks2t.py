# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class AcLinkS2T(Mo):
    """
    The atomic counter trail link counter. There could be multiple physical links between two adjacent nodes in a trail. There is a relation object from the trail to each of these   links. AcLinkRel is the set of atomic counters that maintains the amount of traffic going via the physical link that belongs to the trail and   hence to the path. This works well for one level of spines. With two levels of spine, the data would indicate the traffic per physical link per   path and not per trail. As then the physical link may belong to multiple trails in the same path. With one spine level, a physical link can   belong to only one trail in a path. Note that this is not an atomic counter for the entire physical link, hence not naming the managed object as AcLink,   but naming as AcTlink for AcTrailLink.

    """

    meta = ClassMeta("cobra.model.dbg.AcLinkS2T")

    meta.moClassName = "dbgAcLinkS2T"
    meta.rnFormat = "srcP-%(srcP)s-trnstP-%(trnstP)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Atomic Counter for Relation to a Link"
    meta.writeAccessMask = 0x800081800000001
    meta.readAccessMask = 0x800081800000001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.dbg.RtAcLinkS2T")

    meta.childNamesAndRnPrefix.append(("cobra.model.dbg.RtAcLinkS2T", "rtacLinkS2T"))

    meta.parentClasses.add("cobra.model.dbg.AcTrail")

    meta.superClasses.add("cobra.model.dbg.AcTrailA")
    meta.superClasses.add("cobra.model.dbg.AcPbDataA")

    meta.rnPrefixes = [
        ('srcP-', True),
        ('-trnstP-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dropPkt", "dropPkt", 4655, PropCategory.REGULAR)
    prop.label = "Packets Dropped on this Path"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("dropPkt", prop)

    prop = PropMeta("str", "dropPktPercentage", "dropPktPercentage", 4656, PropCategory.REGULAR)
    prop.label = "Percentage of Packets Dropped on this Path"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("dropPktPercentage", prop)

    prop = PropMeta("str", "dstNodeId", "dstNodeId", 4650, PropCategory.REGULAR)
    prop.label = "Destination Fabric Node ID"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 16000)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("dstNodeId", prop)

    prop = PropMeta("str", "dstNodeId2", "dstNodeId2", 16003, PropCategory.REGULAR)
    prop.label = "VPC peer destination Fabric Node ID"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 16000)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("dstNodeId2", prop)

    prop = PropMeta("str", "excessPkt", "excessPkt", 4657, PropCategory.REGULAR)
    prop.label = "Excess Packets on this Path"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("excessPkt", prop)

    prop = PropMeta("str", "excessPktPercentage", "excessPktPercentage", 4658, PropCategory.REGULAR)
    prop.label = "Percentage of Excess Packets Received on this Path"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("excessPktPercentage", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "pathType", "pathType", 16001, PropCategory.REGULAR)
    prop.label = "Type of path"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "nodeToNode"
    prop._addConstant("nodeToNode", "nodetonode", 0)
    prop._addConstant("nodeToVpc", "nodetovpc", 3)
    prop._addConstant("vpcToNode", "vpctonode", 2)
    prop._addConstant("vpcToVpc", "vpctovpc", 1)
    meta.props.add("pathType", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "rxPkt", "rxPkt", 4654, PropCategory.REGULAR)
    prop.label = "Packets Received on this Path by Destination Node"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("rxPkt", prop)

    prop = PropMeta("str", "seqNo", "seqNo", 4652, PropCategory.REGULAR)
    prop.label = "Sequence Number"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("seqNo", prop)

    prop = PropMeta("str", "skip", "skip", 16619, PropCategory.REGULAR)
    prop.label = "Number of intervals to be skipped, since the topology has changed"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("skip", prop)

    prop = PropMeta("str", "srcNodeId", "srcNodeId", 4649, PropCategory.REGULAR)
    prop.label = "Source Fabric Node ID"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 16000)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("srcNodeId", prop)

    prop = PropMeta("str", "srcNodeId2", "srcNodeId2", 16002, PropCategory.REGULAR)
    prop.label = "VPC peer source Fabric Node ID"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 16000)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("srcNodeId2", prop)

    prop = PropMeta("str", "srcP", "srcP", 4666, PropCategory.REGULAR)
    prop.label = "Source Port Id"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 127)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("srcP", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "suspect", "suspect", 16401, PropCategory.REGULAR)
    prop.label = "True is a 1 packet, less than 0.01% drop or excess was ignored"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("suspect", prop)

    prop = PropMeta("str", "totDropPkt", "totDropPkt", 4661, PropCategory.REGULAR)
    prop.label = "Total Packets Dropped on this Path"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("totDropPkt", prop)

    prop = PropMeta("str", "totDropPktPercentage", "totDropPktPercentage", 4662, PropCategory.REGULAR)
    prop.label = "Percentage of Total Packets Dropped on this Path"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("totDropPktPercentage", prop)

    prop = PropMeta("str", "totExcessPkt", "totExcessPkt", 4663, PropCategory.REGULAR)
    prop.label = "Total Excess Packets on this Path"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("totExcessPkt", prop)

    prop = PropMeta("str", "totExcessPktPercentage", "totExcessPktPercentage", 4664, PropCategory.REGULAR)
    prop.label = "Percentage of Total Excess Packets Received on                                  this Path"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("totExcessPktPercentage", prop)

    prop = PropMeta("str", "totRxPkt", "totRxPkt", 4660, PropCategory.REGULAR)
    prop.label = "Total Packets Received on this Path by Destination Node"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("totRxPkt", prop)

    prop = PropMeta("str", "totTxPkt", "totTxPkt", 4659, PropCategory.REGULAR)
    prop.label = "Total Packets Transmitted on this Path from Source Node"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("totTxPkt", prop)

    prop = PropMeta("str", "trnstNodeId", "trnstNodeId", 4665, PropCategory.REGULAR)
    prop.label = "Transit Node Id"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 16000)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("trnstNodeId", prop)

    prop = PropMeta("str", "trnstP", "trnstP", 4667, PropCategory.REGULAR)
    prop.label = "Destination Port Id"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 127)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("trnstP", prop)

    prop = PropMeta("str", "ts", "ts", 4651, PropCategory.REGULAR)
    prop.label = "Last Update Timestamp"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("ts", prop)

    prop = PropMeta("str", "txPkt", "txPkt", 4653, PropCategory.REGULAR)
    prop.label = "Packets Transmitted on this Path from Source Node"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("txPkt", prop)

    meta.namingProps.append(getattr(meta.props, "srcP"))
    meta.namingProps.append(getattr(meta.props, "trnstP"))

    def __init__(self, parentMoOrDn, srcP, trnstP, markDirty=True, **creationProps):
        namingVals = [srcP, trnstP]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

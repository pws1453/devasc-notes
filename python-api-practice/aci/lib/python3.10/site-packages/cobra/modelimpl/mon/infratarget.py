# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class InfraTarget(Mo):
    """
    Creating a monitoring target will allow you to associate certain monitoring policies to the target object for the fabric infrastructure. These associated policies can be related to stats collection, stats export, Callhome/SNMP/Syslog, event severities, fault severities, and fault lifecycle policies. The target object will be found in the Monitoring Object drop-down menu in the sub-folders of this monitoring policy, if available.

    """

    meta = ClassMeta("cobra.model.mon.InfraTarget")

    meta.moClassName = "monInfraTarget"
    meta.rnFormat = "tarinfra-%(scope)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Monitoring Target"
    meta.writeAccessMask = 0x840100000000001
    meta.readAccessMask = 0x8c0140000000001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.eqptdiagp.TsHlExtChFP")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.LcP")
    meta.childClasses.add("cobra.model.eqptdiagp.LeTsHlEcc")
    meta.childClasses.add("cobra.model.eqptdiagp.TsBtLeafP")
    meta.childClasses.add("cobra.model.syslog.Src")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.health.Pol")
    meta.childClasses.add("cobra.model.stats.HierColl")
    meta.childClasses.add("cobra.model.stats.ExportP")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.eqptdiagp.TsHlLeafP")
    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.eqptdiagp.TsBtExtChHP")
    meta.childClasses.add("cobra.model.event.SevAsnP")
    meta.childClasses.add("cobra.model.callhome.Src")
    meta.childClasses.add("cobra.model.stats.Reportable")
    meta.childClasses.add("cobra.model.callhome.SmartSrc")
    meta.childClasses.add("cobra.model.eqptdiagp.LeTsBtEcc")
    meta.childClasses.add("cobra.model.eqptdiagp.TsHlExtChHP")
    meta.childClasses.add("cobra.model.snmp.Src")
    meta.childClasses.add("cobra.model.eqptdiagp.TsBtExtChFP")
    meta.childClasses.add("cobra.model.fault.SevAsnP")
    meta.childClasses.add("cobra.model.tacacs.Src")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.LeTsHlEcc", "leHlEccDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.LeTsBtEcc", "leBtEccDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.TsHlExtChFP", "hlEFpDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.TsBtExtChHP", "btEHpDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.TsHlExtChHP", "hlEHpDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.TsBtExtChFP", "btEFpDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.TsBtLeafP", "btLpDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.TsHlLeafP", "hlLpDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.callhome.SmartSrc", "smartchsrc"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tacacs.Src", "tacacssrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.snmp.Src", "snmpsrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Pol", "health-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.syslog.Src", "slsrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.event.SevAsnP", "esevp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.callhome.Src", "chsrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.SevAsnP", "fsevp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.LcP", "flcp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.stats.HierColl", "coll-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.stats.Reportable", "stat-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.stats.ExportP", "exp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.mon.InfraPol")

    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Comp")
    meta.superClasses.add("cobra.model.mon.Target")
    meta.superClasses.add("cobra.model.mon.ATarget")

    meta.rnPrefixes = [
        ('tarinfra-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 37294, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 5582, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 39433, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 13796, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "scope", "scope", 432, PropCategory.REGULAR)
    prop.label = "Target Scope"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("aaaDomainRef", "reference-to-domain-tag-for-parent-object-(aaa.domainref)", 1562)
    prop._addConstant("aaaIDomainRef", "reference-to-domain-tag-for-parent-object-(aaa.idomainref)", 5294)
    prop._addConstant("adepgRsSvrCertChain", "key-ring-(adepg.rssvrcertchain)", 12626)
    prop._addConstant("adepgRsSvrKeyRing", "key-ring-(adepg.rssvrkeyring)", 12624)
    prop._addConstant("adepgSvr", "interface-to-auth-server-(adepg.svr)", 12628)
    prop._addConstant("adepgUni", "universe-(adepg.uni)", 12622)
    prop._addConstant("callhomeRsDestGroup", "relation-to-callhome-destination-group-(callhome.rsdestgroup)", 1695)
    prop._addConstant("callhomeRsQueryGroupRel", "relation-to-callhome-querygroup-(callhome.rsquerygrouprel)", 1697)
    prop._addConstant("callhomeRsSmartdestGroup", "relation-to-callhome-destination-smart-group-(callhome.rssmartdestgroup)", 11767)
    prop._addConstant("callhomeSmartSrc", "smart-callhome-source-(callhome.smartsrc)", 11766)
    prop._addConstant("callhomeSrc", "callhome-source-(callhome.src)", 1694)
    prop._addConstant("cdpAdjEp", "cdp-adjacency-(cdp.adjep)", 2632)
    prop._addConstant("cdpIf", "cdp-interface-(cdp.if)", 2637)
    prop._addConstant("cdpInst", "cdp-instance-(cdp.inst)", 2640)
    prop._addConstant("cloudsecDom", "cloudsec-layer-3-domain-(cloudsec.dom)", 12256)
    prop._addConstant("cloudsecEntity", "cloudsec-entity-(cloudsec.entity)", 12252)
    prop._addConstant("cloudsecIf", "cloudsec-l3-interface-(cloudsec.if)", 12255)
    prop._addConstant("cloudsecInst", "cloudsec-instance-(cloudsec.inst)", 12253)
    prop._addConstant("cloudsecSaPeer", "sa-peer-(cloudsec.sapeer)", 12257)
    prop._addConstant("cloudsecSaRxKey", "sa-rx-key-(cloudsec.sarxkey)", 12275)
    prop._addConstant("cloudsecSaTxKey", "sa-tx-key-(cloudsec.satxkey)", 12276)
    prop._addConstant("cloudsecSpRxKeySt", "aggregated-rxsakey-status-on-spine-(cloudsec.sprxkeyst)", 12927)
    prop._addConstant("cloudsecSpTxKeySt", "aggregated-txsakey-status-on-spine-(cloudsec.sptxkeyst)", 12930)
    prop._addConstant("compCtrctCont", "contract-container-(comp.ctrctcont)", 7979)
    prop._addConstant("compCtrlr", "controller-instance-(comp.ctrlr)", 1275)
    prop._addConstant("compDataStore", "service-vm-requirments-(comp.datastore)", 12364)
    prop._addConstant("compDom", "domain-(comp.dom)", 1271)
    prop._addConstant("compEDMgrProxy", "proxy-for-edmmgr-mo-(comp.edmgrproxy)", 14303)
    prop._addConstant("compEpCP", "security-group-(comp.epcp)", 8212)
    prop._addConstant("compEpPConn", "endpoint-to-epg-connection-(comp.eppconn)", 1263)
    prop._addConstant("compEpPD", "vmm-port-group-(comp.eppd)", 1262)
    prop._addConstant("compHealthPolCont", "health-policy-container-(comp.healthpolcont)", 12969)
    prop._addConstant("compHpNic", "hypervisor-nic-(comp.hpnic)", 1120)
    prop._addConstant("compHv", "hypervisor-(comp.hv)", 1291)
    prop._addConstant("compHvClusterCont", "host-cluster-policy-container-(comp.hvclustercont)", 15248)
    prop._addConstant("compHvClusterDef", "cluster-(comp.hvclusterdef)", 15249)
    prop._addConstant("compHvHealth", "hypervisor-fault-info-(comp.hvhealth)", 13159)
    prop._addConstant("compInst", "l4-l7-device-(comp.inst)", 12363)
    prop._addConstant("compInstPol", "l4-l7-device-policy-(comp.instpol)", 12362)
    prop._addConstant("compL3ExtAttachNode", "l3ext-attach-mo-(comp.l3extattachnode)", 15816)
    prop._addConstant("compL3ExtAttachPort", "l3ext-attach-port-(comp.l3extattachport)", 15818)
    prop._addConstant("compL3ExtTracker", "l3-ext-tracker-(comp.l3exttracker)", 15813)
    prop._addConstant("compMgmtNic", "management-nic-(comp.mgmtnic)", 1129)
    prop._addConstant("compMigratingVmCont", "migrating-vm-container-(comp.migratingvmcont)", 12949)
    prop._addConstant("compPendDpVerify", "pending-data-path-verification-container-(comp.penddpverify)", 10958)
    prop._addConstant("compPendEpCont", "pending-ep-container-(comp.pendepcont)", 10942)
    prop._addConstant("compPhys", "physical-host-(comp.phys)", 1290)
    prop._addConstant("compPolCont", "controller-policy-container-(comp.polcont)", 1274)
    prop._addConstant("compPpNic", "physical-interface-on-a-physical-host-(comp.ppnic)", 1119)
    prop._addConstant("compPrimaryEncapDef", "primary-encap-(comp.primaryencapdef)", 8258)
    prop._addConstant("compProv", "provider-(comp.prov)", 1268)
    prop._addConstant("compPvlanCont", "to-fix---comp.pvlancont", 7977)
    prop._addConstant("compRFltP", "service-group-(comp.rfltp)", 8214)
    prop._addConstant("compResourcePool", "service-vm-requirments-(comp.resourcepool)", 12365)
    prop._addConstant("compRsCtrlr", "controller-(comp.rsctrlr)", 1278)
    prop._addConstant("compRsCtrlrP", "relation-to-vmm-controller-profile-(comp.rsctrlrp)", 1259)
    prop._addConstant("compRsUsegEpPD", "vmm-port-group-(comp.rsusegeppd)", 7973)
    prop._addConstant("compStatsPol", "monitoring-policy-(comp.statspol)", 1280)
    prop._addConstant("compSvcVMDef", "l4-l7-virtual-service-(comp.svcvmdef)", 1112)
    prop._addConstant("compSvmNicInfo", "svm-nic-info-(comp.svmnicinfo)", 11097)
    prop._addConstant("compTagCont", "tag-container-(comp.tagcont)", 9854)
    prop._addConstant("compTenantCont", "pending-data-path-verification-tenant-container-(comp.tenantcont)", 10959)
    prop._addConstant("compToEPg", "toepg-(comp.toepg)", 7980)
    prop._addConstant("compTrigRtdEpP", "l3ext-attach-mo-(comp.trigrtdepp)", 15817)
    prop._addConstant("compUni", "universe-(comp.uni)", 1267)
    prop._addConstant("compVNicPDDef", "vnic-profile-definition-(comp.vnicpddef)", 1114)
    prop._addConstant("dot1xDAEp", "interface-(dot1x.daep)", 10622)
    prop._addConstant("dot1xDUEp", "interface-(dot1x.duep)", 12247)
    prop._addConstant("dot1xEntity", "dot1x-entity-(dot1x.entity)", 10532)
    prop._addConstant("dot1xIf", "interface-(dot1x.if)", 10535)
    prop._addConstant("dot1xInst", "dot1x-instance-(dot1x.inst)", 10533)
    prop._addConstant("dot1xVDAEp", "interface-(dot1x.vdaep)", 10688)
    prop._addConstant("edmCompCtrlrProxy", "proxy-for-compctrlr-mo-(edm.compctrlrproxy)", 14294)
    prop._addConstant("edmManagedNic", "proxy-for-comphpnic-mo-(edm.managednic)", 14297)
    prop._addConstant("edmMgr", "controller-instance-(edm.mgr)", 12647)
    prop._addConstant("edmNicProf", "external-device-manager-nic-profile-(edm.nicprof)", 12657)
    prop._addConstant("edmNicProfToDom", "nic-profile-to-domain-representation-(edm.nicproftodom)", 14288)
    prop._addConstant("edmRsCtrlrToDom", "association-between-proxy-ctrlr-and-domain-(edm.rsctrlrtodom)", 14295)
    prop._addConstant("edmRsEncapDef", "relation-to-a-single-encap-definition-(edm.rsencapdef)", 12658)
    prop._addConstant("edmRsExtDevDomP", "domain-(edm.rsextdevdomp)", 12655)
    prop._addConstant("edmRsToNicProfToDom", "association-between-managed-nic-to-a-nic-profile-domain-association-(edm.rstonicproftodom)", 14298)
    prop._addConstant("edmRsToSvrNic", "association-between-servernic-(ucsm-inventory)-and-hpnic-(vmm-inventory)-(edm.rstosvrnic)", 14300)
    prop._addConstant("edmSDWanPolCont", "container-for-sdwan-policies-(edm.sdwanpolcont)", 15269)
    prop._addConstant("edmSDWanPrefixListCont", "container-for-sdwan-prefixes-per-policy-(edm.sdwanprefixlistcont)", 16314)
    prop._addConstant("edmSDWanSlaUpdPol", "sdwan-sla-policy-(edm.sdwanslaupdpol)", 16309)
    prop._addConstant("edmSDWanVpnCont", "container-for-sdwan-vpns-read-from-remote-(edm.sdwanvpncont)", 16310)
    prop._addConstant("edmSDWanVrfEntry", "sdwan-vrf-entry-reported-from-datapath-(edm.sdwanvrfentry)", 16313)
    prop._addConstant("edmSDWanVrfListCont", "container-for-sdwan-vrf-list-container-(edm.sdwanvrflistcont)", 16312)
    prop._addConstant("edmUni", "universe-(edm.uni)", 12645)
    prop._addConstant("edmUplinkProf", "uplink-profile-(edm.uplinkprof)", 12661)
    prop._addConstant("eqptAsic", "asic-(eqpt.asic)", 3361)
    prop._addConstant("eqptBrkoutP", "breakout-port-(eqpt.brkoutp)", 8437)
    prop._addConstant("eqptExtChCard", "extended-chassis-module-(eqpt.extchcard)", 3207)
    prop._addConstant("eqptExtChFP", "extended-chassis-fabric-port-(eqpt.extchfp)", 3007)
    prop._addConstant("eqptExtChHP", "extended-chassis-host-port-(eqpt.extchhp)", 3006)
    prop._addConstant("eqptFcP", "fc-port-(eqpt.fcp)", 11877)
    prop._addConstant("eqptFlash", "flash-(eqpt.flash)", 3230)
    prop._addConstant("eqptFpga", "fpga-(eqpt.fpga)", 3231)
    prop._addConstant("eqptLeafP", "access-port-(eqpt.leafp)", 3005)
    prop._addConstant("ethpmAggrIf", "aggregated-interface-(ethpm.aggrif)", 3642)
    prop._addConstant("ethpmDOMRxPwrStats", "digital-optical-monitor,-rx-power-details-(ethpm.domrxpwrstats)", 8951)
    prop._addConstant("ethpmDOMStats", "digital-optical-monitor,-transceiver-details-(ethpm.domstats)", 8946)
    prop._addConstant("ethpmDOMTxPwrStats", "digital-optical-monitor,-tx-power-details-(ethpm.domtxpwrstats)", 8950)
    prop._addConstant("ethpmFault", "ethpm-custom-faults-(ethpm.fault)", 10520)
    prop._addConstant("ethpmFcot", "fcot-(ethpm.fcot)", 3648)
    prop._addConstant("ethpmFcotDD", "dd-fcot-(ethpm.fcotdd)", 15524)
    prop._addConstant("ethpmFcotX2", "x2-fcot-(ethpm.fcotx2)", 3650)
    prop._addConstant("ethpmPhysIf", "physical-interface-runtime-state-(ethpm)-(ethpm.physif)", 3641)
    prop._addConstant("eventSevAsnP", "event-severity-assignment-policy-(event.sevasnp)", 1684)
    prop._addConstant("faultSevAsnP", "fault-severity-assignment-policy-(fault.sevasnp)", 1733)
    prop._addConstant("fileRsARemoteHostToEpp", "relation-to-remote-host-reachability-epp-(file.rsaremotehosttoepp)", 5360)
    prop._addConstant("firmwareCompRunning", "equipment-component-running-status-(firmware.comprunning)", 2984)
    prop._addConstant("fvDomDef", "domain-(fv.domdef)", 1852)
    prop._addConstant("fvRsDomDefNsLocal", "vxlan-pool-(fv.rsdomdefnslocal)", 1855)
    prop._addConstant("fvnsEncapBlk", "ranges-(fvns.encapblk)", 4552)
    prop._addConstant("fvnsMcastAddrInstDef", "multicast-address-pool-(fvns.mcastaddrinstdef)", 4563)
    prop._addConstant("fvnsVlanInstDef", "vlan-pool-defn.-(fvns.vlaninstdef)", 6872)
    prop._addConstant("fvnsVxlanInstDef", "vxlan-pool-defn.-(fvns.vxlaninstdef)", 4562)
    prop._addConstant("hvsAdj", "adjacency-(hvs.adj)", 111)
    prop._addConstant("hvsEnhancedLagPol", "enhanced-lacp-(hvs.enhancedlagpol)", 12853)
    prop._addConstant("hvsExtPol", "portgroup-(hvs.extpol)", 105)
    prop._addConstant("hvsHealthProvider", "host-health-provider-(hvs.healthprovider)", 12965)
    prop._addConstant("hvsIpSet", "ipset-(hvs.ipset)", 7949)
    prop._addConstant("hvsLNode", "distributed-virtual-switch-(hvs.lnode)", 103)
    prop._addConstant("hvsMacSet", "macset-(hvs.macset)", 7950)
    prop._addConstant("hvsMbrCont", "controller-member-mac/ip-container-(hvs.mbrcont)", 8199)
    prop._addConstant("hvsMbrMac", "controller-member-mac-(hvs.mbrmac)", 8200)
    prop._addConstant("hvsResCont", "resource-container-(hvs.rescont)", 6232)
    prop._addConstant("hvsRsCompHv", "hypervisor-(hvs.rscomphv)", 12966)
    prop._addConstant("hvsRtNicAdj", "abstraction-of-a-nic-interface-(hvs.rtnicadj)", 1117)
    prop._addConstant("hvsSecGrp", "security-group-(hvs.secgrp)", 7961)
    prop._addConstant("hvsUsegCont", "microsegmentation-entity-container-(hvs.usegcont)", 7959)
    prop._addConstant("infraEpPD", "portgroup-(infra.eppd)", 4461)
    prop._addConstant("infraEpPDDef", "endpoint-policy-description-(infra.eppddef)", 4462)
    prop._addConstant("infraRsVipAddrNs", "relation-to-vip-range-(infra.rsvipaddrns)", 5568)
    prop._addConstant("infraRsVlanNs", "relation-to-vlan-pool-(infra.rsvlanns)", 4515)
    prop._addConstant("infraRtDomDef", "container-for-domain-relations-(infra.rtdomdef)", 12678)
    prop._addConstant("l1LinkLevelFlowCtrlP", "link-level-flow-control-policy-(l1.linklevelflowctrlp)", 18227)
    prop._addConstant("l1PhysIf", "layer-1-physical-interface-configuration-(l1.physif)", 3627)
    prop._addConstant("l1PrioFlowCtrlP", "priority-flow-control-policy-(l1.prioflowctrlp)", 8788)
    prop._addConstant("l1RtEncPhysRtdConf", "encapsulated-routed-interface-(l1.rtencphysrtdconf)", 3769)
    prop._addConstant("l1StormCtrlP", "storm-control-policy-(l1.stormctrlp)", 5612)
    prop._addConstant("lacpEnhancedLagPol", "enhanced-lacp-policy-(lacp.enhancedlagpol)", 12856)
    prop._addConstant("lacpEnhancedLagPolDef", "abstraction-of-enhanced-lacp-lag-policy-(lacp.enhancedlagpoldef)", 12857)
    prop._addConstant("lacpLagPolDef", "abstraction-of-lacp-lag-policy-(lacp.lagpoldef)", 153)
    prop._addConstant("macsecEntity", "macsec-entity-(macsec.entity)", 9898)
    prop._addConstant("macsecFabIf", "macsec-interface-(macsec.fabif)", 9902)
    prop._addConstant("macsecIf", "macsec-interface-(macsec.if)", 9901)
    prop._addConstant("macsecInst", "macsec-instance-(macsec.inst)", 9899)
    prop._addConstant("monInfraPol", "monitoring-policy-(mon.infrapol)", 251)
    prop._addConstant("monInfraTarget", "monitoring-target-(mon.infratarget)", 252)
    prop._addConstant("pcAggrIf", "aggregated-interface-(pc.aggrif)", 3659)
    prop._addConstant("pcAggrMbrIf", "aggregated-member-interface-(pc.aggrmbrif)", 3658)
    prop._addConstant("pcLbP", "load-balance-policy-(pc.lbp)", 9943)
    prop._addConstant("pcRsMbrIfs", "layer-1-physical-interface-configuration-(pc.rsmbrifs)", 3660)
    prop._addConstant("poeEntity", "poe-entity-(poe.entity)", 10528)
    prop._addConstant("poeIf", "interface-(poe.if)", 10530)
    prop._addConstant("poeInst", "poe-instance-(poe.inst)", 10529)
    prop._addConstant("poeVDAEp", "copy-of-module-(poe.vdaep)", 12306)
    prop._addConstant("resConsumer", "resource-consumer-(res.consumer)", 308)
    prop._addConstant("rmonIfStorm", "interface-storm-drop-counters-(rmon.ifstorm)", 5907)
    prop._addConstant("snmpRsDestGroup", "snmp-destination-group-(snmp.rsdestgroup)", 1689)
    prop._addConstant("snmpSrc", "snmp-source-(snmp.src)", 1688)
    prop._addConstant("spanRsDestApic", "relation-to-span-destination-apic-(span.rsdestapic)", 6230)
    prop._addConstant("spanRsDestEpg", "relation-to-span-destination-epg-(span.rsdestepg)", 4160)
    prop._addConstant("spanRsDestPathEp", "relation-to-span-destination-path-(span.rsdestpathep)", 4164)
    prop._addConstant("spanRsDestToVPort", "relation-to-vspan-destination-vport-(span.rsdesttovport)", 4189)
    prop._addConstant("spanRsDestToVPortDef", "relation-to-vspan-destination-vport-(span.rsdesttovportdef)", 5583)
    prop._addConstant("spanRsProvDestGrp", "relation-to-span-destination-provider-group-(span.rsprovdestgrp)", 4171)
    prop._addConstant("spanRsSrcToEpg", "relation-to-span-source-to-epg-(span.rssrctoepg)", 4141)
    prop._addConstant("spanRsSrcToPathEp", "relation-to-span-source-to-path-endpoint-(span.rssrctopathep)", 4137)
    prop._addConstant("spanRsSrcToVPort", "relation-to-span-source-to-port-(span.rssrctovport)", 4176)
    prop._addConstant("spanRsSrcToVPortDef", "relation-to-span-source-to-port-(span.rssrctovportdef)", 5581)
    prop._addConstant("spanRsVSrcGrpToFilterGrp", "relation-from-vspan-source-grp-to-span-filtergrp-(span.rsvsrcgrptofiltergrp)", 16341)
    prop._addConstant("spanSpanLblDef", "span-label-def.-(span.spanlbldef)", 4157)
    prop._addConstant("spanSpanProv", "span-destination-provider-(span.spanprov)", 4170)
    prop._addConstant("spanTaskParam", "relation-to-span-src-epg-container-(span.taskparam)", 4174)
    prop._addConstant("spanVDestDef", "span-destination-(span.vdestdef)", 4192)
    prop._addConstant("spanVDestGrpDef", "vspan-dest-group-def.-(span.vdestgrpdef)", 4187)
    prop._addConstant("spanVEpgSummaryDef", "copy-of-vspan-epg-summary-definition-(span.vepgsummarydef)", 4193)
    prop._addConstant("spanVSrcDef", "abstract-vspan-source-definition-(span.vsrcdef)", 4179)
    prop._addConstant("spanVSrcGrpDef", "vspan-source-group-def.-(span.vsrcgrpdef)", 4184)
    prop._addConstant("statsDestP", "stats-destination-(stats.destp)", 332)
    prop._addConstant("statsExportP", "export-policy-of-an-user-(stats.exportp)", 331)
    prop._addConstant("statsReportable", "statistics-policy-(stats.reportable)", 54)
    prop._addConstant("stpEntity", "stp-entity-(stp.entity)", 2569)
    prop._addConstant("stpIf", "stp-interface-(stp.if)", 2567)
    prop._addConstant("stpInst", "stp-instance-(stp.inst)", 2570)
    prop._addConstant("syslogRsDestGroup", "relation-to-syslog-destination-group-(syslog.rsdestgroup)", 1714)
    prop._addConstant("syslogSrc", "syslog-source-(syslog.src)", 1713)
    prop._addConstant("tacacsRsDestGroup", "tacacs-destination-group-(tacacs.rsdestgroup)", 11989)
    prop._addConstant("tacacsSrc", "tacacs-source-(tacacs.src)", 11988)
    prop._addConstant("tagAliasDelInst", "deleted-alias-(tag.aliasdelinst)", 1660)
    prop._addConstant("tagAliasInst", "alias-tag-(tag.aliasinst)", 1659)
    prop._addConstant("tagInst", "tag-instance-(tag.inst)", 1658)
    prop._addConstant("unspecified", "unspecified", 0)
    prop._addConstant("vmmAccGrpCont", "access-group-policy-container-(vmm.accgrpcont)", 2168)
    prop._addConstant("vmmAgtStatus", "agent-health-(vmm.agtstatus)", 6005)
    prop._addConstant("vmmAttEntityPCont", "access-group-container-(vmm.attentitypcont)", 2167)
    prop._addConstant("vmmCtrlrP", "vmm-controller-(vmm.ctrlrp)", 2150)
    prop._addConstant("vmmDomP", "vmm-domain-(vmm.domp)", 2136)
    prop._addConstant("vmmDomPDef", "domain-profile-definition-(vmm.dompdef)", 2147)
    prop._addConstant("vmmEpPD", "portgroup-(vmm.eppd)", 2134)
    prop._addConstant("vmmEpValidatorPol", "end-point-validator-policy-(vmm.epvalidatorpol)", 7944)
    prop._addConstant("vmmInjectedCont", "injected-vmm-container-(vmm.injectedcont)", 10844)
    prop._addConstant("vmmInjectedContGrp", "pod-(vmm.injectedcontgrp)", 10848)
    prop._addConstant("vmmInjectedDepl", "deployment-(vmm.injecteddepl)", 10849)
    prop._addConstant("vmmInjectedHost", "node-(vmm.injectedhost)", 10847)
    prop._addConstant("vmmInjectedNs", "namespace-(vmm.injectedns)", 10846)
    prop._addConstant("vmmInjectedOrg", "injected-org-(vmm.injectedorg)", 11549)
    prop._addConstant("vmmInjectedOrgUnit", "injected-org-unit-(vmm.injectedorgunit)", 11550)
    prop._addConstant("vmmInjectedReplSet", "replicaset-(vmm.injectedreplset)", 10850)
    prop._addConstant("vmmInjectedSvc", "service-(vmm.injectedsvc)", 10851)
    prop._addConstant("vmmInjectedSvcEp", "injected-service-endpoint-(vmm.injectedsvcep)", 10853)
    prop._addConstant("vmmInjectedSvcPort", "injected-service-port-(vmm.injectedsvcport)", 10852)
    prop._addConstant("vmmInjectedVm", "vm-(vmm.injectedvm)", 11986)
    prop._addConstant("vmmInjectedVnic", "vm-(vmm.injectedvnic)", 11987)
    prop._addConstant("vmmIntAggr", "internal-end-point-group-aggregator-definition-(vmm.intaggr)", 9378)
    prop._addConstant("vmmIntCustomAggr", "internal-custom-end-point-group-aggregator-definition-(vmm.intcustomaggr)", 10992)
    prop._addConstant("vmmPlInf", "plugin-specific-information-(vmm.plinf)", 5629)
    prop._addConstant("vmmProvP", "provider-profile-(vmm.provp)", 2135)
    prop._addConstant("vmmRsAEP", "pre-provision-aep-(vmm.rsaep)", 6158)
    prop._addConstant("vmmRsAcc", "user-access-profile-(vmm.rsacc)", 2151)
    prop._addConstant("vmmRsCtrlrPMonPol", "monitoring-policy-(vmm.rsctrlrpmonpol)", 2161)
    prop._addConstant("vmmRsDefaultCdpIfPol", "cdp-interface-policy-(vmm.rsdefaultcdpifpol)", 2141)
    prop._addConstant("vmmRsDefaultFwPol", "firewall-policy-(vmm.rsdefaultfwpol)", 6382)
    prop._addConstant("vmmRsDefaultL2InstPol", "l2-instance-policy-(vmm.rsdefaultl2instpol)", 2143)
    prop._addConstant("vmmRsDefaultLacpLagPol", "lacp-policy-(vmm.rsdefaultlacplagpol)", 5266)
    prop._addConstant("vmmRsDefaultLldpIfPol", "lldp-interface-policy-(vmm.rsdefaultlldpifpol)", 2139)
    prop._addConstant("vmmRsDefaultStpIfPol", "stp-interface-policy-(vmm.rsdefaultstpifpol)", 2145)
    prop._addConstant("vmmRsDomMcastAddrNs", "multicast-addr-pool-(vmm.rsdommcastaddrns)", 5197)
    prop._addConstant("vmmRsEncapAllctr", "encap-allocator-(vmm.rsencapallctr)", 8005)
    prop._addConstant("vmmRsMcastAddrNs", "multicast-addr-pool-(vmm.rsmcastaddrns)", 2157)
    prop._addConstant("vmmRsPrefEnhancedLagPol", "relation-to-preferred-enhanced-lag-policy-(vmm.rsprefenhancedlagpol)", 13012)
    prop._addConstant("vmmRsToExtDevMgr", "extern-device-mgr-profile-(vmm.rstoextdevmgr)", 14310)
    prop._addConstant("vmmRsUsrAggrLagPolAtt", "trunk-portgroup-relationship-to-enhanced-lag-policy-(vmm.rsusraggrlagpolatt)", 15531)
    prop._addConstant("vmmRsUsrCustomAggrLagPolAtt", "user-custom-end-point-group-aggregator-relationship-to-enhanced-lag-policy-(vmm.rsusrcustomaggrlagpolatt)", 16561)
    prop._addConstant("vmmRsVmmCtrlrP", "vmm-controller-profile-(vmm.rsvmmctrlrp)", 2153)
    prop._addConstant("vmmRsVswitchExporterPol", "relation-to-vmm-netflow-exporter-policy-(vmm.rsvswitchexporterpol)", 9381)
    prop._addConstant("vmmRsVswitchOverrideCdpIfPol", "relation-to-cdp-interface-policy-(vmm.rsvswitchoverridecdpifpol)", 7783)
    prop._addConstant("vmmRsVswitchOverrideFwPol", "relation-to-firewall-policy-(vmm.rsvswitchoverridefwpol)", 7791)
    prop._addConstant("vmmRsVswitchOverrideLacpPol", "relation-to-lacp-lag-policy-(vmm.rsvswitchoverridelacppol)", 7787)
    prop._addConstant("vmmRsVswitchOverrideLldpIfPol", "relation-to-lldp-interface-policy-(vmm.rsvswitchoverridelldpifpol)", 7781)
    prop._addConstant("vmmRsVswitchOverrideMcpIfPol", "relation-to-mcp-interface-policy-(vmm.rsvswitchoverridemcpifpol)", 7785)
    prop._addConstant("vmmRsVswitchOverrideMtuPol", "relation-to-mtu-policy-(vmm.rsvswitchoverridemtupol)", 17477)
    prop._addConstant("vmmRsVswitchOverrideStpPol", "relation-to-stp-policy-(vmm.rsvswitchoverridestppol)", 7789)
    prop._addConstant("vmmRsVxlanNs", "vxlan-pool-(vmm.rsvxlanns)", 2155)
    prop._addConstant("vmmUsrAggr", "user-configurable-end-point-group-aggregator-definition-(vmm.usraggr)", 9377)
    prop._addConstant("vmmUsrCustomAggr", "user-custom-end-point-group-aggregator-definition-(vmm.usrcustomaggr)", 10991)
    prop._addConstant("vmmVSwitchPolicyCont", "vswitch-policy-group-(vmm.vswitchpolicycont)", 7780)
    meta.props.add("scope", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    meta.namingProps.append(getattr(meta.props, "scope"))

    def __init__(self, parentMoOrDn, scope, markDirty=True, **creationProps):
        namingVals = [scope]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

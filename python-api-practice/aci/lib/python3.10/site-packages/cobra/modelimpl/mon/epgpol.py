# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class EPGPol(Mo):
    """
    Creates a container for monitoring policies associated with the tenant. This allows you to apply tenant-specific policies related to Stats Collection, Stats Export, Callhome/SNMP/Syslog, Event Severities, Fault Severities, and Fault Lifecycles.

    """

    meta = ClassMeta("cobra.model.mon.EPGPol")

    meta.moClassName = "monEPGPol"
    meta.rnFormat = "monepg-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Monitoring Policy"
    meta.writeAccessMask = 0x800000000200001
    meta.readAccessMask = 0x8801c0000203601
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.LcP")
    meta.childClasses.add("cobra.model.stats.HierColl")
    meta.childClasses.add("cobra.model.mon.RtMonPolIfPolCons")
    meta.childClasses.add("cobra.model.mon.RtMonPolRefEvent")
    meta.childClasses.add("cobra.model.mon.RtApMonPol")
    meta.childClasses.add("cobra.model.mon.RtCtxMonPol")
    meta.childClasses.add("cobra.model.mon.RtEppToMonPol")
    meta.childClasses.add("cobra.model.mon.RtAEPgMonPol")
    meta.childClasses.add("cobra.model.syslog.Src")
    meta.childClasses.add("cobra.model.statslimit.InstLimitPol")
    meta.childClasses.add("cobra.model.mon.RtToRemoteMonPol")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.mon.RtMonPolLocalRefEvent")
    meta.childClasses.add("cobra.model.stats.ExportP")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.callhome.Src")
    meta.childClasses.add("cobra.model.mon.RtMonPolRef")
    meta.childClasses.add("cobra.model.callhome.SmartSrc")
    meta.childClasses.add("cobra.model.mon.RtTenantMonPol")
    meta.childClasses.add("cobra.model.mon.EPGTarget")
    meta.childClasses.add("cobra.model.snmp.Src")
    meta.childClasses.add("cobra.model.tacacs.Src")
    meta.childClasses.add("cobra.model.mon.RtMonPolModulePolCons")
    meta.childClasses.add("cobra.model.mon.RtMonPolSystemPolCons")
    meta.childClasses.add("cobra.model.mon.RtABDPolMonPol")

    meta.childNamesAndRnPrefix.append(("cobra.model.mon.RtMonPolLocalRefEvent", "rtfaultMonPolLocalRefEvent-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mon.RtMonPolModulePolCons", "rteqptMonPolModulePolCons-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mon.RtMonPolSystemPolCons", "rttopMonPolSystemPolCons-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mon.RtMonPolRefEvent", "rtfaultMonPolRefEvent-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mon.RtMonPolIfPolCons", "rtl1MonPolIfPolCons-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mon.RtToRemoteMonPol", "rtfvToRemoteMonPol-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mon.RtTenantMonPol", "rtfvTenantMonPol-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mon.RtABDPolMonPol", "rtfvABDPolMonPol-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mon.RtEppToMonPol", "rtfvEppToMonPol-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mon.RtAEPgMonPol", "rtfvAEPgMonPol-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mon.RtMonPolRef", "rtpolMonPolRef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mon.RtCtxMonPol", "rtfvCtxMonPol-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mon.RtApMonPol", "rtfvApMonPol-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.callhome.SmartSrc", "smartchsrc"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tacacs.Src", "tacacssrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.statslimit.InstLimitPol", "limitpol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.snmp.Src", "snmpsrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mon.EPGTarget", "tarepg-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.syslog.Src", "slsrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.callhome.Src", "chsrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.LcP", "flcp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.stats.HierColl", "coll-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.stats.ExportP", "exp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.fv.Tenant")

    meta.superClasses.add("cobra.model.mon.Pol")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Def")
    meta.superClasses.add("cobra.model.naming.NamedObject")

    meta.rnPrefixes = [
        ('monepg-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 37295, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 5579, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 39434, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 13797, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 6939, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15230, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15231, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToHcloudIgw", "Tenant to IGW", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToHcloudSecurityGroup", "Tenant to Security Group", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToVzCPIf", "Tenant to vzCPIf", "cobra.model.vz.CPIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToVzFilter", "From fvTenant to vzFilter", "cobra.model.vz.Filter"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToVnsAbsGraph", "From fvTenant to vnsAbsGraph", "cobra.model.vns.AbsGraph"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToCloudLB", "From fvTenant to cloudLB", "cobra.model.cloud.LB"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToCloudZone", "From fvTenant to cloudZone", "cobra.model.cloud.Zone"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudCtxProfile", "Tenant to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToVzBrCP", "Tenant to vzBrCP", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHcloudCsr", "Tenant to hcloudCsr", "cobra.model.hcloud.Csr"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudExtEPg", "fv:Tenant to cloud:ExtEPg", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudRegion", "From fvTenant to cloudRegion", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHcloudRegion", "Tenant to hcloudRegion", "cobra.model.hcloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToFvCtx", "fvTenant to fvCtx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHcloudCtx", "Tenant to Hcloud context", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHCloudEndPoint", "Tenant to hcloudEndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudApp", "Tenant to Application profile", "cobra.model.cloud.App"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudEPg", "Tenant to cloud EPg", "cobra.model.cloud.EPg"))

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

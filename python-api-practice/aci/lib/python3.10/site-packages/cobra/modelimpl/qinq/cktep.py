# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class CktEp(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.qinq.CktEp")

    meta.moClassName = "qinqCktEp"
    meta.rnFormat = "qinq-[%(encap)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Vlan"
    meta.writeAccessMask = 0x200000000001
    meta.readAccessMask = 0x208000020001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.l2.RsDot1pRuleAtt")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.epm.DynEpgPolicyTrig")
    meta.childClasses.add("cobra.model.l2.IngrBytesHist5min")
    meta.childClasses.add("cobra.model.l2.IngrBytesHist1w")
    meta.childClasses.add("cobra.model.l2.IngrPkts1mo")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.l2.EgrPkts1mo")
    meta.childClasses.add("cobra.model.l2.EgrBytesHist5min")
    meta.childClasses.add("cobra.model.l2.IngrPktsHist5min")
    meta.childClasses.add("cobra.model.l2.EgrBytes1mo")
    meta.childClasses.add("cobra.model.l2.RtSpanSrcToL2CktEpAtt")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.l2.RsDscpRuleAtt")
    meta.childClasses.add("cobra.model.l2.IngrBytesHist1d")
    meta.childClasses.add("cobra.model.l2.IngrBytes1mo")
    meta.childClasses.add("cobra.model.l2.IngrPktsHist1year")
    meta.childClasses.add("cobra.model.l2.IngrPktsHist1qtr")
    meta.childClasses.add("cobra.model.l2.IngrBytesHist1h")
    meta.childClasses.add("cobra.model.l2.EgrPktsHist5min")
    meta.childClasses.add("cobra.model.l2.EgrBytes1qtr")
    meta.childClasses.add("cobra.model.l2.RsPathDomAtt")
    meta.childClasses.add("cobra.model.l2.IngrBytesHist1mo")
    meta.childClasses.add("cobra.model.l2.IngrBytesHist1year")
    meta.childClasses.add("cobra.model.l2.EgrBytes5min")
    meta.childClasses.add("cobra.model.l2.IngrBytes1w")
    meta.childClasses.add("cobra.model.l2.EgrBytes1year")
    meta.childClasses.add("cobra.model.l2.IngrBytes15min")
    meta.childClasses.add("cobra.model.qinq.RsQinqEppAtt")
    meta.childClasses.add("cobra.model.l2.EgrPktsHist15min")
    meta.childClasses.add("cobra.model.l2.IngrBytesHist1qtr")
    meta.childClasses.add("cobra.model.epm.Db")
    meta.childClasses.add("cobra.model.l2.IngrBytes1h")
    meta.childClasses.add("cobra.model.l2.IngrBytes1d")
    meta.childClasses.add("cobra.model.l2.EgrBytesHist15min")
    meta.childClasses.add("cobra.model.l2.EgrPktsHist1mo")
    meta.childClasses.add("cobra.model.l2.EpScanInfo")
    meta.childClasses.add("cobra.model.l2.EgrPktsHist1qtr")
    meta.childClasses.add("cobra.model.l2.EgrBytesHist1h")
    meta.childClasses.add("cobra.model.l2.EgrBytesHist1mo")
    meta.childClasses.add("cobra.model.l2.EgrPkts15min")
    meta.childClasses.add("cobra.model.l2.IngrPktsHist1mo")
    meta.childClasses.add("cobra.model.l2.RtDomIfConn")
    meta.childClasses.add("cobra.model.l2.IngrPkts1qtr")
    meta.childClasses.add("cobra.model.l2.EgrPktsHist1w")
    meta.childClasses.add("cobra.model.l2.EgrBytes15min")
    meta.childClasses.add("cobra.model.l2.IngrPkts15min")
    meta.childClasses.add("cobra.model.l2.EgrBytesHist1d")
    meta.childClasses.add("cobra.model.l2.IngrBytes5min")
    meta.childClasses.add("cobra.model.l2.EgrPktsHist1year")
    meta.childClasses.add("cobra.model.l2.IngrBytes1year")
    meta.childClasses.add("cobra.model.l2.IngrPktsHist1w")
    meta.childClasses.add("cobra.model.l2.EgrPktsHist1h")
    meta.childClasses.add("cobra.model.l2.EgrPktsHist1d")
    meta.childClasses.add("cobra.model.l2.EgrBytesHist1w")
    meta.childClasses.add("cobra.model.l2.EgrBytesHist1year")
    meta.childClasses.add("cobra.model.l2.IngrPktsHist15min")
    meta.childClasses.add("cobra.model.l2.EgrBytes1d")
    meta.childClasses.add("cobra.model.l2.EgrPkts1year")
    meta.childClasses.add("cobra.model.l2.IngrPkts1d")
    meta.childClasses.add("cobra.model.l2.IngrPkts5min")
    meta.childClasses.add("cobra.model.l2.IngrBytesHist15min")
    meta.childClasses.add("cobra.model.l2.IngrPkts1h")
    meta.childClasses.add("cobra.model.l2.IngrPktsHist1h")
    meta.childClasses.add("cobra.model.l2.IngrBytes1qtr")
    meta.childClasses.add("cobra.model.l2.EgrBytesHist1qtr")
    meta.childClasses.add("cobra.model.l2.EgrBytes1h")
    meta.childClasses.add("cobra.model.l2.EgrPkts1w")
    meta.childClasses.add("cobra.model.l2.EgrPkts5min")
    meta.childClasses.add("cobra.model.l2.IngrPktsHist1d")
    meta.childClasses.add("cobra.model.l2.EgrPkts1h")
    meta.childClasses.add("cobra.model.l2.EgrBytes1w")
    meta.childClasses.add("cobra.model.l2.EgrPkts1qtr")
    meta.childClasses.add("cobra.model.l2.MacEp")
    meta.childClasses.add("cobra.model.l2.RtEPgDefToL2Dom")
    meta.childClasses.add("cobra.model.l2.IngrPkts1w")
    meta.childClasses.add("cobra.model.l2.IngrPkts1year")
    meta.childClasses.add("cobra.model.l2.EgrPkts1d")

    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RtSpanSrcToL2CktEpAtt", "rtspanSpanSrcToL2CktEpAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrBytesHist1year", "HDl2IngrBytes1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrBytesHist15min", "HDl2IngrBytes15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrBytesHist5min", "HDl2IngrBytes5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrPktsHist1year", "HDl2IngrPkts1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrBytes15min", "CDl2IngrBytes15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrBytesHist1qtr", "HDl2IngrBytes1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrBytesHist15min", "HDl2EgrBytes15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrBytes1year", "CDl2IngrBytes1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrBytesHist1year", "HDl2EgrBytes1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrPktsHist15min", "HDl2IngrPkts15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RtEPgDefToL2Dom", "rtfvEPgDefToL2Dom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrBytesHist5min", "HDl2EgrBytes5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrPktsHist5min", "HDl2IngrPkts5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrPktsHist1qtr", "HDl2IngrPkts1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrBytesHist1mo", "HDl2IngrBytes1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrBytes1year", "CDl2EgrBytes1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrPktsHist15min", "HDl2EgrPkts15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrBytes15min", "CDl2EgrBytes15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrPkts15min", "CDl2IngrPkts15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrBytes5min", "CDl2IngrBytes5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrPktsHist1year", "HDl2EgrPkts1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrBytes1qtr", "CDl2IngrBytes1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrBytesHist1qtr", "HDl2EgrBytes1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrPkts1year", "CDl2IngrPkts1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.epm.DynEpgPolicyTrig", "dynepgpolicytrig"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrBytesHist1w", "HDl2IngrBytes1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrBytesHist1d", "HDl2IngrBytes1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrBytes1mo", "CDl2IngrBytes1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrBytesHist1h", "HDl2IngrBytes1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrPktsHist5min", "HDl2EgrPkts5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrBytes1qtr", "CDl2EgrBytes1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrBytes5min", "CDl2EgrBytes5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrPktsHist1qtr", "HDl2EgrPkts1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrBytesHist1mo", "HDl2EgrBytes1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrPkts15min", "CDl2EgrPkts15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrPktsHist1mo", "HDl2IngrPkts1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrPkts1qtr", "CDl2IngrPkts1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrPkts1year", "CDl2EgrPkts1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrPkts5min", "CDl2IngrPkts5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RsDot1pRuleAtt", "rsdot1pRuleAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrPkts1mo", "CDl2IngrPkts1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrBytes1mo", "CDl2EgrBytes1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrBytes1w", "CDl2IngrBytes1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrBytes1h", "CDl2IngrBytes1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrBytes1d", "CDl2IngrBytes1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrPktsHist1mo", "HDl2EgrPkts1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrBytesHist1h", "HDl2EgrBytes1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrBytesHist1d", "HDl2EgrBytes1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrPktsHist1w", "HDl2IngrPkts1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrBytesHist1w", "HDl2EgrBytes1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrPktsHist1h", "HDl2IngrPkts1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrPkts5min", "CDl2EgrPkts5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrPktsHist1d", "HDl2IngrPkts1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrPkts1qtr", "CDl2EgrPkts1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrPkts1mo", "CDl2EgrPkts1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RsDscpRuleAtt", "rsdscpRuleAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RtDomIfConn", "rtfvDomIfConn-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrPktsHist1w", "HDl2EgrPkts1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrPktsHist1h", "HDl2EgrPkts1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrPktsHist1d", "HDl2EgrPkts1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrBytes1d", "CDl2EgrBytes1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrPkts1d", "CDl2IngrPkts1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrPkts1h", "CDl2IngrPkts1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrBytes1h", "CDl2EgrBytes1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrBytes1w", "CDl2EgrBytes1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.IngrPkts1w", "CDl2IngrPkts1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RsPathDomAtt", "rspathDomAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qinq.RsQinqEppAtt", "rsqinqEppAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrPkts1w", "CDl2EgrPkts1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrPkts1h", "CDl2EgrPkts1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EgrPkts1d", "CDl2EgrPkts1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.EpScanInfo", "epsScanInfo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.MacEp", "mac-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.epm.Db", "db-"))

    meta.parentClasses.add("cobra.model.l2.BD")

    meta.superClasses.add("cobra.model.l2.ADom")
    meta.superClasses.add("cobra.model.l2.Dom")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.l2.CktEp")
    meta.superClasses.add("cobra.model.nw.FwDom")
    meta.superClasses.add("cobra.model.nw.GEp")

    meta.rnPrefixes = [
        ('qinq-', True),
    ]

    prop = PropMeta("str", "adminSt", "adminSt", 3565, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "active"
    prop._addConstant("active", "active", 2)
    prop._addConstant("suspend", "suspend", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "allowUsegUnsupported", "allowUsegUnsupported", 27640, PropCategory.REGULAR)
    prop.label = "Indicates whether allowUseg is unsupported in a platform"
    prop.isOper = True
    meta.props.add("allowUsegUnsupported", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "classPrefOperSt", "classPrefOperSt", 33200, PropCategory.REGULAR)
    prop.label = "Classification Preference Operational State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "encap"
    prop._addConstant("encap", "packet-encapsulation", 0)
    prop._addConstant("useg", "useg", 1)
    meta.props.add("classPrefOperSt", prop)

    prop = PropMeta("str", "createTs", "createTs", 3567, PropCategory.REGULAR)
    prop.label = "Creation Timestamp"
    prop.isOper = True
    meta.props.add("createTs", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 16219, PropCategory.REGULAR)
    prop.label = "Controls"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("anchor", "anchor-bd-floating-l3out", 128)
    prop._addConstant("en_ivxlan_dl", "enable-ivxlan-dont-learn-bit", 32)
    prop._addConstant("isolated", "intra-epg-deny-enforced", 4)
    prop._addConstant("non-anchor", "non-anchor-bd-floating-l3out", 256)
    prop._addConstant("none", "none", 0)
    prop._addConstant("policy-enforced", "policy-enforced", 2)
    prop._addConstant("qiq", "qiq", 16)
    prop._addConstant("service-ep", "service-ep", 8)
    prop._addConstant("transparent-ep", "transparent-ep", 64)
    prop._addConstant("untagged", "untagged", 1)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "encap", "encap", 33202, PropCategory.REGULAR)
    prop.label = "Encapsulation"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("encap", prop)

    prop = PropMeta("str", "enfPref", "enfPref", 3575, PropCategory.REGULAR)
    prop.label = "Switching Preference"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "hw"
    prop._addConstant("hw", "hardware", 2)
    prop._addConstant("sw", "software", 1)
    prop._addConstant("unknown", "unknwon", 3)
    meta.props.add("enfPref", prop)

    prop = PropMeta("str", "epUpSeqNum", "epUpSeqNum", 20274, PropCategory.REGULAR)
    prop.label = "EP Update Sequence Number"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("epUpSeqNum", prop)

    prop = PropMeta("str", "epgDn", "epgDn", 18038, PropCategory.REGULAR)
    prop.label = "EPG DN"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("epgDn", prop)

    prop = PropMeta("str", "fabEncap", "fabEncap", 33197, PropCategory.REGULAR)
    prop.label = "Fabric Encapsulation"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("fabEncap", prop)

    prop = PropMeta("str", "floodInEncapUnsupported", "floodInEncapUnsupported", 35663, PropCategory.REGULAR)
    prop.label = "Indicates whether floodInEncap is unsupported in a platform"
    prop.isOper = True
    meta.props.add("floodInEncapUnsupported", prop)

    prop = PropMeta("str", "fwdCtrl", "fwdCtrl", 27137, PropCategory.REGULAR)
    prop.label = "Forwarding Controls"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "mdst-flood"
    prop._addConstant("arp-flood", "enable-arp-flooding", 2)
    prop._addConstant("copy-service", "enable-copy-service-on-bd", 64)
    prop._addConstant("encap-flood", "flood-in-encapsulation", 256)
    prop._addConstant("ip-learn-disable", "disable-ip-learning", 8)
    prop._addConstant("ip-learn-subnet-check", "enable-ip-learn-subnet-check", 4)
    prop._addConstant("mac-flush-on-vpc-delete", "delete-vpc-mac-addressesfrom-fabric-on-ep-delete", 128)
    prop._addConstant("mac-learn-disable", "disable-mac-learning", 16)
    prop._addConstant("mdst-flood", "enable-multi-destination-flooding", 1)
    prop._addConstant("ng-avs", "learn-feature-for-avs", 512)
    prop._addConstant("proxy-arp", "enable-proxy-arp-on-epg", 32)
    meta.props.add("fwdCtrl", prop)

    prop = PropMeta("str", "hwId", "hwId", 3563, PropCategory.REGULAR)
    prop.label = "Hardware Resource ID"
    prop.isOper = True
    prop.range = [(1, 4096)]
    meta.props.add("hwId", prop)

    prop = PropMeta("str", "id", "id", 3562, PropCategory.REGULAR)
    prop.label = "Domain ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.range = [(1, 4096)]
    meta.props.add("id", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 3564, PropCategory.REGULAR)
    prop.label = "Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "CE"
    prop._addConstant("CE", "ce", 1)
    prop._addConstant("FabricPath", "fabricpath", 2)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 33208, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 16433, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operSt", "operSt", 3566, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "down"
    prop._addConstant("down", "down", 2)
    prop._addConstant("up", "up", 1)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "operStQual", "operStQual", 33199, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("Invalid", "invalid-parameters", 3)
    prop._addConstant("hwprog-fail", "hardware-programming-failed", 1)
    prop._addConstant("max-sp-classes-exceeded", "max-strict-priority-classes-exceeded", 2)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("operStQual", prop)

    prop = PropMeta("str", "operState", "operState", 33198, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("operState", prop)

    prop = PropMeta("str", "pcTag", "pcTag", 3576, PropCategory.REGULAR)
    prop.label = "PC Tag"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("any", "any", 0)
    meta.props.add("pcTag", prop)

    prop = PropMeta("str", "proxyArpUnsupported", "proxyArpUnsupported", 27641, PropCategory.REGULAR)
    prop.label = "Indicates whether proxyArp is unsupported in a platform"
    prop.isOper = True
    meta.props.add("proxyArpUnsupported", prop)

    prop = PropMeta("str", "qosPrio", "qosPrio", 3577, PropCategory.REGULAR)
    prop.label = "Qos Priority"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 9)]
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("level1", "level1", 3)
    prop._addConstant("level2", "level2", 2)
    prop._addConstant("level3", "level3-(default)", 1)
    prop._addConstant("level4", "level4", 9)
    prop._addConstant("level5", "level5", 8)
    prop._addConstant("level6", "level6", 7)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("qosPrio", prop)

    prop = PropMeta("str", "qosmCfgFailedBmp", "qosmCfgFailedBmp", 33209, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("qinq:CktEpadminSt_failed_flag", None, 2)
    prop._addConstant("qinq:CktEpclassPrefOperSt_failed_flag", None, 8388608)
    prop._addConstant("qinq:CktEpctrl_failed_flag", None, 8)
    prop._addConstant("qinq:CktEpencap_failed_flag", None, 65536)
    prop._addConstant("qinq:CktEpenfPref_failed_flag", None, 131072)
    prop._addConstant("qinq:CktEpepUpSeqNum_failed_flag", None, 16)
    prop._addConstant("qinq:CktEpepgDn_failed_flag", None, 262144)
    prop._addConstant("qinq:CktEpfabEncap_failed_flag", None, 16777216)
    prop._addConstant("qinq:CktEpfwdCtrl_failed_flag", None, 32)
    prop._addConstant("qinq:CktEpid_failed_flag", None, 128)
    prop._addConstant("qinq:CktEplcOwn_failed_flag", None, -9223372036854775808)
    prop._addConstant("qinq:CktEpmodTs_failed_flag", None, 2305843009213693952)
    prop._addConstant("qinq:CktEpmode_failed_flag", None, 256)
    prop._addConstant("qinq:CktEpmonPolDn_failed_flag", None, 33554432)
    prop._addConstant("qinq:CktEpname_failed_flag", None, 1)
    prop._addConstant("qinq:CktEppcTag_failed_flag", None, 1048576)
    prop._addConstant("qinq:CktEpqosPrio_failed_flag", None, 4194304)
    prop._addConstant("qinq:CktEptype_failed_flag", None, 1024)
    meta.props.add("qosmCfgFailedBmp", prop)

    prop = PropMeta("str", "qosmCfgFailedTs", "qosmCfgFailedTs", 33211, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("qosmCfgFailedTs", prop)

    prop = PropMeta("str", "qosmCfgState", "qosmCfgState", 33210, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("qosmCfgState", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "type", "type", 3561, PropCategory.REGULAR)
    prop.label = "Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "bd-regular"
    prop._addConstant("bd-control", "bd-control", 3)
    prop._addConstant("bd-external", "bd-external", 4)
    prop._addConstant("bd-fcoe", "bd-fcoe", 7)
    prop._addConstant("bd-regular", "bd-regular", 1)
    prop._addConstant("bd-reserved", "bd-reserved", 2)
    prop._addConstant("ckt-vlan", "vlan-circuit", 5)
    prop._addConstant("ckt-vxlan", "vxlan-circuit", 6)
    meta.props.add("type", prop)

    prop = PropMeta("str", "vlanmgrCfgFailedBmp", "vlanmgrCfgFailedBmp", 14927, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("vlanmgrCfgFailedBmp", prop)

    prop = PropMeta("str", "vlanmgrCfgFailedTs", "vlanmgrCfgFailedTs", 14929, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("vlanmgrCfgFailedTs", prop)

    prop = PropMeta("str", "vlanmgrCfgState", "vlanmgrCfgState", 14928, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("vlanmgrCfgState", prop)

    prop = PropMeta("str", "vlanmgrCustFaultBmp", "vlanmgrCustFaultBmp", 35424, PropCategory.REGULAR)
    prop.label = "vlan custom fault"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("dtag-platform-unsupported", "qinq-to-epg-translation-not-supported", 1)
    prop._addConstant("l3vif-platform-unsupported", "l3-external-virtual-if-not-supported", 2)
    prop._addConstant("none", "none", 0)
    meta.props.add("vlanmgrCustFaultBmp", prop)

    meta.namingProps.append(getattr(meta.props, "encap"))
    getattr(meta.props, "encap").needDelimiter = True

    def __init__(self, parentMoOrDn, encap, markDirty=True, **creationProps):
        namingVals = [encap]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

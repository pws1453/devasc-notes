# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class If(Mo):
    """
    The per ND protocol interface information.

    """

    meta = ClassMeta("cobra.model.nd.If")

    meta.moClassName = "ndIf"
    meta.rnFormat = "if-[%(id)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Neighbor Discovery Interface"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.nd.StAdjEp")
    meta.childClasses.add("cobra.model.nd.IfStats")
    meta.childClasses.add("cobra.model.nd.Pfx")
    meta.childClasses.add("cobra.model.nw.RtPathToIf")

    meta.childNamesAndRnPrefix.append(("cobra.model.nw.RtPathToIf", "rtpathToIf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nd.IfStats", "ifstats"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nd.StAdjEp", "sadj-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nd.Pfx", "pfx-"))

    meta.parentClasses.add("cobra.model.nd.Dom")

    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.l3.ProtIf")
    meta.superClasses.add("cobra.model.nw.If")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.LogicalIf")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.ProtIf")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.rnPrefixes = [
        ('if-', True),
    ]

    prop = PropMeta("str", "adminSt", "adminSt", 3674, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 17079, PropCategory.REGULAR)
    prop.label = "Controls"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("managed-cfg", "managed-config", 2)
    prop._addConstant("other-cfg", "other-config", 4)
    prop._addConstant("suppress-ra", "suppress-ra", 8)
    prop._addConstant("suppress-ra-mtu", "suppress-ra-mtu", 16)
    prop._addConstant("unsolicit-na-glean", "unsolicit-na-glean", 32)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "descr", "descr", 5585, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "hopLimit", "hopLimit", 17084, PropCategory.REGULAR)
    prop.label = "Hop limit"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 255)]
    prop.defaultValue = 64
    prop.defaultValueStr = "64"
    meta.props.add("hopLimit", prop)

    prop = PropMeta("str", "id", "id", 6944, PropCategory.REGULAR)
    prop.label = "Interface ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14458, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "mtu", "mtu", 17085, PropCategory.REGULAR)
    prop.label = "MTU"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1280, 9000)]
    prop.defaultValue = 9000
    prop.defaultValueStr = "9000"
    meta.props.add("mtu", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "nsIntvl", "nsIntvl", 17080, PropCategory.REGULAR)
    prop.label = "Neighbor Solicit Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1000, 3600000)]
    prop.defaultValue = 1000
    prop.defaultValueStr = "1000"
    meta.props.add("nsIntvl", prop)

    prop = PropMeta("str", "nsRetries", "nsRetries", 17081, PropCategory.REGULAR)
    prop.label = "Neighbor Solicit Retry count"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 100)]
    prop.defaultValue = 3
    prop.defaultValueStr = "3"
    meta.props.add("nsRetries", prop)

    prop = PropMeta("str", "raIntvl", "raIntvl", 17082, PropCategory.REGULAR)
    prop.label = "Router Advertisement Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(200, 1800)]
    prop.defaultValue = 600
    prop.defaultValueStr = "600"
    meta.props.add("raIntvl", prop)

    prop = PropMeta("str", "raIntvlMin", "raIntvlMin", 17083, PropCategory.REGULAR)
    prop.label = "Router Advertisement Interval Minimum"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 1800)]
    prop.defaultValue = 200
    prop.defaultValueStr = "200"
    meta.props.add("raIntvlMin", prop)

    prop = PropMeta("str", "raLifetime", "raLifetime", 17086, PropCategory.REGULAR)
    prop.label = "Router Advertisement lifetime"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 9000)]
    prop.defaultValue = 1800
    prop.defaultValueStr = "1800"
    meta.props.add("raLifetime", prop)

    prop = PropMeta("str", "reachableTime", "reachableTime", 17087, PropCategory.REGULAR)
    prop.label = "Reachable time"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 3600000)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("reachableTime", prop)

    prop = PropMeta("str", "retransTimer", "retransTimer", 17088, PropCategory.REGULAR)
    prop.label = "Retransmit timer"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 4294967295)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("retransTimer", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "id"))
    getattr(meta.props, "id").needDelimiter = True

    meta.deploymentCategory = DeploymentCategory("interface", "Interface")
    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

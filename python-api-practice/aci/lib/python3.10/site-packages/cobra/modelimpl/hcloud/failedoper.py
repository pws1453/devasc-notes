# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class FailedOper(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.hcloud.FailedOper")

    meta.moClassName = "hcloudFailedOper"
    meta.rnFormat = "failedoper-[%(configDn)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "None"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1002101
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.hcloud.RsSubnetToRTOper")
    meta.childClasses.add("cobra.model.hcloud.IgwOper")
    meta.childClasses.add("cobra.model.hcloud.ListenerCertificateOper")
    meta.childClasses.add("cobra.model.hcloud.CidrOper")
    meta.childClasses.add("cobra.model.hcloud.TargetGroupOper")
    meta.childClasses.add("cobra.model.hcloud.CsrSummaryOper")
    meta.childClasses.add("cobra.model.hcloud.ConfigTaskError")
    meta.childClasses.add("cobra.model.hcloud.ResourceGroupOper")
    meta.childClasses.add("cobra.model.hcloud.EvAppDeployError")
    meta.childClasses.add("cobra.model.hcloud.SGRuleGroupOper")
    meta.childClasses.add("cobra.model.hcloud.EventTaskError")
    meta.childClasses.add("cobra.model.hcloud.RouteTableOper")
    meta.childClasses.add("cobra.model.hcloud.AzureInventoryTaskError")
    meta.childClasses.add("cobra.model.hcloud.IpIngressRuleOper")
    meta.childClasses.add("cobra.model.hcloud.AvailabilitySetOper")
    meta.childClasses.add("cobra.model.hcloud.EvRGDeployError")
    meta.childClasses.add("cobra.model.hcloud.DiskOper")
    meta.childClasses.add("cobra.model.hcloud.IpEgressRuleOper")
    meta.childClasses.add("cobra.model.hcloud.InstanceOper")
    meta.childClasses.add("cobra.model.hcloud.CertificateOper")
    meta.childClasses.add("cobra.model.hcloud.S3Error")
    meta.childClasses.add("cobra.model.hcloud.SubnetNsgAttachOper")
    meta.childClasses.add("cobra.model.hcloud.AvailZoneOper")
    meta.childClasses.add("cobra.model.hcloud.RsEpToSecurityGroupOper")
    meta.childClasses.add("cobra.model.hcloud.RsVpnConnToCgwOper")
    meta.childClasses.add("cobra.model.hcloud.EvAlertDeployError")
    meta.childClasses.add("cobra.model.hcloud.FlowLogOper")
    meta.childClasses.add("cobra.model.hcloud.FailedStatDiagOper")
    meta.childClasses.add("cobra.model.hcloud.LogGrpOper")
    meta.childClasses.add("cobra.model.hcloud.CtxPeeringOper")
    meta.childClasses.add("cobra.model.hcloud.SgEgressRuleOper")
    meta.childClasses.add("cobra.model.hcloud.RtSelectorToTagParent")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.hcloud.EvNsDeployError")
    meta.childClasses.add("cobra.model.hcloud.ListenerOper")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.hcloud.CweError")
    meta.childClasses.add("cobra.model.hcloud.InventoryTaskError")
    meta.childClasses.add("cobra.model.hcloud.NativeLBOper")
    meta.childClasses.add("cobra.model.hcloud.ListenerRuleOper")
    meta.childClasses.add("cobra.model.hcloud.SubnetOper")
    meta.childClasses.add("cobra.model.hcloud.RouteTableEntryOper")
    meta.childClasses.add("cobra.model.hcloud.ListenerRulePriorityOper")
    meta.childClasses.add("cobra.model.hcloud.GarbageCollectorError")
    meta.childClasses.add("cobra.model.hcloud.SgIngressRuleOper")
    meta.childClasses.add("cobra.model.hcloud.CtError")
    meta.childClasses.add("cobra.model.hcloud.IpOper")
    meta.childClasses.add("cobra.model.hcloud.RegionOper")
    meta.childClasses.add("cobra.model.hcloud.GenericError")
    meta.childClasses.add("cobra.model.hcloud.EndPointOper")
    meta.childClasses.add("cobra.model.hcloud.SqsError")
    meta.childClasses.add("cobra.model.hcloud.TargetOper")
    meta.childClasses.add("cobra.model.hcloud.CgwOper")
    meta.childClasses.add("cobra.model.hcloud.CtxOper")
    meta.childClasses.add("cobra.model.hcloud.VgwOper")
    meta.childClasses.add("cobra.model.hcloud.AccountOper")
    meta.childClasses.add("cobra.model.hcloud.ZoneMappingOper")
    meta.childClasses.add("cobra.model.hcloud.SecurityGroupOper")

    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.RtSelectorToTagParent", "rtselectorToTagParent-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.ListenerRulePriorityOper", "listenruleprioper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.TargetGroupOper", "targetgroupoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.CertificateOper", "certificateoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.CtxPeeringOper", "ctxpeeringoper-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.ListenerCertificateOper", "listencertoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.RouteTableOper", "routetableoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.ListenerRuleOper", "listenruleoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.IpIngressRuleOper", "ipingressoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.SubnetNsgAttachOper", "nsgattachoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.RsVpnConnToCgwOper", "rvpntocgwoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.SgIngressRuleOper", "sgingressoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.RsSubnetToRTOper", "rsubtortoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.AvailabilitySetOper", "availsetoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.IpEgressRuleOper", "ipegressoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.EvAlertDeployError", "evalerterror"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.SgEgressRuleOper", "sgegressoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.ListenerOper", "listeneroper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.NativeLBOper", "nativelboper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.GenericError", "genericerror"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.ConfigTaskError", "cfgtaskerr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.AzureInventoryTaskError", "invtaskerr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.FlowLogOper", "flowlogoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.RouteTableEntryOper", "rtentryoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.EvAppDeployError", "evapperror"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.EventTaskError", "evttaskerr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.LogGrpOper", "loggrpoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.InventoryTaskError", "invtaskerr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.SubnetOper", "subnetoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.RegionOper", "regionoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.TargetOper", "targetOper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.SecurityGroupOper", "sgroupoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.SGRuleGroupOper", "operrules"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.EvRGDeployError", "evrgerror"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.FailedStatDiagOper", "diagoper-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.EvNsDeployError", "evnserror"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.CidrOper", "cidroper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.DiskOper", "diskoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.InstanceOper", "instoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.AvailZoneOper", "zoneoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.RsEpToSecurityGroupOper", "epsgoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.CweError", "cweerror"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.SqsError", "sqserror"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.AccountOper", "acctoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.ZoneMappingOper", "zonemap-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.IgwOper", "igwoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.ResourceGroupOper", "rgoper-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.S3Error", "s3error"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.CtError", "cterror"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.IpOper", "operip-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.CgwOper", "cgwoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.CtxOper", "ctxoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.VgwOper", "vgwoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.EndPointOper", "epoper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.GarbageCollectorError", "cgerr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.CsrSummaryOper", "oper"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.hcloud.FailedOperHolder")

    meta.superClasses.add("cobra.model.hcloud.ACloudBase")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")

    meta.rnPrefixes = [
        ('failedoper-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "configDn", "configDn", 54118, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("configDn", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 50278, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 50279, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "configDn"))
    getattr(meta.props, "configDn").needDelimiter = True

    def __init__(self, parentMoOrDn, configDn, markDirty=True, **creationProps):
        namingVals = [configDn]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

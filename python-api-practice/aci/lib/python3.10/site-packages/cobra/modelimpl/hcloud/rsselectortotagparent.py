# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class RsSelectorToTagParent(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = SourceRelationMeta("cobra.model.hcloud.RsSelectorToTagParent", "cobra.model.hcloud.ACloudBase")
    meta.cardinality = SourceRelationMeta.N_TO_M

    meta.moClassName = "hcloudRsSelectorToTagParent"
    meta.rnFormat = "rsselectorToTagParent-[%(tDn)s]"
    meta.category = MoCategory.RELATIONSHIP_TO_LOCAL
    meta.label = "sel-to-tagparent"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))

    meta.parentClasses.add("cobra.model.hcloud.ExtEPSelector")
    meta.parentClasses.add("cobra.model.hcloud.EPSelector")

    meta.superClasses.add("cobra.model.reln.Inst")
    meta.superClasses.add("cobra.model.reln.To")

    meta.rnPrefixes = [
        ('rsselectorToTagParent-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 51652, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 51653, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "forceResolve", "forceResolve", 107, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = True
    prop.defaultValueStr = "yes"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("forceResolve", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "rType", "rType", 106, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "mo"
    prop._addConstant("local", "local", 3)
    prop._addConstant("mo", "mo", 1)
    prop._addConstant("service", "service", 2)
    meta.props.add("rType", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "state", "state", 103, PropCategory.REGULAR)
    prop.label = "State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unformed"
    prop._addConstant("cardinality-violation", "cardinality-violation", 5)
    prop._addConstant("formed", "formed", 1)
    prop._addConstant("invalid-target", "invalid-target", 4)
    prop._addConstant("missing-target", "missing-target", 2)
    prop._addConstant("unformed", "unformed", 0)
    meta.props.add("state", prop)

    prop = PropMeta("str", "stateQual", "stateQual", 104, PropCategory.REGULAR)
    prop.label = "State Qualifier"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("default-target", "default-target", 2)
    prop._addConstant("mismatch-target", "mismatch-target", 1)
    prop._addConstant("none", "none", 0)
    meta.props.add("stateQual", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tCl", "tCl", 51351, PropCategory.REGULAR)
    prop.label = "Target-class"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 14876
    prop.defaultValueStr = "hcloudACloudBase"
    prop._addConstant("hcloudACloudBase", None, 14876)
    prop._addConstant("hcloudALbStats", None, 15444)
    prop._addConstant("hcloudAccount", None, 14883)
    prop._addConstant("hcloudAccountOper", None, 15231)
    prop._addConstant("hcloudAvailZone", None, 14885)
    prop._addConstant("hcloudAvailZoneOper", None, 14943)
    prop._addConstant("hcloudAvailabilitySetOper", None, 16299)
    prop._addConstant("hcloudAzureInventoryTaskError", None, 16481)
    prop._addConstant("hcloudCertStore", None, 15442)
    prop._addConstant("hcloudCertificate", None, 15222)
    prop._addConstant("hcloudCertificateOper", None, 15200)
    prop._addConstant("hcloudCgw", None, 14986)
    prop._addConstant("hcloudCgwOper", None, 14948)
    prop._addConstant("hcloudCidr", None, 14889)
    prop._addConstant("hcloudCidrOper", None, 14946)
    prop._addConstant("hcloudCloudTrail", None, 14932)
    prop._addConstant("hcloudCloudWatchRule", None, 14930)
    prop._addConstant("hcloudConfigRecorder", None, 14931)
    prop._addConstant("hcloudConfigTaskDone", None, 14958)
    prop._addConstant("hcloudConfigTaskError", None, 15571)
    prop._addConstant("hcloudCsr", None, 14909)
    prop._addConstant("hcloudCsrReconfiguration", None, 14910)
    prop._addConstant("hcloudCsrSummary", None, 15808)
    prop._addConstant("hcloudCsrSummaryOper", None, 15809)
    prop._addConstant("hcloudCtError", None, 15756)
    prop._addConstant("hcloudCtx", None, 14886)
    prop._addConstant("hcloudCtxOper", None, 14945)
    prop._addConstant("hcloudCtxPeeringOper", None, 14962)
    prop._addConstant("hcloudCweError", None, 15753)
    prop._addConstant("hcloudDiskOper", None, 16125)
    prop._addConstant("hcloudEPSelector", None, 14976)
    prop._addConstant("hcloudEndPoint", None, 14914)
    prop._addConstant("hcloudEndPointOper", None, 14954)
    prop._addConstant("hcloudEndpointData", None, 16352)
    prop._addConstant("hcloudEvAlertDeployError", None, 16369)
    prop._addConstant("hcloudEvAppDeployError", None, 16368)
    prop._addConstant("hcloudEvNsDeployError", None, 16367)
    prop._addConstant("hcloudEvRGDeployError", None, 16366)
    prop._addConstant("hcloudEventTaskDone", None, 14959)
    prop._addConstant("hcloudEventTaskError", None, 15572)
    prop._addConstant("hcloudExtEPSelector", None, 14977)
    prop._addConstant("hcloudExtEPSelectorData", None, 16014)
    prop._addConstant("hcloudExtSecurityGroup", None, 14973)
    prop._addConstant("hcloudFailedOper", None, 15562)
    prop._addConstant("hcloudFailedOperHolder", None, 15556)
    prop._addConstant("hcloudFailedStatDiagOper", None, 16411)
    prop._addConstant("hcloudFilterEntryData", None, 16353)
    prop._addConstant("hcloudFlowLogOper", None, 14960)
    prop._addConstant("hcloudGarbageCollector", None, 15749)
    prop._addConstant("hcloudGarbageCollectorError", None, 15574)
    prop._addConstant("hcloudGenericError", None, 15752)
    prop._addConstant("hcloudIgw", None, 14920)
    prop._addConstant("hcloudIgwOper", None, 14950)
    prop._addConstant("hcloudInfraRes", None, 14921)
    prop._addConstant("hcloudInstance", None, 14906)
    prop._addConstant("hcloudInstanceOper", None, 14955)
    prop._addConstant("hcloudInventoryTaskError", None, 15573)
    prop._addConstant("hcloudIpEgressRule", None, 15508)
    prop._addConstant("hcloudIpEgressRuleOper", None, 15512)
    prop._addConstant("hcloudIpIngressRule", None, 15507)
    prop._addConstant("hcloudIpIngressRuleOper", None, 15511)
    prop._addConstant("hcloudIpOper", None, 16124)
    prop._addConstant("hcloudListener", None, 15207)
    prop._addConstant("hcloudListenerCertificateOper", None, 15515)
    prop._addConstant("hcloudListenerOper", None, 15197)
    prop._addConstant("hcloudListenerRule", None, 15208)
    prop._addConstant("hcloudListenerRuleOper", None, 15198)
    prop._addConstant("hcloudListenerRulePriorityOper", None, 15563)
    prop._addConstant("hcloudLogGrpOper", None, 14961)
    prop._addConstant("hcloudLogGrpPol", None, 14935)
    prop._addConstant("hcloudMsgQ", None, 14922)
    prop._addConstant("hcloudNativeLB", None, 15202)
    prop._addConstant("hcloudNativeLBOper", None, 15195)
    prop._addConstant("hcloudNetworkInterface", None, 14915)
    prop._addConstant("hcloudProv", None, 16377)
    prop._addConstant("hcloudProvAccount", None, 16386)
    prop._addConstant("hcloudProvAcctGC", None, 16417)
    prop._addConstant("hcloudProvMaxEpSecGrp", None, 16378)
    prop._addConstant("hcloudProvRegion", None, 16385)
    prop._addConstant("hcloudRacl", None, 14963)
    prop._addConstant("hcloudRaclRule", None, 14964)
    prop._addConstant("hcloudRegion", None, 14884)
    prop._addConstant("hcloudRegionOper", None, 14942)
    prop._addConstant("hcloudResourceGroupOper", None, 16127)
    prop._addConstant("hcloudResourceMap", None, 14879)
    prop._addConstant("hcloudRouteTable", None, 14895)
    prop._addConstant("hcloudRouteTableEntry", None, 14896)
    prop._addConstant("hcloudRouteTableEntryOper", None, 16126)
    prop._addConstant("hcloudRouteTableOper", None, 14951)
    prop._addConstant("hcloudRsEpToSecurityGroupOper", None, 16129)
    prop._addConstant("hcloudRsRFltAttData", None, 16015)
    prop._addConstant("hcloudRsSubnetToRTOper", None, 14952)
    prop._addConstant("hcloudRsVpnConnToCgwOper", None, 14953)
    prop._addConstant("hcloudRuleAction", None, 15213)
    prop._addConstant("hcloudRuleCondition", None, 15209)
    prop._addConstant("hcloudS3Error", None, 15755)
    prop._addConstant("hcloudSGRuleGroupOper", None, 16128)
    prop._addConstant("hcloudScaleSet", None, 16360)
    prop._addConstant("hcloudScaleSetNicGroup", None, 16363)
    prop._addConstant("hcloudSecurityGroup", None, 14970)
    prop._addConstant("hcloudSecurityGroupOper", None, 14944)
    prop._addConstant("hcloudSgEgressRule", None, 15510)
    prop._addConstant("hcloudSgEgressRuleOper", None, 15514)
    prop._addConstant("hcloudSgIngressRule", None, 15509)
    prop._addConstant("hcloudSgIngressRuleOper", None, 15513)
    prop._addConstant("hcloudSqsError", None, 15754)
    prop._addConstant("hcloudStorageBucket", None, 14929)
    prop._addConstant("hcloudSubnet", None, 14890)
    prop._addConstant("hcloudSubnetFlowLogPol", None, 14939)
    prop._addConstant("hcloudSubnetNsgAttachOper", None, 16802)
    prop._addConstant("hcloudSubnetOper", None, 14947)
    prop._addConstant("hcloudTargetGroup", None, 15215)
    prop._addConstant("hcloudTargetGroupOper", None, 15196)
    prop._addConstant("hcloudTargetOper", None, 15199)
    prop._addConstant("hcloudTnRegionOwnerDone", None, 16556)
    prop._addConstant("hcloudToEPgData", None, 15611)
    prop._addConstant("hcloudTopic", None, 14925)
    prop._addConstant("hcloudTopicRes", None, 14928)
    prop._addConstant("hcloudVgw", None, 14983)
    prop._addConstant("hcloudVgwOper", None, 14949)
    prop._addConstant("hcloudVpcFlowLogPol", None, 14936)
    prop._addConstant("hcloudZoneMappingOper", None, 15266)
    prop._addConstant("hinventoryAccount", None, 15021)
    prop._addConstant("hinventoryApplicationSecurityGroup", None, 16141)
    prop._addConstant("hinventoryAvailZone", None, 15267)
    prop._addConstant("hinventoryAzurePublicIP", None, 16643)
    prop._addConstant("hinventoryComputeInstance", None, 15033)
    prop._addConstant("hinventoryComputeInstanceScaleSet", None, 16146)
    prop._addConstant("hinventoryCtx", None, 15024)
    prop._addConstant("hinventoryCtxCidr", None, 15612)
    prop._addConstant("hinventoryCustomerGateway", None, 15045)
    prop._addConstant("hinventoryDone", None, 15022)
    prop._addConstant("hinventoryEgressRule", None, 15029)
    prop._addConstant("hinventoryIngressRule", None, 15026)
    prop._addConstant("hinventoryInternetGateway", None, 15039)
    prop._addConstant("hinventoryInventory", None, 15019)
    prop._addConstant("hinventoryListener", None, 16308)
    prop._addConstant("hinventoryLoadBalancer", None, 15061)
    prop._addConstant("hinventoryNetworkInterface", None, 15034)
    prop._addConstant("hinventoryPrivateIP", None, 15614)
    prop._addConstant("hinventoryProvider", None, 15020)
    prop._addConstant("hinventoryPublicIP", None, 15613)
    prop._addConstant("hinventoryRegion", None, 15023)
    prop._addConstant("hinventoryResourceGrp", None, 16132)
    prop._addConstant("hinventoryRouteTable", None, 15051)
    prop._addConstant("hinventoryRouteTableEntry", None, 15054)
    prop._addConstant("hinventorySecurityGroup", None, 15025)
    prop._addConstant("hinventorySqlDb", None, 16189)
    prop._addConstant("hinventorySqlServer", None, 16184)
    prop._addConstant("hinventoryStaleResource", None, 15838)
    prop._addConstant("hinventoryStorageAcct", None, 16179)
    prop._addConstant("hinventorySubnet", None, 15032)
    prop._addConstant("hinventoryTag", None, 16190)
    prop._addConstant("hinventoryTargetGroup", None, 15062)
    prop._addConstant("hinventoryVpnConnection", None, 15046)
    prop._addConstant("hinventoryVpnGateway", None, 15042)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("tCl", prop)

    prop = PropMeta("str", "tDn", "tDn", 51350, PropCategory.REGULAR)
    prop.label = "Target-dn"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("tDn", prop)

    prop = PropMeta("str", "tType", "tType", 105, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "mo"
    prop._addConstant("all", "all", 2)
    prop._addConstant("mo", "mo", 1)
    prop._addConstant("name", "name", 0)
    meta.props.add("tType", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    meta.namingProps.append(getattr(meta.props, "tDn"))
    getattr(meta.props, "tDn").needDelimiter = True

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToHcloudInstance", "hcloudCtx To hcloudInstance", "cobra.model.hcloud.Instance"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToHcloudSecurityGroup", "hcloudCtx To hcloudSecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToCloudExtEPg", "From hcloudCtx (VPC) to cloudExtEPg", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToHcloudIgw", "hcloudCtx To hcloudIgw", "cobra.model.hcloud.Igw"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToHcloudVgw", "hcloudCtx To hcloudVgw", "cobra.model.hcloud.Vgw"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudSecurityGroupToHcloudSecurityGroupOper", "hcloud:SecurityGroup to hcloud:SecurityGroupOper", "cobra.model.hcloud.SecurityGroupOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudSecurityGroupToHcloudEndPoint", "hcloud:SecurityGroup to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudSecurityGroupToHcloudInstance", "hcloud:SecurityGroup to hcloud:Instance", "cobra.model.hcloud.Instance"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudSecurityGroupToCloudEPg", "hcloud:SecurityGroup to cloud:EPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToHcloudCsr", "hcloudCtx To hcloudCsr", "cobra.model.hcloud.Csr"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToCloudZone", "hcloudCtx To cloudZone", "cobra.model.cloud.Zone"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToCloudEpg", "From hcloudCtx (VPC) to cloudEPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToCloudCtxProfile", "From hcloudCtx (VPC) to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToFvCtx", "From hcloudCtx (VPC) to fvCtx (VRF)", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToHCloudEndPoint", "hcloudCtx To hcloudEndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToHCloudCidr", "From hcloudCtx (VPC) to hcloudCidr", "cobra.model.hcloud.Cidr"))

    def __init__(self, parentMoOrDn, tDn, markDirty=True, **creationProps):
        namingVals = [tDn]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

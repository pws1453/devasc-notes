# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class AwsVpnTunnelInfo(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.hcloud.AwsVpnTunnelInfo")

    meta.moClassName = "hcloudAwsVpnTunnelInfo"
    meta.rnFormat = "tunnelinfo-%(tunnelID)s"
    meta.category = MoCategory.REGULAR
    meta.label = "VGWs VPN Connection Tunnel Info"
    meta.writeAccessMask = 0x1002001
    meta.readAccessMask = 0x1002001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.hcloud.RsVpnConnToCgw")

    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Def")

    meta.rnPrefixes = [
        ('tunnelinfo-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 51656, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "asn", "asn", 50406, PropCategory.REGULAR)
    prop.label = "CGW BGP ASN"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 4294967295)]
    meta.props.add("asn", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 5579, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "destInnerAddress", "destInnerAddress", 50404, PropCategory.REGULAR)
    prop.label = "VGW Tunnel Inner IP Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("destInnerAddress", prop)

    prop = PropMeta("str", "destOuterAddress", "destOuterAddress", 50405, PropCategory.REGULAR)
    prop.label = "VGW Tunnel Outer Public IP Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("destOuterAddress", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dpdInterval", "dpdInterval", 50425, PropCategory.REGULAR)
    prop.label = "IPSec DPD Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("dpdInterval", prop)

    prop = PropMeta("str", "dpdRetries", "dpdRetries", 50426, PropCategory.REGULAR)
    prop.label = "IPSec DPD Retries"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("dpdRetries", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 51657, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "fragmentationBeforeEncryption", "fragmentationBeforeEncryption", 50423, PropCategory.REGULAR)
    prop.label = "IPSec Fragmentation Before Encryption"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("fragmentationBeforeEncryption", prop)

    prop = PropMeta("str", "holdTime", "holdTime", 50408, PropCategory.REGULAR)
    prop.label = "CGW BGP Hold Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("holdTime", prop)

    prop = PropMeta("str", "ikeAuthenticationProtocol", "ikeAuthenticationProtocol", 50410, PropCategory.REGULAR)
    prop.label = "IKE Authentication Protocol"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ikeAuthenticationProtocol", prop)

    prop = PropMeta("str", "ikeEncryptionProtocol", "ikeEncryptionProtocol", 50411, PropCategory.REGULAR)
    prop.label = "IKE Encryption Protocol"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ikeEncryptionProtocol", prop)

    prop = PropMeta("str", "ikeForwardSecrecy", "ikeForwardSecrecy", 50413, PropCategory.REGULAR)
    prop.label = "IKE Perfect Forward Secrecy"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ikeForwardSecrecy", prop)

    prop = PropMeta("str", "ikeLifetime", "ikeLifetime", 50412, PropCategory.REGULAR)
    prop.label = "IKE Lifetime"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(60, 86400)]
    prop.defaultValue = 28000
    prop.defaultValueStr = "28000"
    meta.props.add("ikeLifetime", prop)

    prop = PropMeta("str", "ikeMode", "ikeMode", 50414, PropCategory.REGULAR)
    prop.label = "IKE mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ikeMode", prop)

    prop = PropMeta("str", "ikeVersion", "ikeVersion", 54953, PropCategory.REGULAR)
    prop.label = "IKE version to use"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "ikev1"
    prop._addConstant("ikev1", "use-isakmp-version-1", 0)
    prop._addConstant("ikev2", "use-isakmp-version-2", 1)
    meta.props.add("ikeVersion", prop)

    prop = PropMeta("str", "innerAddress", "innerAddress", 50402, PropCategory.REGULAR)
    prop.label = "CGW Tunnel Inner IP Address and Mask"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("innerAddress", prop)

    prop = PropMeta("str", "ipsecAuthenticationProtocol", "ipsecAuthenticationProtocol", 50417, PropCategory.REGULAR)
    prop.label = "IPSec Authentication Protocol"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ipsecAuthenticationProtocol", prop)

    prop = PropMeta("str", "ipsecClearDFBit", "ipsecClearDFBit", 50422, PropCategory.REGULAR)
    prop.label = "IPSec DF Bit Clear"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("ipsecClearDFBit", prop)

    prop = PropMeta("str", "ipsecEncryptionProtocol", "ipsecEncryptionProtocol", 50418, PropCategory.REGULAR)
    prop.label = "IPSec Encryption Protocol"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ipsecEncryptionProtocol", prop)

    prop = PropMeta("str", "ipsecForwardSecrecy", "ipsecForwardSecrecy", 50420, PropCategory.REGULAR)
    prop.label = "IPSec Perfect Forward Secrecy"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ipsecForwardSecrecy", prop)

    prop = PropMeta("str", "ipsecLifetime", "ipsecLifetime", 50419, PropCategory.REGULAR)
    prop.label = "IPSec Lifetime"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("ipsecLifetime", prop)

    prop = PropMeta("str", "ipsecMode", "ipsecMode", 50421, PropCategory.REGULAR)
    prop.label = "IPSec Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ipsecMode", prop)

    prop = PropMeta("str", "ipsecProtocol", "ipsecProtocol", 50416, PropCategory.REGULAR)
    prop.label = "IPSec Protocol"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ipsecProtocol", prop)

    prop = PropMeta("str", "isReady", "isReady", 52166, PropCategory.REGULAR)
    prop.label = "Is the AwsVpnTunnelInfo mo ready"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("isReady", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "outerAddress", "outerAddress", 50403, PropCategory.REGULAR)
    prop.label = "CGW Tunnel Outer Public IP Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("outerAddress", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15230, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15231, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "preSharedKey", "preSharedKey", 50415, PropCategory.REGULAR)
    prop.label = "IKE PreShared Key"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("preSharedKey", prop)

    prop = PropMeta("str", "remoteAsn", "remoteAsn", 50407, PropCategory.REGULAR)
    prop.label = "VGW BGP ASN"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 4294967295)]
    meta.props.add("remoteAsn", prop)

    prop = PropMeta("str", "remoteHoldTime", "remoteHoldTime", 50409, PropCategory.REGULAR)
    prop.label = "VGW BGP Hold Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("remoteHoldTime", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tcpMSS", "tcpMSS", 50424, PropCategory.REGULAR)
    prop.label = "IPSec TCP MSS"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("tcpMSS", prop)

    prop = PropMeta("str", "ttl", "ttl", 54952, PropCategory.REGULAR)
    prop.label = "eBGP multihop ttl"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 255)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("ttl", prop)

    prop = PropMeta("str", "tunnelID", "tunnelID", 52165, PropCategory.REGULAR)
    prop.label = "Tunnel ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 2)]
    meta.props.add("tunnelID", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    meta.namingProps.append(getattr(meta.props, "tunnelID"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudVgwToHcloudAwsVpnTunnelInfo", "From hcloudVgw to tunnels", "cobra.model.hcloud.AwsVpnTunnelInfo"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudVgwToCloudCtxProfile", "From hcloudVgw to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudVgwToFvCtx", "From hcloudVgw to fvCtx", "cobra.model.fv.Ctx"))

    def __init__(self, parentMoOrDn, tunnelID, markDirty=True, **creationProps):
        namingVals = [tunnelID]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

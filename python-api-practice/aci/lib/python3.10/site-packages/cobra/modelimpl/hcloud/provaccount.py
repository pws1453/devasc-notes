# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class ProvAccount(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.hcloud.ProvAccount")

    meta.moClassName = "hcloudProvAccount"
    meta.rnFormat = "provacc-[%(name)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "provider account"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x70842700e701
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.hcloud.RtToProvAcct")
    meta.childClasses.add("cobra.model.fault.CountsWithDetails")
    meta.childClasses.add("cobra.model.hcloud.ProvAcctGC")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.hcloud.Account")
    meta.childClasses.add("cobra.model.hcloud.RtSelectorToTagParent")
    meta.childClasses.add("cobra.model.fault.Delegate")

    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.RtSelectorToTagParent", "rtselectorToTagParent-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.RtToProvAcct", "rttoProvAcct-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.CountsWithDetails", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.ProvAcctGC", "gcpol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hcloud.Account", "acct-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.hcloud.Prov")

    meta.superClasses.add("cobra.model.hcloud.AResource")
    meta.superClasses.add("cobra.model.hcloud.ACloudBase")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")

    meta.rnPrefixes = [
        ('provacc-', True),
    ]

    prop = PropMeta("str", "accountId", "accountId", 55753, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("accountId", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cloudProviderId", "cloudProviderId", 55752, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("cloudProviderId", prop)

    prop = PropMeta("str", "delegateDn", "delegateDn", 53375, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("delegateDn", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "email", "email", 55758, PropCategory.REGULAR)
    prop.label = "Account Email Address"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("email", prop)

    prop = PropMeta("str", "environment", "environment", 56466, PropCategory.REGULAR)
    prop.label = "Public/Gov cloud information"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "public-cloud"
    prop._addConstant("gov-cloud", "government-cloud-environment", 1)
    prop._addConstant("public-cloud", "public-cloud-environment", 0)
    meta.props.add("environment", prop)

    prop = PropMeta("str", "httpProxy", "httpProxy", 55757, PropCategory.REGULAR)
    prop.label = "HTTP proxy address"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("httpProxy", prop)

    prop = PropMeta("str", "infraFlag", "infraFlag", 55756, PropCategory.REGULAR)
    prop.label = "Flag indicating infra account"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "false"
    prop._addConstant("false", "false", 0)
    prop._addConstant("true", "true", 1)
    meta.props.add("infraFlag", prop)

    prop = PropMeta("str", "isAccountInOrg", "isAccountInOrg", 55759, PropCategory.REGULAR)
    prop.label = "Is Account in the organization whose master is infra"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("isAccountInOrg", prop)

    prop = PropMeta("str", "isTrustedTenant", "isTrustedTenant", 55760, PropCategory.REGULAR)
    prop.label = "Is Account trusted by Infra account"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("isTrustedTenant", prop)

    prop = PropMeta("str", "key", "key", 55755, PropCategory.REGULAR)
    prop.label = "API Key of account holder"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("key", prop)

    prop = PropMeta("str", "keyId", "keyId", 55754, PropCategory.REGULAR)
    prop.label = "API KeyID of account holder"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("keyId", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 55761, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 50279, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "resolvedObjDn", "resolvedObjDn", 50280, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("resolvedObjDn", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "name"))
    getattr(meta.props, "name").needDelimiter = True

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Path"

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class RtSelectorToTagParent(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = TargetRelationMeta("cobra.model.hcloud.RtSelectorToTagParent", "cobra.model.hcloud.ASelector")

    meta.moClassName = "hcloudRtSelectorToTagParent"
    meta.rnFormat = "rtselectorToTagParent-[%(tDn)s]"
    meta.category = MoCategory.RELATIONSHIP_FROM_LOCAL
    meta.label = "Tag Selector"
    meta.writeAccessMask = 0x0
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.parentClasses.add("cobra.model.hcloud.FailedStatDiagOper")
    meta.parentClasses.add("cobra.model.hcloud.IpIngressRule")
    meta.parentClasses.add("cobra.model.hcloud.IgwOper")
    meta.parentClasses.add("cobra.model.hcloud.TopicRes")
    meta.parentClasses.add("cobra.model.hcloud.SGRuleGroupOper")
    meta.parentClasses.add("cobra.model.hinventory.Inventory")
    meta.parentClasses.add("cobra.model.hcloud.ConfigTaskError")
    meta.parentClasses.add("cobra.model.hcloud.SgIngressRuleOper")
    meta.parentClasses.add("cobra.model.hcloud.EventTaskError")
    meta.parentClasses.add("cobra.model.hinventory.AzurePublicIP")
    meta.parentClasses.add("cobra.model.hcloud.AzureInventoryTaskError")
    meta.parentClasses.add("cobra.model.hcloud.Csr")
    meta.parentClasses.add("cobra.model.hcloud.AvailabilitySetOper")
    meta.parentClasses.add("cobra.model.hcloud.DiskOper")
    meta.parentClasses.add("cobra.model.hcloud.SecurityGroup")
    meta.parentClasses.add("cobra.model.hinventory.Account")
    meta.parentClasses.add("cobra.model.hcloud.SubnetNsgAttachOper")
    meta.parentClasses.add("cobra.model.hcloud.SecurityGroupOper")
    meta.parentClasses.add("cobra.model.hcloud.RsEpToSecurityGroupOper")
    meta.parentClasses.add("cobra.model.hinventory.AvailZone")
    meta.parentClasses.add("cobra.model.hcloud.CertStore")
    meta.parentClasses.add("cobra.model.hinventory.Done")
    meta.parentClasses.add("cobra.model.hcloud.NativeLBOper")
    meta.parentClasses.add("cobra.model.hcloud.CloudWatchRule")
    meta.parentClasses.add("cobra.model.hinventory.Tag")
    meta.parentClasses.add("cobra.model.hcloud.GarbageCollector")
    meta.parentClasses.add("cobra.model.hcloud.Racl")
    meta.parentClasses.add("cobra.model.hinventory.ApplicationSecurityGroup")
    meta.parentClasses.add("cobra.model.hcloud.RaclRule")
    meta.parentClasses.add("cobra.model.hcloud.ScaleSet")
    meta.parentClasses.add("cobra.model.hcloud.EventTaskDone")
    meta.parentClasses.add("cobra.model.hcloud.RsRFltAttData")
    meta.parentClasses.add("cobra.model.hinventory.TargetGroup")
    meta.parentClasses.add("cobra.model.hcloud.SubnetFlowLogPol")
    meta.parentClasses.add("cobra.model.hcloud.IpOper")
    meta.parentClasses.add("cobra.model.hcloud.IpIngressRuleOper")
    meta.parentClasses.add("cobra.model.hcloud.MsgQ")
    meta.parentClasses.add("cobra.model.hinventory.VpnGateway")
    meta.parentClasses.add("cobra.model.hcloud.EndPointOper")
    meta.parentClasses.add("cobra.model.hinventory.ResourceGrp")
    meta.parentClasses.add("cobra.model.hcloud.Region")
    meta.parentClasses.add("cobra.model.hcloud.ProvAccount")
    meta.parentClasses.add("cobra.model.hcloud.ExtEPSelectorData")
    meta.parentClasses.add("cobra.model.hcloud.RuleAction")
    meta.parentClasses.add("cobra.model.hcloud.Certificate")
    meta.parentClasses.add("cobra.model.hcloud.ConfigTaskDone")
    meta.parentClasses.add("cobra.model.hcloud.ResourceMap")
    meta.parentClasses.add("cobra.model.hcloud.ResourceGroupOper")
    meta.parentClasses.add("cobra.model.hinventory.SqlServer")
    meta.parentClasses.add("cobra.model.hinventory.NetworkInterface")
    meta.parentClasses.add("cobra.model.hcloud.RouteTable")
    meta.parentClasses.add("cobra.model.hinventory.LoadBalancer")
    meta.parentClasses.add("cobra.model.hcloud.ExtEPSelector")
    meta.parentClasses.add("cobra.model.hinventory.RouteTableEntry")
    meta.parentClasses.add("cobra.model.hcloud.IpEgressRuleOper")
    meta.parentClasses.add("cobra.model.hcloud.CertificateOper")
    meta.parentClasses.add("cobra.model.hcloud.S3Error")
    meta.parentClasses.add("cobra.model.hcloud.AvailZoneOper")
    meta.parentClasses.add("cobra.model.hinventory.Provider")
    meta.parentClasses.add("cobra.model.hcloud.EndpointData")
    meta.parentClasses.add("cobra.model.hcloud.EvAlertDeployError")
    meta.parentClasses.add("cobra.model.hcloud.AvailZone")
    meta.parentClasses.add("cobra.model.hcloud.LogGrpOper")
    meta.parentClasses.add("cobra.model.hcloud.EvNsDeployError")
    meta.parentClasses.add("cobra.model.hcloud.SgEgressRule")
    meta.parentClasses.add("cobra.model.hinventory.Subnet")
    meta.parentClasses.add("cobra.model.hcloud.Subnet")
    meta.parentClasses.add("cobra.model.hcloud.EPSelector")
    meta.parentClasses.add("cobra.model.hcloud.ProvAcctGC")
    meta.parentClasses.add("cobra.model.hinventory.VpnConnection")
    meta.parentClasses.add("cobra.model.hinventory.CtxCidr")
    meta.parentClasses.add("cobra.model.hinventory.StorageAcct")
    meta.parentClasses.add("cobra.model.hcloud.NetworkInterface")
    meta.parentClasses.add("cobra.model.hcloud.CsrReconfiguration")
    meta.parentClasses.add("cobra.model.hcloud.ExtSecurityGroup")
    meta.parentClasses.add("cobra.model.hcloud.Listener")
    meta.parentClasses.add("cobra.model.hinventory.Region")
    meta.parentClasses.add("cobra.model.hinventory.CustomerGateway")
    meta.parentClasses.add("cobra.model.hinventory.Ctx")
    meta.parentClasses.add("cobra.model.hcloud.SqsError")
    meta.parentClasses.add("cobra.model.hcloud.ListenerRule")
    meta.parentClasses.add("cobra.model.hcloud.ScaleSetNicGroup")
    meta.parentClasses.add("cobra.model.hcloud.AccountOper")
    meta.parentClasses.add("cobra.model.hcloud.ProvMaxEpSecGrp")
    meta.parentClasses.add("cobra.model.hcloud.FailedOper")
    meta.parentClasses.add("cobra.model.hcloud.CsrSummaryOper")
    meta.parentClasses.add("cobra.model.hcloud.VgwOper")
    meta.parentClasses.add("cobra.model.hcloud.StorageBucket")
    meta.parentClasses.add("cobra.model.hcloud.ListenerCertificateOper")
    meta.parentClasses.add("cobra.model.hcloud.CidrOper")
    meta.parentClasses.add("cobra.model.hcloud.SubnetOper")
    meta.parentClasses.add("cobra.model.hcloud.EvAppDeployError")
    meta.parentClasses.add("cobra.model.hinventory.InternetGateway")
    meta.parentClasses.add("cobra.model.hcloud.ListenerOper")
    meta.parentClasses.add("cobra.model.hcloud.InstanceOper")
    meta.parentClasses.add("cobra.model.hcloud.VpcFlowLogPol")
    meta.parentClasses.add("cobra.model.hcloud.EndPoint")
    meta.parentClasses.add("cobra.model.hcloud.RsVpnConnToCgwOper")
    meta.parentClasses.add("cobra.model.hinventory.SecurityGroup")
    meta.parentClasses.add("cobra.model.hcloud.CtxPeeringOper")
    meta.parentClasses.add("cobra.model.hcloud.Instance")
    meta.parentClasses.add("cobra.model.hcloud.ALbStats")
    meta.parentClasses.add("cobra.model.hcloud.Cidr")
    meta.parentClasses.add("cobra.model.hcloud.RuleCondition")
    meta.parentClasses.add("cobra.model.hinventory.PrivateIP")
    meta.parentClasses.add("cobra.model.hcloud.ZoneMappingOper")
    meta.parentClasses.add("cobra.model.hcloud.Cgw")
    meta.parentClasses.add("cobra.model.hcloud.CsrSummary")
    meta.parentClasses.add("cobra.model.hcloud.NativeLB")
    meta.parentClasses.add("cobra.model.hcloud.ListenerRulePriorityOper")
    meta.parentClasses.add("cobra.model.hcloud.SgEgressRuleOper")
    meta.parentClasses.add("cobra.model.hcloud.Account")
    meta.parentClasses.add("cobra.model.hinventory.SqlDb")
    meta.parentClasses.add("cobra.model.hcloud.ProvRegion")
    meta.parentClasses.add("cobra.model.hcloud.RegionOper")
    meta.parentClasses.add("cobra.model.hcloud.ToEPgData")
    meta.parentClasses.add("cobra.model.hcloud.CgwOper")
    meta.parentClasses.add("cobra.model.hcloud.Igw")
    meta.parentClasses.add("cobra.model.hinventory.ComputeInstanceScaleSet")
    meta.parentClasses.add("cobra.model.hcloud.FilterEntryData")
    meta.parentClasses.add("cobra.model.hcloud.TnRegionOwnerDone")
    meta.parentClasses.add("cobra.model.hcloud.TargetGroupOper")
    meta.parentClasses.add("cobra.model.hinventory.RouteTable")
    meta.parentClasses.add("cobra.model.hcloud.RouteTableOper")
    meta.parentClasses.add("cobra.model.hcloud.EvRGDeployError")
    meta.parentClasses.add("cobra.model.hcloud.CloudTrail")
    meta.parentClasses.add("cobra.model.hcloud.Topic")
    meta.parentClasses.add("cobra.model.hcloud.LogGrpPol")
    meta.parentClasses.add("cobra.model.hcloud.ConfigRecorder")
    meta.parentClasses.add("cobra.model.hcloud.Vgw")
    meta.parentClasses.add("cobra.model.hcloud.RouteTableEntry")
    meta.parentClasses.add("cobra.model.hcloud.IpEgressRule")
    meta.parentClasses.add("cobra.model.hcloud.FlowLogOper")
    meta.parentClasses.add("cobra.model.hcloud.TargetOper")
    meta.parentClasses.add("cobra.model.hcloud.Ctx")
    meta.parentClasses.add("cobra.model.hcloud.SgIngressRule")
    meta.parentClasses.add("cobra.model.hcloud.CweError")
    meta.parentClasses.add("cobra.model.hcloud.InventoryTaskError")
    meta.parentClasses.add("cobra.model.hcloud.TargetGroup")
    meta.parentClasses.add("cobra.model.hinventory.EgressRule")
    meta.parentClasses.add("cobra.model.hcloud.ListenerRuleOper")
    meta.parentClasses.add("cobra.model.hinventory.IngressRule")
    meta.parentClasses.add("cobra.model.hinventory.PublicIP")
    meta.parentClasses.add("cobra.model.hcloud.InfraRes")
    meta.parentClasses.add("cobra.model.hcloud.RouteTableEntryOper")
    meta.parentClasses.add("cobra.model.hcloud.CtError")
    meta.parentClasses.add("cobra.model.hcloud.Prov")
    meta.parentClasses.add("cobra.model.hcloud.GenericError")
    meta.parentClasses.add("cobra.model.hcloud.RsSubnetToRTOper")
    meta.parentClasses.add("cobra.model.hinventory.StaleResource")
    meta.parentClasses.add("cobra.model.hinventory.Listener")
    meta.parentClasses.add("cobra.model.hinventory.ComputeInstance")
    meta.parentClasses.add("cobra.model.hcloud.CtxOper")
    meta.parentClasses.add("cobra.model.hcloud.FailedOperHolder")
    meta.parentClasses.add("cobra.model.hcloud.GarbageCollectorError")

    meta.superClasses.add("cobra.model.reln.From")
    meta.superClasses.add("cobra.model.reln.Inst")

    meta.rnPrefixes = [
        ('rtselectorToTagParent-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tCl", "tCl", 51353, PropCategory.REGULAR)
    prop.label = "Target-class"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 14980
    prop.defaultValueStr = "hcloudASelector"
    prop._addConstant("hcloudASelector", None, 14980)
    prop._addConstant("hcloudEPSelector", None, 14976)
    prop._addConstant("hcloudExtEPSelector", None, 14977)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("tCl", prop)

    prop = PropMeta("str", "tDn", "tDn", 51352, PropCategory.REGULAR)
    prop.label = "Target-dn"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("tDn", prop)

    meta.namingProps.append(getattr(meta.props, "tDn"))
    getattr(meta.props, "tDn").needDelimiter = True

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToHcloudInstance", "hcloudCtx To hcloudInstance", "cobra.model.hcloud.Instance"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcbgpPeer", "From hcloudCsr to hcbgpPeer", "cobra.model.hcbgp.Peer"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcl3LoopbackRoutedIf", "From hcloudCsr to hcl3LoopbackRoutedIf", "cobra.model.hcl3.LoopbackRoutedIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcospfRsTunnIf", "From hcloudCsr to hcospfRsTunnIf", "cobra.model.hcospf.RsTunnIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudNetworkInterfaceToHcloudEndPointOper", "From hcloudNetworkInterface to hcloudEndPointOper", "cobra.model.hcloud.EndPointOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToHcloudSecurityGroup", "hcloudCtx To hcloudSecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudIgwToCloudCtxProfile", "From hcloudIgw to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudIgwToFvCtx", "From hcloudIgw To fvCtx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudVgwToHcloudAwsVpnTunnelInfo", "From hcloudVgw to tunnels", "cobra.model.hcloud.AwsVpnTunnelInfo"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudVgwToCloudCtxProfile", "From hcloudVgw to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudVgwToFvCtx", "From hcloudVgw to fvCtx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHctunnIf", "From hcloudCsr to hctunnIf", "cobra.model.hctunn.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcloudNetworkInterface", "From hcloudCsr to hcloudNetworkInterface", "cobra.model.hcloud.NetworkInterface"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcloudEndPointOper", "From hcloudCsr to hcloudEndPointOper", "cobra.model.hcloud.EndPointOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcl1PhysicalIf", "From hcloudCsr to hcl1PhysicalIf", "cobra.model.hcl1.PhysicalIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToCloudCtxProfile", "From hcloudCsr to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcl3Vrf", "From hcloudCsr to hcl3Vrf", "cobra.model.hcl3.Vrf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudCsrToHcloudInstanceOper", "From hcloudCsr to hcloudInstanceOper", "cobra.model.hcloud.InstanceOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToCloudExtEPg", "From hcloudCtx (VPC) to cloudExtEPg", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToHcloudIgw", "hcloudCtx To hcloudIgw", "cobra.model.hcloud.Igw"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToHcloudVgw", "hcloudCtx To hcloudVgw", "cobra.model.hcloud.Vgw"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudSecurityGroupToHcloudSecurityGroupOper", "hcloud:SecurityGroup to hcloud:SecurityGroupOper", "cobra.model.hcloud.SecurityGroupOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudSecurityGroupToHcloudEndPoint", "hcloud:SecurityGroup to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudSecurityGroupToHcloudInstance", "hcloud:SecurityGroup to hcloud:Instance", "cobra.model.hcloud.Instance"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudSecurityGroupToCloudEPg", "hcloud:SecurityGroup to cloud:EPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudInstanceToCloudCtxProfile", "From hcloudInstance to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudInstanceToHcloudSecurityGroup", "From cloudCtxProfile to hcloud:SecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudInstanceToHcloudEndPoint", "From cloudCtxProfile to HcloudEndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudInstanceToCloudEPg", "From hcloudInstance to cloudEPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudEndPointToHCloudInstance", "hcloud:EndPoint to hcloud:Instance", "cobra.model.hcloud.Instance"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToHcloudCsr", "hcloudCtx To hcloudCsr", "cobra.model.hcloud.Csr"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToCloudZone", "hcloudCtx To cloudZone", "cobra.model.cloud.Zone"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudInstanceToHCloudInstanceOper", "From hcloudInstance to hcloudInstance Oper", "cobra.model.hcloud.InstanceOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudEndPointToCloudEpg", "hcloud:EndPoint to cloud:EPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudEndPointToHCloudSecurityGroup", "hcloud:EndPoint to hcloud:SecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToCloudEpg", "From hcloudCtx (VPC) to cloudEPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToCloudCtxProfile", "From hcloudCtx (VPC) to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToFvCtx", "From hcloudCtx (VPC) to fvCtx (VRF)", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudEndPointToHCloudEndPointOper", "From hcloudEndPoint to hcloudEndPointOper for EP type", "cobra.model.hcloud.EndPointOper"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToHCloudEndPoint", "hcloudCtx To hcloudEndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudCtxToHCloudCidr", "From hcloudCtx (VPC) to hcloudCidr", "cobra.model.hcloud.Cidr"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("hcloudAccountToHCloudEndPoint", "hcloudAccount To HCloudEndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HCloudAccountToRegion", "HCloudAccount to Region", "cobra.model.hcloud.Region"))

    def __init__(self, parentMoOrDn, tDn, markDirty=True, **creationProps):
        namingVals = [tDn]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

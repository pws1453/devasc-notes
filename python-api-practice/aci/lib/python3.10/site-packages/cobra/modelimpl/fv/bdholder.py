# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class BDHolder(Mo):
    """
    The bridge domain (BD) holder contains bridge domain related information.  For example, in a same shared service scenario, when a context is  deployed on a node, the PE needs to get all subnets of all the associated BDs. In this case, the private Layer 3 network context contains DNs of all associated BDs,  and with that info, the node pulls down the corresponding bridge domain holders of each of the associated BDs. The bridge domain holder contains all subnets of  a given BD. This allows node to have some BD information without pulling down entire BD.

    """

    meta = ClassMeta("cobra.model.fv.BDHolder")

    meta.moClassName = "fvBDHolder"
    meta.rnFormat = "bd-[%(bdDn)s]-isSvc-%(isSvc)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Bridge Domain Holder"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x3001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fv.AEPgCont")
    meta.childClasses.add("cobra.model.fv.RtToInbMgmtBD")
    meta.childClasses.add("cobra.model.fv.RtAssocBDDefContToBDHolder")
    meta.childClasses.add("cobra.model.fv.RtToRemoteBDHolder")
    meta.childClasses.add("cobra.model.ip.RouteDef")
    meta.childClasses.add("cobra.model.nd.RaSubnetDef")
    meta.childClasses.add("cobra.model.fv.OutCont")
    meta.childClasses.add("cobra.model.fault.Delegate")

    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtAssocBDDefContToBDHolder", "rtassocBDDefContToBDHolder-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtToRemoteBDHolder", "rttoRemoteBDHolder-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtToInbMgmtBD", "rttoInbMgmtBD"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nd.RaSubnetDef", "RaSubnetDef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.AEPgCont", "epgDn-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.OutCont", "outDn-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ip.RouteDef", "rt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.top.Root")

    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Def")

    meta.rnPrefixes = [
        ('bd-', True),
        ('-isSvc-', True),
    ]

    prop = PropMeta("str", "bcastP", "bcastP", 50058, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("bcastP", prop)

    prop = PropMeta("str", "bdDn", "bdDn", 16318, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("bdDn", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 5579, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "encap", "encap", 43595, PropCategory.REGULAR)
    prop.label = "BD Encap"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("encap", prop)

    prop = PropMeta("str", "hostBasedRouting", "hostBasedRouting", 44664, PropCategory.REGULAR)
    prop.label = "BD host based routing"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("hostBasedRouting", prop)

    prop = PropMeta("str", "isSvc", "isSvc", 16319, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("isSvc", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "mcastAllow", "mcastAllow", 52025, PropCategory.REGULAR)
    prop.label = "Multicast Allow"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 1)
    prop._addConstant("ipv4PIM", "ipv4pim", 2)
    prop._addConstant("ipv6PIM", "ipv6pim", 4)
    prop._addConstant("none", "none", 0)
    meta.props.add("mcastAllow", prop)

    prop = PropMeta("str", "missingContent", "missingContent", 22704, PropCategory.REGULAR)
    prop.label = "Missing Content because of Version Mismatch at the time of the push"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("missingContent", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 23166, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15230, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15231, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "unicastRoute", "unicastRoute", 18077, PropCategory.REGULAR)
    prop.label = "Unicast Routing"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("unicastRoute", prop)

    meta.namingProps.append(getattr(meta.props, "bdDn"))
    getattr(meta.props, "bdDn").needDelimiter = True
    meta.namingProps.append(getattr(meta.props, "isSvc"))

    def __init__(self, parentMoOrDn, bdDn, isSvc, markDirty=True, **creationProps):
        namingVals = [bdDn, isSvc]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

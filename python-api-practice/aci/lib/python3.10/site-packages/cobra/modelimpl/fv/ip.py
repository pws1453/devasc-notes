# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Ip(Mo):
    """
    The IP address of an endpoint.

    """

    meta = ClassMeta("cobra.model.fv.Ip")

    meta.moClassName = "fvIp"
    meta.rnFormat = "ip-[%(addr)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Endpoint IP Address"
    meta.writeAccessMask = 0x601
    meta.readAccessMask = 0x430c601
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fv.ReportingNode")
    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fv.RtTrEpIpDst")
    meta.childClasses.add("cobra.model.fv.RtToEpIpForEpgToEp")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fv.RtFromEpIp")
    meta.childClasses.add("cobra.model.fv.RtTrEpIpSrc")
    meta.childClasses.add("cobra.model.fv.RtToEpIp")
    meta.childClasses.add("cobra.model.fv.RtTrExtEpIpDst")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.fv.RtTrEpExtIpSrc")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.fv.RtFromEpIpForEpToEpg")
    meta.childClasses.add("cobra.model.fv.RtToEpIpForEpToEp")

    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtTrEpExtIpSrc", "rttraceroutepTrEpExtIpSrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtFromEpIpForEpToEpg", "rtdbgacFromEpIpForEpToEpg-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtToEpIpForEpgToEp", "rtdbgacToEpIpForEpgToEp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtTrEpIpDst", "rttraceroutepTrEpIpDst-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtTrEpIpSrc", "rttraceroutepTrEpIpSrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtToEpIpForEpToEp", "rtdbgacToEpIpForEpToEp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtFromEpIp", "rtdbgacFromEpIp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtToEpIp", "rtdbgacToEpIp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtTrExtEpIpDst", "rttrExtEpIpDst"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.ReportingNode", "node-"))

    meta.parentClasses.add("cobra.model.fv.CEp")
    meta.parentClasses.add("cobra.model.fv.L3EpDef")
    meta.parentClasses.add("cobra.model.fv.EpDef")
    meta.parentClasses.add("cobra.model.fv.PodConnP")

    meta.rnPrefixes = [
        ('ip-', True),
    ]

    prop = PropMeta("str", "addr", "addr", 15314, PropCategory.REGULAR)
    prop.label = "IP Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("addr", prop)

    prop = PropMeta("str", "annotation", "annotation", 38084, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "createTs", "createTs", 44619, PropCategory.REGULAR)
    prop.label = "Endpoint Create TimeStamp"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("createTs", prop)

    prop = PropMeta("str", "debugMACMessage", "debugMACMessage", 41045, PropCategory.REGULAR)
    prop.label = "List of detected MACs with same IP in same Context."
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("debugMACMessage", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 40223, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "flags", "flags", 60604, PropCategory.REGULAR)
    prop.label = "Endpoint Properties and State"
    prop.isOper = True
    prop._addConstant("aging", "ep-is-aging", 16384)
    prop._addConstant("announce", "announce", 274877906944)
    prop._addConstant("announce-flush", "announce-flush", 2199023255552)
    prop._addConstant("anycast", "anycast", 8589934592)
    prop._addConstant("anycast-service", "anycast-service", 34359738368)
    prop._addConstant("arp", "arp-ep", 262144)
    prop._addConstant("bounce", "bounce-ep", 8)
    prop._addConstant("bounce-to-proxy", "bounced-to-spine-proxy", 1048576)
    prop._addConstant("cached", "cached-in-software-only", 8192)
    prop._addConstant("cdp", "cdp-neighbor-mac", 134217728)
    prop._addConstant("dsr-vip", "dsr-vip", 2097152)
    prop._addConstant("dtep", "dynamic-tep", 512)
    prop._addConstant("fhs-validation-pending", "fhs-validation-pending-ep", 17179869184)
    prop._addConstant("ht-attempt", "host-tracking-attempted", 4096)
    prop._addConstant("ip", "has-ip-info", 1024)
    prop._addConstant("lldp", "lldp-neighbor-mac", 268435456)
    prop._addConstant("local", "local-ep", 4)
    prop._addConstant("local-aged", "locally-aged", 16)
    prop._addConstant("loopback", "loopback-ip", 1073741824)
    prop._addConstant("mac", "has-mac-info", 2048)
    prop._addConstant("mac-ckt", "mac-based-epg-ep", 33554432)
    prop._addConstant("max-ip-flow-control", "maximum-number-of-ips-per-mac-exceeds-threshold", 35184372088832)
    prop._addConstant("nlb-vip", "nlb-vip", 17592186044416)
    prop._addConstant("peer-aged", "remotely-aged", 32)
    prop._addConstant("peer-attached", "singly-attached-endpoint-on-peer-vpc", 128)
    prop._addConstant("peer-attached-rl", "singly-attached-ep-over-singly-deployed-epg-on-peer-vpc-rl", 137438953472)
    prop._addConstant("proxy", "rl-direct-switching-proxy-ep", 4398046511104)
    prop._addConstant("psvi", "pervasive-svi-ep", 67108864)
    prop._addConstant("rogue", "rouge-ep", 524288)
    prop._addConstant("router", "router-ep", 256)
    prop._addConstant("router-mac", "router-mac", 536870912)
    prop._addConstant("service", "service-ep", 4294967296)
    prop._addConstant("shared-service", "shared-service-ep", 549755813888)
    prop._addConstant("span", "span-ep", 131072)
    prop._addConstant("static", "static-ep", 2)
    prop._addConstant("static-ipep", "static-ip-ep", 64)
    prop._addConstant("sticky", "sticky-ep", 8796093022208)
    prop._addConstant("svc-mgr", "service-manager-ep", 1099511627776)
    prop._addConstant("svi", "external-svi-ep", 65536)
    prop._addConstant("trust-sync", "trust-the-peer-bounce-notification", 68719476736)
    prop._addConstant("veth-ep", "veth-ep", 70368744177664)
    prop._addConstant("veth-peer", "veth-peer", 140737488355328)
    prop._addConstant("veth-peer-stl", "veth-peer-stale", 281474976710656)
    prop._addConstant("vpc-attached", "attached-to-vpc", 1)
    prop._addConstant("vtep", "vtep", 32768)
    meta.props.add("flags", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 24134, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    meta.namingProps.append(getattr(meta.props, "addr"))
    getattr(meta.props, "addr").needDelimiter = True

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToHcloudIgw", "Tenant to IGW", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToHcloudSecurityGroup", "Tenant to Security Group", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToVzCPIf", "Tenant to vzCPIf", "cobra.model.vz.CPIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHcloudIgw", "From fv:Ctx to hcloud:Igw", "cobra.model.hcloud.Igw"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHcloudVgw", "From fv:Ctx to hcloud:Vgw", "cobra.model.hcloud.Vgw"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToVzFilter", "From fvTenant to vzFilter", "cobra.model.vz.Filter"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToVnsAbsGraph", "From fvTenant to vnsAbsGraph", "cobra.model.vns.AbsGraph"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToCloudLB", "From fvTenant to cloudLB", "cobra.model.cloud.LB"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToCloudZone", "From fvTenant to cloudZone", "cobra.model.cloud.Zone"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudExtEPg", "From fvCtx (VRF) to cloudExtEPg", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudCtxProfile", "Tenant to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToVzBrCP", "Tenant to vzBrCP", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHcloudCsr", "Tenant to hcloudCsr", "cobra.model.hcloud.Csr"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudExtEPg", "fv:Tenant to cloud:ExtEPg", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudRegion", "From fvTenant to cloudRegion", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudRegion", "From fvCtx (VRF) to CloudRegion", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHcloudCsr", "From fvCtx (VRF) to hcloudCsr (CSR)", "cobra.model.hcloud.Csr"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHcloudRegion", "Tenant to hcloudRegion", "cobra.model.hcloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToFvCtx", "fvTenant to fvCtx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHcloudCtx", "Tenant to Hcloud context", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHCloudEndPoint", "From fvCtx (VRF) to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHCloudCtx", "From fvCtx (VRF) to hcloudCtx (VPC)", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudCtxProfile", "From fvCtx (VRF) to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudEPg", "From fvCtx (VRF) to cloud EPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHCloudEndPoint", "Tenant to hcloudEndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudApp", "Tenant to Application profile", "cobra.model.cloud.App"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudEPg", "Tenant to cloud EPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CtxToRegion", "Vrf to cloud Region", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ATgToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AEPgToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EPgToNwIf", "Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CtxToNwIf", "Private Network to Interface", "cobra.model.nw.If"))

    def __init__(self, parentMoOrDn, addr, markDirty=True, **creationProps):
        namingVals = [addr]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

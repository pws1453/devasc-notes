# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class BDDef(Mo):
    """
    A private layer 2 network context that belongs to a specific tenant or context, or is shared.

    """

    meta = ClassMeta("cobra.model.fv.BDDef")

    meta.moClassName = "fvBDDef"
    meta.rnFormat = "bd-[%(bdDn)s]-isSvc-%(isSvc)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Bridge Domain"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x10010000021001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.childClasses.add("cobra.model.netflow.MonitorPolHolder")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fv.AEPgCont")
    meta.childClasses.add("cobra.model.fhs.BDDef")
    meta.childClasses.add("cobra.model.netflow.ExporterPolHolder")
    meta.childClasses.add("cobra.model.fv.RtToRemoteBDDef")
    meta.childClasses.add("cobra.model.fv.RtSrcToBDDef")
    meta.childClasses.add("cobra.model.fv.RtCrtrnDefToBDDef")
    meta.childClasses.add("cobra.model.igmp.SnoopDef")
    meta.childClasses.add("cobra.model.nd.IfPolDef")
    meta.childClasses.add("cobra.model.fv.IPSLADef")
    meta.childClasses.add("cobra.model.fv.EpRetDef")
    meta.childClasses.add("cobra.model.mld.SnoopDef")
    meta.childClasses.add("cobra.model.igmp.IfDef")
    meta.childClasses.add("cobra.model.ip.RouteDef")
    meta.childClasses.add("cobra.model.fv.OutCont")
    meta.childClasses.add("cobra.model.arp.IfPolDef")
    meta.childClasses.add("cobra.model.fv.BDConfigIssues")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.dhcp.LblDef")

    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtSrcToBDDef", "rtspanSrcToBDDef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtCrtrnDefToBDDef", "rtCrtrnDefToBDDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtToRemoteBDDef", "rttoRemoteBDDef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.netflow.ExporterPolHolder", "exporterpolh-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.netflow.MonitorPolHolder", "monitorpolh-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.BDConfigIssues", "bdcfgissues"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcp.LblDef", "dhcplbldef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.IPSLADef", "IPSLADef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.igmp.IfDef", "igmpIfDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.arp.IfPolDef", "arpifpold"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nd.IfPolDef", "ndifpold"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mld.SnoopDef", "mldsnPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.AEPgCont", "epgDn-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.EpRetDef", "epRPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.OutCont", "outDn-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fhs.BDDef", "bddef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.igmp.SnoopDef", "snPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ip.RouteDef", "rt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.pol.Uni")

    meta.superClasses.add("cobra.model.fv.ABD")
    meta.superClasses.add("cobra.model.fv.L2Dom")
    meta.superClasses.add("cobra.model.fv.Def")
    meta.superClasses.add("cobra.model.pol.DefRoot")
    meta.superClasses.add("cobra.model.fv.Dom")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Def")

    meta.rnPrefixes = [
        ('bd-', True),
        ('-isSvc-', True),
    ]

    prop = PropMeta("str", "OptimizeWanBandwidth", "OptimizeWanBandwidth", 34472, PropCategory.REGULAR)
    prop.label = "Optimize Wan Bandwidth between sites"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("OptimizeWanBandwidth", prop)

    prop = PropMeta("str", "accEncap", "accEncap", 15217, PropCategory.REGULAR)
    prop.label = "Access Encapsulation"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("accEncap", prop)

    prop = PropMeta("str", "arpFlood", "arpFlood", 1693, PropCategory.REGULAR)
    prop.label = "ARP Flooding"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("arpFlood", prop)

    prop = PropMeta("str", "bcastP", "bcastP", 1691, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("bcastP", prop)

    prop = PropMeta("str", "bdDn", "bdDn", 1703, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("bdDn", prop)

    prop = PropMeta("str", "bdStretch", "bdStretch", 55337, PropCategory.REGULAR)
    prop.label = "BD Stretch between sites flag"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("bdStretch", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "configIssues", "configIssues", 26448, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "ok"
    prop._addConstant("FHS-enabled-on-l2-only-bd", "first-hop-security-enabled-on-layer-2-only-bridge-domain", 2)
    prop._addConstant("bd-cannot-combine-hardware-proxy-and-flood-in-encapsulation", "bd-cannot-combine-hardware-proxy-and-flood-in-encapsulation", 8)
    prop._addConstant("igmp-snoop-disabled-on-multicast-if", "igmpsnoop-disabled-on-multicast-enabled-bd", 1)
    prop._addConstant("ok", "ok", 0)
    meta.props.add("configIssues", prop)

    prop = PropMeta("str", "ctxDefDn", "ctxDefDn", 1704, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("ctxDefDn", prop)

    prop = PropMeta("str", "ctxDefStQual", "ctxDefStQual", 1706, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("default-target", "default-target", 2)
    prop._addConstant("mismatch-target", "mismatch-target", 1)
    prop._addConstant("none", "none", 0)
    meta.props.add("ctxDefStQual", prop)

    prop = PropMeta("str", "descr", "descr", 5614, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "epClear", "epClear", 31106, PropCategory.REGULAR)
    prop.label = "Clear Endpoints"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("epClear", prop)

    prop = PropMeta("str", "epMoveDetectMode", "epMoveDetectMode", 19110, PropCategory.REGULAR)
    prop.label = "EP Move Detection Mode"
    prop.isConfig = True
    prop.isAdmin = True
    prop._addConstant("garp", "garp-based-detection", 1)
    meta.props.add("epMoveDetectMode", prop)

    prop = PropMeta("str", "intersiteBumTrafficAllow", "intersiteBumTrafficAllow", 30545, PropCategory.REGULAR)
    prop.label = "Allow BUM traffic between sites"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("intersiteBumTrafficAllow", prop)

    prop = PropMeta("str", "intersiteL2Stretch", "intersiteL2Stretch", 33178, PropCategory.REGULAR)
    prop.label = "Allow l2Stretch between sites"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("intersiteL2Stretch", prop)

    prop = PropMeta("str", "ipLearning", "ipLearning", 21254, PropCategory.REGULAR)
    prop.label = "Ip Learning"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = True
    prop.defaultValueStr = "yes"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("ipLearning", prop)

    prop = PropMeta("str", "ipv6McastAllow", "ipv6McastAllow", 47406, PropCategory.REGULAR)
    prop.label = "ipv6 Multicast Allow"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("ipv6McastAllow", prop)

    prop = PropMeta("str", "isCopySvc", "isCopySvc", 26363, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("isCopySvc", prop)

    prop = PropMeta("str", "isPolicyEnforced", "isPolicyEnforced", 15218, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = True
    prop.defaultValueStr = "yes"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("isPolicyEnforced", prop)

    prop = PropMeta("str", "isSvc", "isSvc", 1705, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("isSvc", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "limitIpLearnToSubnets", "limitIpLearnToSubnets", 20851, PropCategory.REGULAR)
    prop.label = "Limit IP learning to BD subnets only"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = True
    prop.defaultValueStr = "yes"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("limitIpLearnToSubnets", prop)

    prop = PropMeta("str", "llAddr", "llAddr", 16876, PropCategory.REGULAR)
    prop.label = "IPv6 Link Local Address"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("llAddr", prop)

    prop = PropMeta("str", "mac", "mac", 1698, PropCategory.REGULAR)
    prop.label = "MAC Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 280487012409856
    prop.defaultValueStr = "00:22:BD:F8:19:FF"
    meta.props.add("mac", prop)

    prop = PropMeta("str", "mcastAllow", "mcastAllow", 24916, PropCategory.REGULAR)
    prop.label = "Multicast Allow"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("mcastAllow", prop)

    prop = PropMeta("str", "missingContent", "missingContent", 22703, PropCategory.REGULAR)
    prop.label = "Missing Content because of Version Mismatch at the time of the push"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("missingContent", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14243, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "mtu", "mtu", 1697, PropCategory.REGULAR)
    prop.label = "MTU Size"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(576, 9216)]
    prop.defaultValue = 1
    prop.defaultValueStr = "inherit"
    prop._addConstant("inherit", "inherit", 1)
    meta.props.add("mtu", prop)

    prop = PropMeta("str", "multiDstPktAct", "multiDstPktAct", 18026, PropCategory.REGULAR)
    prop.label = "Multi Destination Packet Action"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "bd-flood"
    prop._addConstant("bd-flood", "flood-in-bd", 0)
    prop._addConstant("drop", "drop", 2)
    prop._addConstant("encap-flood", "flood-in-encapsulation", 1)
    meta.props.add("multiDstPktAct", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15230, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15231, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "pcTag", "pcTag", 1695, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("any", "any", 0)
    meta.props.add("pcTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "scope", "scope", 1694, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 16777215)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("scope", prop)

    prop = PropMeta("str", "seg", "seg", 1766, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("seg", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "type", "type", 1702, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "regular"
    prop._addConstant("fc", "fc", 2)
    prop._addConstant("regular", "regular", 1)
    meta.props.add("type", prop)

    prop = PropMeta("str", "unicastRoute", "unicastRoute", 1692, PropCategory.REGULAR)
    prop.label = "Unicast Routing"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = True
    prop.defaultValueStr = "yes"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("unicastRoute", prop)

    prop = PropMeta("str", "unkMacUcastAct", "unkMacUcastAct", 1696, PropCategory.REGULAR)
    prop.label = "Unknown Mac Unicast Action"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "proxy"
    prop._addConstant("flood", "flood", 0)
    prop._addConstant("proxy", "hardware-proxy", 1)
    meta.props.add("unkMacUcastAct", prop)

    prop = PropMeta("str", "unkMcastAct", "unkMcastAct", 16164, PropCategory.REGULAR)
    prop.label = "Unknown Multicast Destination Action"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "flood"
    prop._addConstant("flood", "flood", 0)
    prop._addConstant("opt-flood", "optimized-flood", 1)
    meta.props.add("unkMcastAct", prop)

    prop = PropMeta("str", "v6unkMcastAct", "v6unkMcastAct", 47702, PropCategory.REGULAR)
    prop.label = "Unknown V6 Multicast Destination Action"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "flood"
    prop._addConstant("flood", "flood", 0)
    prop._addConstant("opt-flood", "optimized-flood", 1)
    meta.props.add("v6unkMcastAct", prop)

    prop = PropMeta("str", "vmac", "vmac", 21204, PropCategory.REGULAR)
    prop.label = "Virtual MAC Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "not-applicable"
    prop._addConstant("not-applicable", "not-configured", 0)
    meta.props.add("vmac", prop)

    meta.namingProps.append(getattr(meta.props, "bdDn"))
    getattr(meta.props, "bdDn").needDelimiter = True
    meta.namingProps.append(getattr(meta.props, "isSvc"))

    def __init__(self, parentMoOrDn, bdDn, isSvc, markDirty=True, **creationProps):
        namingVals = [bdDn, isSvc]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

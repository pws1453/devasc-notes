# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class RsDomAtt(Mo):
    """
    An EPG can be linked to a domain profile via the Associated Domain Profiles. The domain profiles attached can be VMM, Physical, L2 External, or L3 External Domains.

    """

    meta = SourceRelationMeta("cobra.model.fv.RsDomAtt", "cobra.model.infra.DomP")
    meta.cardinality = SourceRelationMeta.N_TO_M

    meta.moClassName = "fvRsDomAtt"
    meta.rnFormat = "rsdomAtt-[%(tDn)s]"
    meta.category = MoCategory.RELATIONSHIP_TO_LOCAL
    meta.label = "Domain"
    meta.writeAccessMask = 0x611
    meta.readAccessMask = 0x611
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fv.UplinkOrderCont")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.tag.AliasDelInst")
    meta.childClasses.add("cobra.model.fv.AEPgLagPolAtt")
    meta.childClasses.add("cobra.model.tag.ExtMngdInst")
    meta.childClasses.add("cobra.model.tag.AliasInst")
    meta.childClasses.add("cobra.model.vmm.SecP")
    meta.childClasses.add("cobra.model.tag.Inst")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.AEPgLagPolAtt", "epglagpolatt"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.UplinkOrderCont", "uplinkorder"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasDelInst", "aliasdel-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.ExtMngdInst", "extmngd"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasInst", "alias"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Inst", "tag-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.SecP", "sec"))

    meta.parentClasses.add("cobra.model.fv.AEPg")

    meta.superClasses.add("cobra.model.reln.Inst")
    meta.superClasses.add("cobra.model.reln.To")

    meta.rnPrefixes = [
        ('rsdomAtt-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 37661, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "bindingType", "bindingType", 44516, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("dynamicBinding", "dynamic-binding", 2)
    prop._addConstant("ephemeral", "ephemeral", 3)
    prop._addConstant("none", "default", 0)
    prop._addConstant("staticBinding", "static-binding", 1)
    meta.props.add("bindingType", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "classPref", "classPref", 23486, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "encap"
    prop._addConstant("encap", "packet-encapsulation", 0)
    prop._addConstant("useg", "useg", 1)
    meta.props.add("classPref", prop)

    prop = PropMeta("str", "configIssues", "configIssues", 27720, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("allow-useg-inconsistent", "allow-useg-flag-inconsistent-across-vmm-domain-(dvs)-attaches", 2048)
    prop._addConstant("bd-id-not-allocated", "bd-ids-not-allocated", 256)
    prop._addConstant("bd-not-present", "bd-not-present", 1)
    prop._addConstant("context-id-not-allocated", "context-ids-not-allocated", 512)
    prop._addConstant("context-not-present", "context-not-present.-configure-context-and/or-attach-context-to-bridge-group-domain.", 2)
    prop._addConstant("encap-assignment", "encapsulation-not-valid", 8)
    prop._addConstant("id-not-allocated", "ids-not-allocated", 4)
    prop._addConstant("instrimedcy-unsupported", "on-demand-deployment-immediacy-is-not-supported-for-useg-epg-associated-to-vmware-dvs-domain", 1024)
    prop._addConstant("invalid-rel-to-rtctrlProfile", "invalid-association-to-route-control-policy", 32)
    prop._addConstant("l3port-and-sub-interface-on-path", "l3-port-and-sub-interface-not-allowed-on-same-path", 128)
    prop._addConstant("none", "none", 0)
    prop._addConstant("not-associated-with-mgmt-zone", "not-associated-with-management-zone", 64)
    meta.props.add("configIssues", prop)

    prop = PropMeta("str", "customEpgName", "customEpgName", 56471, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 80)]
    meta.props.add("customEpgName", prop)

    prop = PropMeta("str", "delimiter", "delimiter", 26231, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.range = [(0, 1)]
    prop.regex = ['[^a-zA-Z0-9;>"-*`,-.;\\[\\]/\\{}:?\\s&<]+']
    meta.props.add("delimiter", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "encap", "encap", 20385, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("encap", prop)

    prop = PropMeta("str", "encapMode", "encapMode", 27724, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "auto"
    prop._addConstant("auto", "auto", 0)
    prop._addConstant("vlan", "vlan", 1)
    prop._addConstant("vxlan", "vxlan", 2)
    meta.props.add("encapMode", prop)

    prop = PropMeta("str", "epgCos", "epgCos", 33158, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "Cos0"
    prop._addConstant("Cos0", "cos0", 0)
    prop._addConstant("Cos1", "cos1", 1)
    prop._addConstant("Cos2", "cos2", 2)
    prop._addConstant("Cos3", "cos3", 3)
    prop._addConstant("Cos4", "cos4", 4)
    prop._addConstant("Cos5", "cos5", 5)
    prop._addConstant("Cos6", "cos6", 6)
    prop._addConstant("Cos7", "cos7", 7)
    meta.props.add("epgCos", prop)

    prop = PropMeta("str", "epgCosPref", "epgCosPref", 33188, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 1)
    prop._addConstant("enabled", "enabled", 2)
    meta.props.add("epgCosPref", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 39800, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "forceResolve", "forceResolve", 107, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = True
    prop.defaultValueStr = "yes"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("forceResolve", prop)

    prop = PropMeta("str", "instrImedcy", "instrImedcy", 12327, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "lazy"
    prop._addConstant("immediate", "immediate", 1)
    prop._addConstant("lazy", "on-demand", 2)
    meta.props.add("instrImedcy", prop)

    prop = PropMeta("str", "lagPolicyName", "lagPolicyName", 44366, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("lagPolicyName", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 26214, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "default"
    prop._addConstant("cf", "cloud-foundry", 6)
    prop._addConstant("default", "distributed-switch", 0)
    prop._addConstant("k8s", "kubernetes", 4)
    prop._addConstant("n1kv", "cisco-avs", 1)
    prop._addConstant("openshift", "openshift", 7)
    prop._addConstant("ovs", "open-vswitch", 3)
    prop._addConstant("rhev", "rhev", 5)
    prop._addConstant("unknown", "unknown", 2)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14288, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "netflowDir", "netflowDir", 31105, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 3
    prop.defaultValueStr = "both"
    prop._addConstant("both", "both", 3)
    prop._addConstant("egress", "egress", 2)
    prop._addConstant("ingress", "ingress", 1)
    meta.props.add("netflowDir", prop)

    prop = PropMeta("str", "netflowPref", "netflowPref", 27589, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 1)
    prop._addConstant("enabled", "enabled", 2)
    meta.props.add("netflowPref", prop)

    prop = PropMeta("str", "numPorts", "numPorts", 44517, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("numPorts", prop)

    prop = PropMeta("str", "portAllocation", "portAllocation", 44518, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("elastic", "elastic", 2)
    prop._addConstant("fixed", "fixed", 1)
    prop._addConstant("none", "default", 0)
    meta.props.add("portAllocation", prop)

    prop = PropMeta("str", "primaryEncap", "primaryEncap", 23487, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("primaryEncap", prop)

    prop = PropMeta("str", "primaryEncapInner", "primaryEncapInner", 34693, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("primaryEncapInner", prop)

    prop = PropMeta("str", "rType", "rType", 106, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "mo"
    prop._addConstant("local", "local", 3)
    prop._addConstant("mo", "mo", 1)
    prop._addConstant("service", "service", 2)
    meta.props.add("rType", prop)

    prop = PropMeta("str", "resImedcy", "resImedcy", 12328, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "lazy"
    prop._addConstant("immediate", "immediate", 1)
    prop._addConstant("lazy", "on-demand", 2)
    prop._addConstant("pre-provision", "pre-provision", 3)
    meta.props.add("resImedcy", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "secondaryEncapInner", "secondaryEncapInner", 34694, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("secondaryEncapInner", prop)

    prop = PropMeta("str", "state", "state", 103, PropCategory.REGULAR)
    prop.label = "State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unformed"
    prop._addConstant("cardinality-violation", "cardinality-violation", 5)
    prop._addConstant("formed", "formed", 1)
    prop._addConstant("invalid-target", "invalid-target", 4)
    prop._addConstant("missing-target", "missing-target", 2)
    prop._addConstant("unformed", "unformed", 0)
    meta.props.add("state", prop)

    prop = PropMeta("str", "stateQual", "stateQual", 104, PropCategory.REGULAR)
    prop.label = "State Qualifier"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("default-target", "default-target", 2)
    prop._addConstant("mismatch-target", "mismatch-target", 1)
    prop._addConstant("none", "none", 0)
    meta.props.add("stateQual", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "switchingMode", "switchingMode", 35613, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "native"
    prop._addConstant("AVE", "ave", 1)
    prop._addConstant("native", "native", 0)
    meta.props.add("switchingMode", prop)

    prop = PropMeta("str", "tCl", "tCl", 12326, PropCategory.REGULAR)
    prop.label = "Target-class"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 4517
    prop.defaultValueStr = "infraDomP"
    prop._addConstant("extdevGroupP", None, 12672)
    prop._addConstant("fcDomP", None, 8727)
    prop._addConstant("infraDomP", None, 4517)
    prop._addConstant("l2extDomDef", None, 1745)
    prop._addConstant("l2extDomP", None, 1744)
    prop._addConstant("l3extDomDef", None, 1780)
    prop._addConstant("l3extDomP", None, 1779)
    prop._addConstant("physDomP", None, 1809)
    prop._addConstant("unspecified", "unspecified", 0)
    prop._addConstant("vmmDomP", None, 2136)
    prop._addConstant("vmmDomPDef", None, 2147)
    meta.props.add("tCl", prop)

    prop = PropMeta("str", "tDn", "tDn", 12325, PropCategory.REGULAR)
    prop.label = "Target-dn"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("tDn", prop)

    prop = PropMeta("str", "tType", "tType", 105, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "mo"
    prop._addConstant("all", "all", 2)
    prop._addConstant("mo", "mo", 1)
    prop._addConstant("name", "name", 0)
    meta.props.add("tType", prop)

    prop = PropMeta("str", "triggerSt", "triggerSt", 12329, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "not_triggerable"
    prop._addConstant("not_triggerable", "not_triggerable", 0)
    prop._addConstant("triggerable", "triggerable", 1)
    meta.props.add("triggerSt", prop)

    prop = PropMeta("str", "txId", "txId", 26233, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("txId", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "untagged", "untagged", 54983, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("untagged", prop)

    prop = PropMeta("str", "vnetOnly", "vnetOnly", 62493, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("vnetOnly", prop)

    meta.namingProps.append(getattr(meta.props, "tDn"))
    getattr(meta.props, "tDn").needDelimiter = True

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ATgToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AEPgToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EPgToNwIf", "Interface", "cobra.model.nw.If"))

    def __init__(self, parentMoOrDn, tDn, markDirty=True, **creationProps):
        namingVals = [tDn]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

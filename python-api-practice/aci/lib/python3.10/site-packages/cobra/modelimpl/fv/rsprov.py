# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class RsProv(Mo):
    """
    A contract for which the EPG will be a provider.

    """

    meta = NamedSourceRelationMeta("cobra.model.fv.RsProv", "cobra.model.vz.BrCP")
    meta.targetNameProps["name"] = "tnVzBrCPName"
    meta.cardinality = SourceRelationMeta.N_TO_M

    meta.moClassName = "fvRsProv"
    meta.rnFormat = "rsprov-%(tnVzBrCPName)s"
    meta.category = MoCategory.RELATIONSHIP_TO_LOCAL
    meta.label = "Contract Provider"
    meta.writeAccessMask = 0x601
    meta.readAccessMask = 0x701
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.vz.ProvLbl")
    meta.childClasses.add("cobra.model.fv.CollectionCont")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.tag.AliasDelInst")
    meta.childClasses.add("cobra.model.tag.ExtMngdInst")
    meta.childClasses.add("cobra.model.tag.AliasInst")
    meta.childClasses.add("cobra.model.vz.ProvSubjLbl")
    meta.childClasses.add("cobra.model.tag.Inst")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.CollectionCont", "collectionDn-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vz.ProvSubjLbl", "provsubjlbl-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasDelInst", "aliasdel-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vz.ProvLbl", "provlbl-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.ExtMngdInst", "extmngd"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasInst", "alias"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Inst", "tag-"))

    meta.parentClasses.add("cobra.model.fv.AEPg")
    meta.parentClasses.add("cobra.model.infra.CEPg")
    meta.parentClasses.add("cobra.model.l2ext.InstP")
    meta.parentClasses.add("cobra.model.vns.SHEPpInfo")
    meta.parentClasses.add("cobra.model.vns.REPpInfo")
    meta.parentClasses.add("cobra.model.cloud.EPg")
    meta.parentClasses.add("cobra.model.cloud.ExtEPg")
    meta.parentClasses.add("cobra.model.vns.EPpInfo")
    meta.parentClasses.add("cobra.model.mgmt.InB")
    meta.parentClasses.add("cobra.model.l3ext.InstP")
    meta.parentClasses.add("cobra.model.vns.SDEPpInfo")
    meta.parentClasses.add("cobra.model.fv.TnlEPg")
    meta.parentClasses.add("cobra.model.infra.PEPg")
    meta.parentClasses.add("cobra.model.cloud.ISvcEPg")
    meta.parentClasses.add("cobra.model.dhcp.PRelPg")
    meta.parentClasses.add("cobra.model.dhcp.CRelPg")
    meta.parentClasses.add("cobra.model.l3ext.InstPDef")

    meta.superClasses.add("cobra.model.reln.To")
    meta.superClasses.add("cobra.model.fv.EPgToCollection")
    meta.superClasses.add("cobra.model.reln.Inst")
    meta.superClasses.add("cobra.model.pol.NToRef")

    meta.rnPrefixes = [
        ('rsprov-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 37651, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctrctUpd", "ctrctUpd", 1722, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "ctrct"
    prop._addConstant("ctrct", "ctrct", 0)
    prop._addConstant("epg", "epg", 1)
    prop._addConstant("not_defined", "not_defined", 0)
    meta.props.add("ctrctUpd", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 39790, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "forceResolve", "forceResolve", 107, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = True
    prop.defaultValueStr = "yes"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("forceResolve", prop)

    prop = PropMeta("str", "intent", "intent", 55646, PropCategory.REGULAR)
    prop.label = "Install Rules or Estimate Nummber of Rules"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "install"
    prop._addConstant("estimate_add", "process-configuration-and-estimate-number-of-rules-for-adding-contract", 2)
    prop._addConstant("estimate_delete", "process-configuration-and-estimate-number-of-rules-for-deleting-contract", 1)
    prop._addConstant("install", "install-rules-in-hardware", 0)
    meta.props.add("intent", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "matchT", "matchT", 12237, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "AtleastOne"
    prop._addConstant("All", "all", 1)
    prop._addConstant("AtleastOne", "atleastone", 2)
    prop._addConstant("AtmostOne", "atmostone", 3)
    prop._addConstant("None", "none", 4)
    meta.props.add("matchT", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14256, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "prio", "prio", 12238, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 9)]
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("level1", "level1", 3)
    prop._addConstant("level2", "level2", 2)
    prop._addConstant("level3", "level3-(default)", 1)
    prop._addConstant("level4", "level4", 9)
    prop._addConstant("level5", "level5", 8)
    prop._addConstant("level6", "level6", 7)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("prio", prop)

    prop = PropMeta("str", "rType", "rType", 106, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "mo"
    prop._addConstant("local", "local", 3)
    prop._addConstant("mo", "mo", 1)
    prop._addConstant("service", "service", 2)
    meta.props.add("rType", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "state", "state", 103, PropCategory.REGULAR)
    prop.label = "State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unformed"
    prop._addConstant("cardinality-violation", "cardinality-violation", 5)
    prop._addConstant("formed", "formed", 1)
    prop._addConstant("invalid-target", "invalid-target", 4)
    prop._addConstant("missing-target", "missing-target", 2)
    prop._addConstant("unformed", "unformed", 0)
    meta.props.add("state", prop)

    prop = PropMeta("str", "stateQual", "stateQual", 104, PropCategory.REGULAR)
    prop.label = "State Qualifier"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("default-target", "default-target", 2)
    prop._addConstant("mismatch-target", "mismatch-target", 1)
    prop._addConstant("none", "none", 0)
    meta.props.add("stateQual", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tCl", "tCl", 12236, PropCategory.REGULAR)
    prop.label = "Target-class"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1300
    prop.defaultValueStr = "vzBrCP"
    prop._addConstant("unspecified", "unspecified", 0)
    prop._addConstant("vzBrCP", None, 1300)
    meta.props.add("tCl", prop)

    prop = PropMeta("str", "tContextDn", "tContextDn", 4990, PropCategory.REGULAR)
    prop.label = "Target-context"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("tContextDn", prop)

    prop = PropMeta("str", "tDn", "tDn", 100, PropCategory.REGULAR)
    prop.label = "Target-dn"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("tDn", prop)

    prop = PropMeta("str", "tRn", "tRn", 4989, PropCategory.REGULAR)
    prop.label = "Target-rn"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("tRn", prop)

    prop = PropMeta("str", "tType", "tType", 4988, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "name"
    prop._addConstant("all", "all", 2)
    prop._addConstant("mo", "mo", 1)
    prop._addConstant("name", "name", 0)
    meta.props.add("tType", prop)

    prop = PropMeta("str", "tnVzBrCPName", "tnVzBrCPName", 12235, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("tnVzBrCPName", prop)

    prop = PropMeta("str", "triggerSt", "triggerSt", 1723, PropCategory.REGULAR)
    prop.label = "Ability to Trigger Task"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "not_triggerable"
    prop._addConstant("not_triggerable", "not_triggerable", 0)
    prop._addConstant("triggerable", "triggerable", 1)
    meta.props.add("triggerSt", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "updateCollection", "updateCollection", 20832, PropCategory.REGULAR)
    prop.label = "Implicitly set in any transaction where an update is needed"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("updateCollection", prop)

    meta.namingProps.append(getattr(meta.props, "tnVzBrCPName"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToConsVzBrCP", "From cloud ExtEPg to Consumer Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToProvVzBrCP", "From cloud ExtEPg to Provider Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToConsVzBrCP", "From EPg to Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToProvVzBrCP", "From EPg to Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToFvCtx", "cloud:ExtEPg to fv:Ctx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToHCloudEndPoint", "cloud:ExtEPg to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToHcloudSecurityGroup", "cloud:ExtEPg to hcloud:SecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToHCloudCtx", "From cloud ExtEPg to VPCs hCloudCtx", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToHcloudSecurityGroup", "cloud:EPg to hcloud:SecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToFvCtx", "cloud:EPg to fv:Ctx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToHCloudEndPoint", "cloud:EPg to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToHCloudCtx", "From cloud EPg to VPCs hCloudCtx", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("cloudEpgToApp", "cloudEpgToApp", "cobra.model.cloud.App"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ATgToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AEPgToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("InBToNode", "Node", "cobra.model.fv.Locale"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EPgToNwIf", "Interface", "cobra.model.nw.If"))

    def __init__(self, parentMoOrDn, tnVzBrCPName, markDirty=True, **creationProps):
        namingVals = [tnVzBrCPName]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

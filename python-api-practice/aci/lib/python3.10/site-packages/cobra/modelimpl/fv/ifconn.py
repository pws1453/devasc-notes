# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class IfConn(Mo):
    """
    Connectivity parameters for an interface.

    """

    meta = ClassMeta("cobra.model.fv.IfConn")

    meta.moClassName = "fvIfConn"
    meta.rnFormat = "conn-[%(encap)s]-[%(addr)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Interface Connectivity"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x10060042532a081
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.l3ext.FloatingIfDef")
    meta.childClasses.add("cobra.model.mgmt.IpDef")
    meta.childClasses.add("cobra.model.fv.QinqFabEncapDef")
    meta.childClasses.add("cobra.model.qos.EgressDppPolHolder")
    meta.childClasses.add("cobra.model.dpp.IfCktDropPart1mo")
    meta.childClasses.add("cobra.model.dpp.IfCktDropAg1w")
    meta.childClasses.add("cobra.model.fv.RtIpAddr")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowPartHist1year")
    meta.childClasses.add("cobra.model.dpp.IfCktDropPart5min")
    meta.childClasses.add("cobra.model.dpp.IfCktDropAg1d")
    meta.childClasses.add("cobra.model.dpp.IfCktDropAgHist1mo")
    meta.childClasses.add("cobra.model.dpp.IfCktDropAg1h")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowAgHist1mo")
    meta.childClasses.add("cobra.model.dpp.IfCktDropPart15min")
    meta.childClasses.add("cobra.model.nd.PfxPolDef")
    meta.childClasses.add("cobra.model.fv.RtExtBD")
    meta.childClasses.add("cobra.model.dpp.IfCktDropPartHist1mo")
    meta.childClasses.add("cobra.model.dpp.IfCktDropAgHist15min")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowPartHist15min")
    meta.childClasses.add("cobra.model.dpp.IfCktDropPartHist5min")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowAg1qtr")
    meta.childClasses.add("cobra.model.fv.RtSrcToFvIfConn")
    meta.childClasses.add("cobra.model.qos.CustomPolDef")
    meta.childClasses.add("cobra.model.dpp.IfCktDropPart1qtr")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.bgp.InfraPeerDef")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowAg1h")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowAg1year")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowAg1d")
    meta.childClasses.add("cobra.model.dpp.IfCktDropPartHist1year")
    meta.childClasses.add("cobra.model.ospf.IfDef")
    meta.childClasses.add("cobra.model.dpp.IfCktDropAg1mo")
    meta.childClasses.add("cobra.model.dhcp.LblDef")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.qos.ClassLevelDef")
    meta.childClasses.add("cobra.model.eigrp.IfDef")
    meta.childClasses.add("cobra.model.nd.IfPolDef")
    meta.childClasses.add("cobra.model.bgp.PeerDef")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowAg1w")
    meta.childClasses.add("cobra.model.bfd.IfDef")
    meta.childClasses.add("cobra.model.dpp.IfCktDropAg15min")
    meta.childClasses.add("cobra.model.fv.EpDefRef")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowPart5min")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowPartHist1w")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowPart1mo")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowAgHist1d")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowPartHist1d")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowPartHist1qtr")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowAgHist1h")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowPartHist1h")
    meta.childClasses.add("cobra.model.dpp.IfCktDropAgHist1w")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowPart1d")
    meta.childClasses.add("cobra.model.dpp.IfCktDropAg1qtr")
    meta.childClasses.add("cobra.model.dpp.IfCktDropAgHist1year")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowPart1h")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowPartHist5min")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowPart1w")
    meta.childClasses.add("cobra.model.dpp.IfCktDropAgHist1d")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowPart1qtr")
    meta.childClasses.add("cobra.model.fv.TunDefRef")
    meta.childClasses.add("cobra.model.dpp.IfCktDropPartHist1qtr")
    meta.childClasses.add("cobra.model.hsrp.IfDef")
    meta.childClasses.add("cobra.model.igmp.IfDef")
    meta.childClasses.add("cobra.model.dpp.IfCktDropAgHist1h")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.arp.IfPolDef")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowAgHist1qtr")
    meta.childClasses.add("cobra.model.fv.RtTrExtExtSrcToFvIfConn")
    meta.childClasses.add("cobra.model.netflow.MonitorPolHolder")
    meta.childClasses.add("cobra.model.ptp.CfgDef")
    meta.childClasses.add("cobra.model.netflow.ExporterPolHolder")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fv.RtTrExtEpSrcToFvIfConn")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowAg15min")
    meta.childClasses.add("cobra.model.fv.RtDppIfCreatedByFvIfConn")
    meta.childClasses.add("cobra.model.dpp.IfCktDropAg1year")
    meta.childClasses.add("cobra.model.fv.RsToDomDef")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowAg1mo")
    meta.childClasses.add("cobra.model.qos.IngressDppPolHolder")
    meta.childClasses.add("cobra.model.l3ext.IpDef")
    meta.childClasses.add("cobra.model.fv.RtL3If")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowAgHist1w")
    meta.childClasses.add("cobra.model.fv.RtRouteToIfConn")
    meta.childClasses.add("cobra.model.dpp.IfCktDropPart1w")
    meta.childClasses.add("cobra.model.dpp.IfCktDropPart1h")
    meta.childClasses.add("cobra.model.dpp.IfCktDropPart1d")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowPartHist1mo")
    meta.childClasses.add("cobra.model.dpp.IfCktDropAgHist1qtr")
    meta.childClasses.add("cobra.model.dpp.IfCktDropPart1year")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowPart15min")
    meta.childClasses.add("cobra.model.rtdmc.McastIfDefCont")
    meta.childClasses.add("cobra.model.fv.RsDomIfConn")
    meta.childClasses.add("cobra.model.dpp.IfCktDropPartHist15min")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowPart1year")
    meta.childClasses.add("cobra.model.rtdmc.IPV6McastIfDefCont")
    meta.childClasses.add("cobra.model.fv.PrimaryEncapDef")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowAgHist1year")
    meta.childClasses.add("cobra.model.l3ext.ForwarderAddrDef")
    meta.childClasses.add("cobra.model.dpp.IfCktDropPartHist1d")
    meta.childClasses.add("cobra.model.dpp.IfCktDropPartHist1h")
    meta.childClasses.add("cobra.model.dpp.IfCktAllowAgHist15min")
    meta.childClasses.add("cobra.model.fv.RsIpCktEpIfConn")
    meta.childClasses.add("cobra.model.dpp.IfCktDropPartHist1w")

    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtTrExtExtSrcToFvIfConn", "rttraceroutepTrExtExtSrcToFvIfConn-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtTrExtEpSrcToFvIfConn", "rttraceroutepTrExtEpSrcToFvIfConn-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowPartHist1year", "HDdppIfCktAllowPart1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowPartHist15min", "HDdppIfCktAllowPart15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowPart15min", "CDdppIfCktAllowPart15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowPart1year", "CDdppIfCktAllowPart1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropPart15min", "CDdppIfCktDropPart15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropPartHist1year", "HDdppIfCktDropPart1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowPart5min", "CDdppIfCktAllowPart5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowPartHist1qtr", "HDdppIfCktAllowPart1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowPartHist5min", "HDdppIfCktAllowPart5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowPart1qtr", "CDdppIfCktAllowPart1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtDppIfCreatedByFvIfConn", "rtDppIfCreatedByFvIfConn"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropPart1year", "CDdppIfCktDropPart1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropPartHist15min", "HDdppIfCktDropPart15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropPart5min", "CDdppIfCktDropPart5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropPartHist5min", "HDdppIfCktDropPart5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropPart1qtr", "CDdppIfCktDropPart1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowPart1mo", "CDdppIfCktAllowPart1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropPartHist1qtr", "HDdppIfCktDropPart1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowPartHist1mo", "HDdppIfCktAllowPart1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowAgHist1year", "HDdppIfCktAllowAg1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowAgHist15min", "HDdppIfCktAllowAg15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropPart1mo", "CDdppIfCktDropPart1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropPartHist1mo", "HDdppIfCktDropPart1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropAgHist15min", "HDdppIfCktDropAg15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowAg1year", "CDdppIfCktAllowAg1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowPartHist1w", "HDdppIfCktAllowPart1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowPartHist1d", "HDdppIfCktAllowPart1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowPartHist1h", "HDdppIfCktAllowPart1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowPart1d", "CDdppIfCktAllowPart1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropAgHist1year", "HDdppIfCktDropAg1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowPart1h", "CDdppIfCktAllowPart1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowPart1w", "CDdppIfCktAllowPart1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowAgHist1qtr", "HDdppIfCktAllowAg1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowAg15min", "CDdppIfCktAllowAg15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowAgHist1mo", "HDdppIfCktAllowAg1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowAg1qtr", "CDdppIfCktAllowAg1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropAg15min", "CDdppIfCktDropAg15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropAg1year", "CDdppIfCktDropAg1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropPart1w", "CDdppIfCktDropPart1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropPart1h", "CDdppIfCktDropPart1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropPart1d", "CDdppIfCktDropPart1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropAgHist1qtr", "HDdppIfCktDropAg1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropPartHist1d", "HDdppIfCktDropPart1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropPartHist1h", "HDdppIfCktDropPart1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropPartHist1w", "HDdppIfCktDropPart1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropAgHist1mo", "HDdppIfCktDropAg1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtSrcToFvIfConn", "rtspanSrcToFvIfConn-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowAgHist1d", "HDdppIfCktAllowAg1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowAgHist1h", "HDdppIfCktAllowAg1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropAg1qtr", "CDdppIfCktDropAg1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowAg1mo", "CDdppIfCktAllowAg1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowAgHist1w", "HDdppIfCktAllowAg1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowAg1h", "CDdppIfCktAllowAg1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowAg1d", "CDdppIfCktAllowAg1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropAg1mo", "CDdppIfCktDropAg1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktAllowAg1w", "CDdppIfCktAllowAg1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropAgHist1w", "HDdppIfCktDropAg1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropAgHist1d", "HDdppIfCktDropAg1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropAgHist1h", "HDdppIfCktDropAg1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropAg1w", "CDdppIfCktDropAg1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropAg1d", "CDdppIfCktDropAg1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.IfCktDropAg1h", "CDdppIfCktDropAg1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtRouteToIfConn", "rtipRouteToIfConn-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.rtdmc.IPV6McastIfDefCont", "v6mcastifdefcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RsIpCktEpIfConn", "rsipCktEpIfConn"))
    meta.childNamesAndRnPrefix.append(("cobra.model.rtdmc.McastIfDefCont", "mcastifdefcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3ext.ForwarderAddrDef", "forwarderaddr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3ext.FloatingIfDef", "floatingifdef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.netflow.ExporterPolHolder", "exporterpolh-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.netflow.MonitorPolHolder", "monitorpolh-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qos.EgressDppPolHolder", "eqosdpppolh"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.InfraPeerDef", "infraPeerP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcp.LblDef", "dhcplbldef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RsToDomDef", "rstoDomDef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qos.IngressDppPolHolder", "iqosdpppolh"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RsDomIfConn", "rsdomIfConn"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qos.CustomPolDef", "qoscustom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qos.ClassLevelDef", "classlevel"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.TunDefRef", "tundefref-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.PrimaryEncapDef", "primencap-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nd.PfxPolDef", "ndpfxpold"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.EpDefRef", "epdefref-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.hsrp.IfDef", "hsrpIfDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.igmp.IfDef", "igmpIfDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.arp.IfPolDef", "arpifpold"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ptp.CfgDef", "ptpCfgDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtIpAddr", "rtipAddr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eigrp.IfDef", "eigrpIfP"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nd.IfPolDef", "ndifpold"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bfd.IfDef", "bfdIfDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mgmt.IpDef", "mipdef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtExtBD", "rtextBD"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ospf.IfDef", "ospfIfP"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.QinqFabEncapDef", "encap-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.PeerDef", "peerP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtL3If", "rtl3If"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3ext.IpDef", "addr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.fv.ConnDef")

    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Comp")
    meta.superClasses.add("cobra.model.fv.AIfConn")

    meta.rnPrefixes = [
        ('conn-', True),
        ('-', True),
    ]

    prop = PropMeta("str", "addr", "addr", 1745, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("addr", prop)

    prop = PropMeta("str", "auto", "auto", 1747, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("auto", prop)

    prop = PropMeta("str", "autostate", "autostate", 34167, PropCategory.REGULAR)
    prop.label = "SVI AutoState"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 0)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("autostate", prop)

    prop = PropMeta("str", "bcastP", "bcastP", 1743, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("bcastP", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "classPref", "classPref", 23431, PropCategory.REGULAR)
    prop.label = "Classification Preference"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "encap"
    prop._addConstant("encap", "packet-encapsulation", 0)
    prop._addConstant("useg", "useg", 1)
    meta.props.add("classPref", prop)

    prop = PropMeta("str", "descr", "descr", 5582, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "encap", "encap", 1741, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("encap", prop)

    prop = PropMeta("str", "extEncap", "extEncap", 1742, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("extEncap", prop)

    prop = PropMeta("str", "gw", "gw", 1746, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("gw", prop)

    prop = PropMeta("str", "ifInstT", "ifInstT", 16252, PropCategory.REGULAR)
    prop.label = "Interface Instantiation Directive"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 12
    prop.defaultValueStr = "l3-port"
    prop._addConstant("bridged", "pure-l2-ports", 2)
    prop._addConstant("ext-svi", "external-svi", 13)
    prop._addConstant("l3-port", "routed-interface", 12)
    prop._addConstant("sub-interface", "routed-sub-interface", 11)
    meta.props.add("ifInstT", prop)

    prop = PropMeta("str", "ipv6Dad", "ipv6Dad", 42722, PropCategory.REGULAR)
    prop.label = "IPv6 DAD"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 0)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("ipv6Dad", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "llAddr", "llAddr", 16877, PropCategory.REGULAR)
    prop.label = "IPv6 Link Local Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("llAddr", prop)

    prop = PropMeta("str", "mac", "mac", 1744, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("mac", prop)

    prop = PropMeta("str", "mcastAddr", "mcastAddr", 1750, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("mcastAddr", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 1748, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "regular"
    prop._addConstant("native", "access-(802.1p)", 1)
    prop._addConstant("regular", "trunk", 0)
    prop._addConstant("untagged", "access-(untagged)", 2)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14274, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "mtu", "mtu", 1749, PropCategory.REGULAR)
    prop.label = "MTU Size"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(576, 9216)]
    prop.defaultValue = 1
    prop.defaultValueStr = "inherit"
    prop._addConstant("inherit", "inherit", 1)
    meta.props.add("mtu", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "resImedcy", "resImedcy", 1751, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "lazy"
    prop._addConstant("immediate", "immediate", 1)
    prop._addConstant("lazy", "on-demand", 2)
    prop._addConstant("pre-provision", "pre-provision", 3)
    meta.props.add("resImedcy", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "validState", "validState", 25987, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "not-validated"
    prop._addConstant("invalid", "invalid", 2)
    prop._addConstant("not-validated", "not-validated", 0)
    prop._addConstant("valid", "valid", 1)
    meta.props.add("validState", prop)

    meta.namingProps.append(getattr(meta.props, "encap"))
    getattr(meta.props, "encap").needDelimiter = True
    meta.namingProps.append(getattr(meta.props, "addr"))
    getattr(meta.props, "addr").needDelimiter = True

    def __init__(self, parentMoOrDn, encap, addr, markDirty=True, **creationProps):
        namingVals = [encap, addr]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

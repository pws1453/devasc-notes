# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class CtxDef(Mo):
    """
    A private L3 network context belonging to a specific tenant. This is an internal representation of the context.

    """

    meta = ClassMeta("cobra.model.fv.CtxDef")

    meta.moClassName = "fvCtxDef"
    meta.rnFormat = "ctx-[%(ctxDn)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Private Network"
    meta.writeAccessMask = 0x2001
    meta.readAccessMask = 0x10010020023603
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fv.ExtConnTrack")
    meta.childClasses.add("cobra.model.fv.RtToInbCtxDef")
    meta.childClasses.add("cobra.model.fv.LCtxDef")
    meta.childClasses.add("cobra.model.fv.L3EpScanInfo")
    meta.childClasses.add("cobra.model.pim.IPV6CtxDef")
    meta.childClasses.add("cobra.model.fv.RtPullRemoteCtxDef")
    meta.childClasses.add("cobra.model.fv.ProtEPg")
    meta.childClasses.add("cobra.model.fv.RtFvCtxDef")
    meta.childClasses.add("cobra.model.fv.AEPgCont")
    meta.childClasses.add("cobra.model.fv.RtToFvInbCtxDef")
    meta.childClasses.add("cobra.model.cloud.CtxHolder")
    meta.childClasses.add("cobra.model.fv.EpRetDef")
    meta.childClasses.add("cobra.model.igmp.CtxDef")
    meta.childClasses.add("cobra.model.l3ext.GlobalCtxNameDef")
    meta.childClasses.add("cobra.model.vz.CtrctEntityDef")
    meta.childClasses.add("cobra.model.snmp.CtxDef")
    meta.childClasses.add("cobra.model.vz.ResPcTagCont")
    meta.childClasses.add("cobra.model.fv.RtToFvCtxDef")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.fv.RtToRemoteCtxDef")
    meta.childClasses.add("cobra.model.fv.L3EpCont")
    meta.childClasses.add("cobra.model.bgp.AutoRtTargetPDef")
    meta.childClasses.add("cobra.model.bgp.RtTargetPDef")
    meta.childClasses.add("cobra.model.fv.RtToCtxDef")
    meta.childClasses.add("cobra.model.fv.RtSrvCtxDef")
    meta.childClasses.add("cobra.model.fv.CtxConfigIssues")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fv.RtSrcToCtxDef")
    meta.childClasses.add("cobra.model.dns.LblDef")
    meta.childClasses.add("cobra.model.telemetry.SubnetFltGrpDef")
    meta.childClasses.add("cobra.model.pim.CtxDef")
    meta.childClasses.add("cobra.model.vz.AnyREpPCont")
    meta.childClasses.add("cobra.model.extdev.SDWanVpnDef")
    meta.childClasses.add("cobra.model.fv.AssocBDDefCont")

    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtPullRemoteCtxDef", "rtresolutionPullRemoteCtxDef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtSrvCtxDef", "rtanalyticsSrvCtxDef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtSrcToCtxDef", "rtspanSrcToCtxDef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtToRemoteCtxDef", "rttoRemoteCtxDef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtFvCtxDef", "rtcloudFvCtxDef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtToFvInbCtxDef", "rttoFvInbCtxDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pim.IPV6CtxDef", "pimipv6ctxpdef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtToInbCtxDef", "rtToInbCtxDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3ext.GlobalCtxNameDef", "globalctxname"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.AssocBDDefCont", "assocBddefDn-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.ExtConnTrack", "extconntrack"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.L3EpScanInfo", "l3EpScanInfo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vz.ResPcTagCont", "resPcTagCont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtToFvCtxDef", "rttoFvCtxDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.CtxConfigIssues", "ctxcfgissues"))
    meta.childNamesAndRnPrefix.append(("cobra.model.extdev.SDWanVpnDef", "sdwanvpndef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vz.AnyREpPCont", "anyreppcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cloud.CtxHolder", "ctxholder-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.igmp.CtxDef", "igmpctxdef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtToCtxDef", "rttoCtxDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.telemetry.SubnetFltGrpDef", "sfltgrpdef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pim.CtxDef", "pimctxpdef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.L3EpCont", "l3epcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.AutoRtTargetPDef", "autortp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vz.CtrctEntityDef", "entity-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.snmp.CtxDef", "snmpctx"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dns.LblDef", "dnslbl-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.AEPgCont", "epgDn-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.EpRetDef", "epRPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.ProtEPg", "prot-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.LCtxDef", "lCtx"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.RtTargetPDef", "rtp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.pol.Uni")

    meta.superClasses.add("cobra.model.fv.Def")
    meta.superClasses.add("cobra.model.pol.DefRoot")
    meta.superClasses.add("cobra.model.fv.Dom")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Def")
    meta.superClasses.add("cobra.model.fv.L3Dom")
    meta.superClasses.add("cobra.model.fv.ACtx")

    meta.rnPrefixes = [
        ('ctx-', True),
    ]

    prop = PropMeta("str", "bdEnforcedEnable", "bdEnforcedEnable", 32657, PropCategory.REGULAR)
    prop.label = "BD Enforcement Status"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("bdEnforcedEnable", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctxDn", "ctxDn", 1771, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("ctxDn", prop)

    prop = PropMeta("str", "descr", "descr", 5614, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "eppCount", "eppCount", 44789, PropCategory.REGULAR)
    prop.label = "Number of EpPs in this VRF deployed on the same leaf where this CtxDef is present"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("eppCount", prop)

    prop = PropMeta("str", "ipDataPlaneLearning", "ipDataPlaneLearning", 44631, PropCategory.REGULAR)
    prop.label = "Data Plane Learning"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 1)
    prop._addConstant("enabled", "enabled", 2)
    meta.props.add("ipDataPlaneLearning", prop)

    prop = PropMeta("str", "knwMcastAct", "knwMcastAct", 1769, PropCategory.REGULAR)
    prop.label = "Known Multicast Action"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "permit"
    prop._addConstant("deny", "deny", 0)
    prop._addConstant("permit", "permit", 1)
    meta.props.add("knwMcastAct", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "missingContent", "missingContent", 22705, PropCategory.REGULAR)
    prop.label = "Missing Content because of Version Mismatch at the time of the push"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("missingContent", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14296, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15230, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15231, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "pcEnfDir", "pcEnfDir", 23112, PropCategory.REGULAR)
    prop.label = "Policy Enforcement Direction"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "egress"
    prop._addConstant("egress", "egress", 1)
    prop._addConstant("ingress", "ingress", 0)
    meta.props.add("pcEnfDir", prop)

    prop = PropMeta("str", "pcEnfDirUpdated", "pcEnfDirUpdated", 23164, PropCategory.REGULAR)
    prop.label = "Policy Enforcement Direction Post Upgrade Status"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("pcEnfDirUpdated", prop)

    prop = PropMeta("str", "pcEnfPref", "pcEnfPref", 1770, PropCategory.REGULAR)
    prop.label = "Policy Control Enforcement"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enforced"
    prop._addConstant("enforced", "enforced", 1)
    prop._addConstant("unenforced", "unenforced", 2)
    meta.props.add("pcEnfPref", prop)

    prop = PropMeta("str", "pcTag", "pcTag", 1768, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("any", "any", 0)
    meta.props.add("pcTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "scope", "scope", 1767, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 16777215)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("scope", prop)

    prop = PropMeta("str", "seg", "seg", 1766, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("seg", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "ctxDn"))
    getattr(meta.props, "ctxDn").needDelimiter = True

    def __init__(self, parentMoOrDn, ctxDn, markDirty=True, **creationProps):
        namingVals = [ctxDn]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

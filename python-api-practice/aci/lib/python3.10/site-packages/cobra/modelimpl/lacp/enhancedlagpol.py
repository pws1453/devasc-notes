# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class EnhancedLagPol(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.lacp.EnhancedLagPol")

    meta.moClassName = "lacpEnhancedLagPol"
    meta.rnFormat = "enlacplagp-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Enhanced LACP Policy"
    meta.writeAccessMask = 0x2000000000011
    meta.readAccessMask = 0x2000001000615
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.lacp.RtVmmVSwitchEnhancedLagPol")
    meta.childClasses.add("cobra.model.lacp.RtUsrCustomAggrLagPolAtt")
    meta.childClasses.add("cobra.model.lacp.RtUsrAggrLagPolAtt")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.tag.AliasDelInst")
    meta.childClasses.add("cobra.model.tag.ExtMngdInst")
    meta.childClasses.add("cobra.model.lacp.RtPrefEnhancedLagPol")
    meta.childClasses.add("cobra.model.tag.AliasInst")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.tag.Inst")
    meta.childClasses.add("cobra.model.lacp.RtVSwitchEnhancedLagPol")

    meta.childNamesAndRnPrefix.append(("cobra.model.lacp.RtVmmVSwitchEnhancedLagPol", "rtfvVmmVSwitchEnhancedLagPol-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lacp.RtVSwitchEnhancedLagPol", "rtl3extVSwitchEnhancedLagPol-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lacp.RtUsrCustomAggrLagPolAtt", "rtvmmUsrCustomAggrLagPolAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lacp.RtPrefEnhancedLagPol", "rtvmmPrefEnhancedLagPol-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lacp.RtUsrAggrLagPolAtt", "rtvmmUsrAggrLagPolAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasDelInst", "aliasdel-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.ExtMngdInst", "extmngd"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasInst", "alias"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Inst", "tag-"))

    meta.parentClasses.add("cobra.model.vmm.VSwitchPolicyCont")

    meta.superClasses.add("cobra.model.lacp.AEnhancedLagPol")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.naming.NamedIdentifiedObject")

    meta.rnPrefixes = [
        ('enlacplagp-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 44378, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 44379, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "id", "id", 5586, PropCategory.REGULAR)
    prop.label = "Id"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "lbmode", "lbmode", 44889, PropCategory.REGULAR)
    prop.label = "LoadBalancing Mode"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 13
    prop.defaultValueStr = "src-dst-ip"
    prop._addConstant("dst-ip", "destination-ip-address", 1)
    prop._addConstant("dst-ip-l4port", "destination-ip-address-and-tcp/udp-port", 2)
    prop._addConstant("dst-ip-l4port-vlan", "destination-ip-address,-tcp/udp-port-and-vlan", 4)
    prop._addConstant("dst-ip-vlan", "destination-ip-address-and-vlan", 3)
    prop._addConstant("dst-l4port", "destination-tcp/udp-port", 6)
    prop._addConstant("dst-mac", "destination-mac-address", 5)
    prop._addConstant("src-dst-ip", "source-and-destination-ip-address", 13)
    prop._addConstant("src-dst-ip-l4port", "source-and-destination-ip-address-and-tcp/udp-port", 14)
    prop._addConstant("src-dst-ip-l4port-vlan", "source-and-destination-ip-address,-tcp/udp-port-and-vlan", 16)
    prop._addConstant("src-dst-ip-vlan", "source-and-destination-ip-address-and-vlan", 15)
    prop._addConstant("src-dst-l4port", "source-and-destination-tcp/udp-port", 18)
    prop._addConstant("src-dst-mac", "source-and-destination-mac-address", 17)
    prop._addConstant("src-ip", "source-ip-address", 7)
    prop._addConstant("src-ip-l4port", "source-ip-address-and-tcp/udp-port", 8)
    prop._addConstant("src-ip-l4port-vlan", "source-ip-address,-tcp/udp-port-and-vlan", 10)
    prop._addConstant("src-ip-vlan", "source-ip-address-and-vlan", 9)
    prop._addConstant("src-l4port", "source-tcp/udp-port", 12)
    prop._addConstant("src-mac", "source-mac-address", 11)
    prop._addConstant("src-port-id", "source-port-id", 19)
    prop._addConstant("vlan", "vlan", 20)
    meta.props.add("lbmode", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 44890, PropCategory.REGULAR)
    prop.label = "LACP Mode"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "active"
    prop._addConstant("active", "lacp-active", 1)
    prop._addConstant("passive", "lacp-passive", 2)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 44375, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 44364, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "numLinks", "numLinks", 44891, PropCategory.REGULAR)
    prop.label = "Number of Links"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(2, 8)]
    prop.defaultValue = 2
    prop.defaultValueStr = "2"
    meta.props.add("numLinks", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVmmOrchsProvPlan", "Provider Plans", "cobra.model.vmm.OrchsProvPlan"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ADomPToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVmmEpPD", "Portgroups", "cobra.model.vmm.EpPD"))

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

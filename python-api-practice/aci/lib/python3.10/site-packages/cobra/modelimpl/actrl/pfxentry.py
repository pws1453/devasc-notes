# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class PfxEntry(Mo):
    """
    The prefix list entry definition.

    """

    meta = ClassMeta("cobra.model.actrl.PfxEntry")

    meta.moClassName = "actrlPfxEntry"
    meta.rnFormat = "pfx-[%(addr)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Prefix Entry"
    meta.writeAccessMask = 0x400000000101
    meta.readAccessMask = 0x400000000101
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.actrl.PfxEntryConsumerCount")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.ip.Cons")

    meta.childNamesAndRnPrefix.append(("cobra.model.actrl.PfxEntryConsumerCount", "pfxConsCount"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ip.Cons", "cons-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.l3.Ctx")

    meta.superClasses.add("cobra.model.nw.FltEntry")
    meta.superClasses.add("cobra.model.pol.Instr")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")

    meta.rnPrefixes = [
        ('pfx-', True),
    ]

    prop = PropMeta("str", "actrlCfgFailedBmp", "actrlCfgFailedBmp", 14957, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("actrl:PfxEntryaddr_failed_flag", None, 64)
    prop._addConstant("actrl:PfxEntrydescr_failed_flag", None, 4)
    prop._addConstant("actrl:PfxEntrylcOwn_failed_flag", None, -9223372036854775808)
    prop._addConstant("actrl:PfxEntrymodTs_failed_flag", None, 2305843009213693952)
    prop._addConstant("actrl:PfxEntrynameAlias_failed_flag", None, 2)
    prop._addConstant("actrl:PfxEntryname_failed_flag", None, 1)
    prop._addConstant("actrl:PfxEntrypcTag_failed_flag", None, 512)
    prop._addConstant("actrl:PfxEntrypfxInstrScope_failed_flag", None, 1024)
    meta.props.add("actrlCfgFailedBmp", prop)

    prop = PropMeta("str", "actrlCfgFailedTs", "actrlCfgFailedTs", 14959, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("actrlCfgFailedTs", prop)

    prop = PropMeta("str", "actrlCfgState", "actrlCfgState", 14958, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("actrlCfgState", prop)

    prop = PropMeta("str", "addr", "addr", 2140, PropCategory.REGULAR)
    prop.label = "Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("addr", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 5581, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 3683, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "operSt", "operSt", 2142, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "operStQual", "operStQual", 2143, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop._addConstant("hwprog-fail", "hardware-programming-failed", 1)
    prop._addConstant("hwprog-fail-hash-collision", "hardware-programming-failed-due-to-hash-collision", 8)
    prop._addConstant("hwprog-fail-tcam-full", "hardware-programming-failed-as-tcam-was-full", 4)
    prop._addConstant("swprog-fail", "software-programming-failed", 2)
    meta.props.add("operStQual", prop)

    prop = PropMeta("str", "pcTag", "pcTag", 2141, PropCategory.REGULAR)
    prop.label = "PC Tag"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("any", "any", 0)
    meta.props.add("pcTag", prop)

    prop = PropMeta("str", "pfxInstrScope", "pfxInstrScope", 20377, PropCategory.REGULAR)
    prop.label = "Prefix Instrumentation Scope"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = "context,local"
    prop.defaultValueStr = "context,local"
    prop._addConstant("context", "instrument-prefix-in-consumers-context", 2)
    prop._addConstant("local", "instrument-prefix-in-consumers-context", 4)
    prop._addConstant("remote", "instrument-prefix-in-consumers-context", 8)
    prop._addConstant("shared", "shared-prefix-instrumentation-on-consumers-node", 1)
    meta.props.add("pfxInstrScope", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "addr"))
    getattr(meta.props, "addr").needDelimiter = True

    def __init__(self, parentMoOrDn, addr, markDirty=True, **creationProps):
        namingVals = [addr]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

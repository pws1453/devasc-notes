# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class ConfIssue(Mo):
    """
    

    """

    meta = ClassMeta("cobra.model.vns.ConfIssue")

    meta.moClassName = "vnsConfIssue"
    meta.rnFormat = "vnsConfIssue-%(issue)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Config Issue holder"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.vns.GraphInst")
    meta.parentClasses.add("cobra.model.vns.MDevMgr")
    meta.parentClasses.add("cobra.model.vns.NextHopInfo")
    meta.parentClasses.add("cobra.model.vns.GRel")
    meta.parentClasses.add("cobra.model.vns.CIf")
    meta.parentClasses.add("cobra.model.cloud.LDevDef")
    meta.parentClasses.add("cobra.model.vns.ParamInst")
    meta.parentClasses.add("cobra.model.vns.LDevIf")
    meta.parentClasses.add("cobra.model.vns.AbsFuncConn")
    meta.parentClasses.add("cobra.model.vns.NodeInst")
    meta.parentClasses.add("cobra.model.vns.CDev")
    meta.parentClasses.add("cobra.model.cloud.LB")
    meta.parentClasses.add("cobra.model.vns.AbsNode")
    meta.parentClasses.add("cobra.model.vns.DevParam")
    meta.parentClasses.add("cobra.model.vns.LDevVip")
    meta.parentClasses.add("cobra.model.vns.CopyConnector")
    meta.parentClasses.add("cobra.model.vns.AbsParam")
    meta.parentClasses.add("cobra.model.vns.Chassis")
    meta.parentClasses.add("cobra.model.vns.LIf")
    meta.parentClasses.add("cobra.model.vns.TermConnInst")
    meta.parentClasses.add("cobra.model.vns.DevMgr")
    meta.parentClasses.add("cobra.model.vns.LDevIfLIf")
    meta.parentClasses.add("cobra.model.vns.AbsCfgRel")
    meta.parentClasses.add("cobra.model.vns.TermNodeInst")
    meta.parentClasses.add("cobra.model.vns.AbsFuncProf")
    meta.parentClasses.add("cobra.model.vns.CtrlrEp")
    meta.parentClasses.add("cobra.model.vns.AbsFolder")
    meta.parentClasses.add("cobra.model.vns.DevFolder")
    meta.parentClasses.add("cobra.model.vns.AbsTermConn")
    meta.parentClasses.add("cobra.model.vns.FuncConnInst")
    meta.parentClasses.add("cobra.model.vns.MChassis")
    meta.parentClasses.add("cobra.model.vns.InTerm")
    meta.parentClasses.add("cobra.model.vns.AbsGraph")
    meta.parentClasses.add("cobra.model.cloud.CDevDef")
    meta.parentClasses.add("cobra.model.cloud.LIfDef")
    meta.parentClasses.add("cobra.model.vns.GFolder")
    meta.parentClasses.add("cobra.model.vns.MgmtLIf")
    meta.parentClasses.add("cobra.model.vns.NodeInstDef")
    meta.parentClasses.add("cobra.model.vns.AbsTermNodeProv")
    meta.parentClasses.add("cobra.model.vns.CfgRelInst")
    meta.parentClasses.add("cobra.model.vns.AbsTermNodeCon")
    meta.parentClasses.add("cobra.model.vns.OutTerm")
    meta.parentClasses.add("cobra.model.vns.GParam")
    meta.parentClasses.add("cobra.model.vns.FolderInst")

    meta.rnPrefixes = [
        ('vnsConfIssue-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "issue", "issue", 18584, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 0
    prop.defaultValueStr = "ok"
    prop._addConstant("absgraph-has-fault", "corresponding-absgraph-has-fault", 110)
    prop._addConstant("anycast-on-both-pbr-and-connector", "anycast-ip/mac-configured-on-pbr-and-device-selection-policy", 143)
    prop._addConstant("arp-flood-enabled", "arp-flood-is-enabled-on-the-management-end-point-group", 46)
    prop._addConstant("bgp-peer-missing", "bgp-peer-missing", 75)
    prop._addConstant("both-lifs-should-have-same-encap", "invalid-encapsulation-on-lif", 121)
    prop._addConstant("cdev-missing-cif", "no-interface-defined.-it-must-have-at-least-one-interface-defined", 35)
    prop._addConstant("cdev-missing-mgmt-ip", "no-mgmt-ip-found-for-cdev", 22)
    prop._addConstant("cdev-missing-path-for-interface", "missing-path-for-interface.", 36)
    prop._addConstant("cdev-missing-virtual-info", "virtual-object-info-like-vcenter-name-and-vm-name-is-missing-in-cdev", 53)
    prop._addConstant("cfgrel-key-mismatch", "cfgrel-key-mismatch", 81)
    prop._addConstant("chassis-cmgmts-not-found", "no-cmgmts-configured-for-chassis", 102)
    prop._addConstant("chassis-credentials-not-found", "ccred/ccredsecret-missing-for-chassis", 104)
    prop._addConstant("chassis-not-found", "could-not-find-the-chassis-configured-for-the-device", 97)
    prop._addConstant("cif-missing-virtual-info", "virtual-object-like-vnic-name-is-missing-in-cif", 57)
    prop._addConstant("conflicting-import-prefixes", "import-prefixes-are-conflicting-on-the-same-device", 88)
    prop._addConstant("conflicting-router-id", "two-different-router-ids-are-specified-for-the-same-device", 87)
    prop._addConstant("context-cardinality-violation-failure", "invalid-cluster-context-cardinality", 8)
    prop._addConstant("copy-config-mismatch", "copy-config-between-two-nodes-does-not-match", 114)
    prop._addConstant("copy-invalid-SvcBD", "could-not-create-svcbd-for-copy-node", 156)
    prop._addConstant("copy-invalid-lifctx", "lifctx-for-copy-device-is-invalid", 115)
    prop._addConstant("copydev-invalid-lif-cnt", "copy-device-has-invalid-lifs", 117)
    prop._addConstant("copydev-invalid-pathattn-count", "invalid-number-of-path-attachments-for-a-copy-device", 116)
    prop._addConstant("devfolder-validation-failed", "devfolder-has-key,-that-is-not-found-in-mfolder", 51)
    prop._addConstant("devmgr-cmgmts-not-found", "no-cmgmts-configured-for-devmgr", 101)
    prop._addConstant("devmgr-credentials-not-found", "ccred/ccredsecret-missing-for-devmgr", 103)
    prop._addConstant("devmgr-not-found", "could-not-find-the-device-manager-configured-for-the-cluster", 94)
    prop._addConstant("devmgr-validation-failed", "cluster-is-not-supported-by-device-manager", 65)
    prop._addConstant("devparam-validation-failed", "devparam-has-key-and/or-value,-that-are-not-found-in-mparam", 52)
    prop._addConstant("empty-relation-target", "emty-relation-target", 76)
    prop._addConstant("encap-allocation-conflict-for-virtual-cluster-interface", "encap-is-already-allocated-for-a-virtual-cluster-interface.", 120)
    prop._addConstant("epp-download-failure", "epp-download-failure", 4)
    prop._addConstant("folderinst-name-or-label-less-restrictive", "folderinst-name-or-label-is-less-restrictive-than-its-parent", 105)
    prop._addConstant("folderinst-validation-failed", "folderinst-has-key,-that-is-not-found-in-mfolder", 47)
    prop._addConstant("function-type-mismatch-failure", "invalid-function-type", 9)
    prop._addConstant("gothrough-routing-enabled-both", "both-the-legs-of-go-through-node-has-routing-enabled", 43)
    prop._addConstant("gothru-same-bd", "both-the-legs-of-go-through-node-are-attached-to-same-bd", 63)
    prop._addConstant("graph-loop-detected", "service-graph-template-configuration-is-invalid.-it-has-a-loop", 42)
    prop._addConstant("has-vzAny-Prov-Cons", "vzany-as-provider-and-consumer-is-supported-only-in-single-node-pbr-with-1-arm", 132)
    prop._addConstant("healthgroup-association-missing", "pbr-tracking-is-enabled-but-health-group-association-is-missing-in-redirect-destination", 127)
    prop._addConstant("id-allocation-failure", "id-allocation-failure", 6)
    prop._addConstant("inappropriate-devfolder", "illegal-folder-in-configuration.", 32)
    prop._addConstant("insufficient-devctx", "folder-must-have-one-value-for-each-associated-cdev.", 34)
    prop._addConstant("internal-error", "internal-error-occured-during-graph-processing.`", 17)
    prop._addConstant("intra-epg-non-supported-case", "intra-epg-supported-only-in-single-node,-1-arm-pbr-or-single-node-copy-service", 140)
    prop._addConstant("invalid-absfunc-profile", "service-graph-template-function-profile-config-is-invalid.", 30)
    prop._addConstant("invalid-abstract-graph-config", "invalid-abstract-graph-config", 1)
    prop._addConstant("invalid-abstract-graph-config-param", "invalid-abstract-graph-config-param", 10)
    prop._addConstant("invalid-aconn-parent", "invalid-function/terminal-connector", 91)
    prop._addConstant("invalid-config", "configuration-of-this-device-contains-errors", 61)
    prop._addConstant("invalid-conn-for-configparam", "config-param-is-using-an-invalid-graph-connector.", 55)
    prop._addConstant("invalid-connection", "absgraph-connection-is-invalid.", 56)
    prop._addConstant("invalid-default-folder-name", "invalid-default-folder-name", 82)
    prop._addConstant("invalid-destname-config", "invalid-destname-config", 141)
    prop._addConstant("invalid-devcfg-folder", "devcfg-folder-has-invalid-configuration-parameters.", 62)
    prop._addConstant("invalid-devctx", "device-context-is-not-valid-for-this-folder.", 33)
    prop._addConstant("invalid-dualip-configuration-in-redirectdestination", "pbr-redirect-destination-dual-ip-config-is-invalid", 128)
    prop._addConstant("invalid-filter-from-unidir-ctrct", "graph-cannot-be-attached-to-unidir-contract-that-has-the-same-filter-in-and-out", 131)
    prop._addConstant("invalid-filter-referred-by-rsconntoflt", "absgraph-connector-is-pointing-to-an-invalid-filter.", 58)
    prop._addConstant("invalid-graphinst", "graphinst-config-is-invalid", 23)
    prop._addConstant("invalid-ibgp-configuration", "invalid-ibgp-configuration-for-route-peering", 71)
    prop._addConstant("invalid-l1-l2-pbr-bd-config", "invalid-l1/l2-pbr-bd-config.", 150)
    prop._addConstant("invalid-l1-l2-pbr-config", "invalid-l1/l2-pbr-config.", 148)
    prop._addConstant("invalid-l3instp-config", "invalid-l3instp-config", 155)
    prop._addConstant("invalid-l3out-service-leg-config", "invalid-l3out-service-leg-config", 154)
    prop._addConstant("invalid-lb-connector-config", "external-load-balancer-connector-cannot-have-redirect-policy.", 147)
    prop._addConstant("invalid-ldev", "invalid-cluster", 15)
    prop._addConstant("invalid-lifctx-config", "invalid-lifctx-config", 153)
    prop._addConstant("invalid-mfolder", "folderinst-points-to-an-invalid-mfolder", 49)
    prop._addConstant("invalid-namespace-allocation-mode", "vlaninstp-has-invalid-allocation-mode:-static.-allocation-mode-should-be-dynamic.", 50)
    prop._addConstant("invalid-ospf-areas", "invalid-ospf-area-configuration-for-route-peering", 72)
    prop._addConstant("invalid-param-config", "invalid-param-config", 13)
    prop._addConstant("invalid-param-scope", "invalid-parameter-scope", 14)
    prop._addConstant("invalid-pbr-backup-config", "invalid-pbr-backup-config", 157)
    prop._addConstant("invalid-pbr-bypass-config", "invalid-pbr-bypass-config", 152)
    prop._addConstant("invalid-redirect-policy", "invalid-service-redirect-policy", 118)
    prop._addConstant("invalid-relation-target", "relation-target-parameter-could-not-be-resolved.", 54)
    prop._addConstant("invalid-rsmconnatt", "invalid-rsmconnatt-mo-which-points-to-connector", 21)
    prop._addConstant("invalid-srcref-in-folder", "l4-l7-abstract-folder-has-an-invalid-srcref", 125)
    prop._addConstant("invalid-srcref-in-parameter", "l4-l7-abstract-parameter-has-an-invalid-srcref", 126)
    prop._addConstant("invalid-svigateway-configuration-in-subnet", "no-default-svi-gateway-configuration-in-subnet-is-enabled", 129)
    prop._addConstant("invalid-terminal-nodes", "service-graph-template-must-have-two-or-more-terminal-nodes", 44)
    prop._addConstant("invalid-trunk-mode", "trunked-port-group-option-specified-for-physical-device", 111)
    prop._addConstant("ipsla-association-missing", "redirect-destination-is-associated-to-health-group-but-tracking-is-disabled", 137)
    prop._addConstant("l2-adj-type-with-l3instp", "connection-adjacency-type-l2-does-not-support-l3extinstp-relation", 66)
    prop._addConstant("l3instp-path-att-not-svi", "path-attachment-of-l3extinstp-has-to-be-of-type-svi-for-virtual-devices", 68)
    prop._addConstant("ldevvip-missing-mgmt-ip", "no-mgmt-ip-found-for-ldevvip", 38)
    prop._addConstant("lif-has-invalid-encap", "invalid-encapsulation-on-lif", 100)
    prop._addConstant("lif-has-invalid-interface-label", "lif-has-an-invalid-miflbl", 39)
    prop._addConstant("lif-has-no-relation-to-cif", "lif-has-no-relation-to-cif", 85)
    prop._addConstant("lif-invalid-CIf", "lif-has-an-invalid-cif", 40)
    prop._addConstant("lifctx-both-bd-instp-specified", "both-lifctxtobd-and-lifctxtoinstp-were-specified", 69)
    prop._addConstant("lifctx-should-have-same-qospol", "all-the-lifctx-using-same-device-and-same-bd-should-have-same-qospolicy-set.-retrigger-the-graph-after-fixing-misconfig", 149)
    prop._addConstant("lifctx-should-have-same-svcepgpol", "invalid--all-the-lifctx-in-the-same-lif-should-have-same-value-of-prefgrmember.-use-the-same-svcepgpolicy-for-the-same", 139)
    prop._addConstant("local-asn-specified-with-ibgp", "local-asn-specified-with-ibgp-configuration", 106)
    prop._addConstant("managed-type-mismatch-failure", "managed-type-mismatch-on-absnode-and-device-cluster", 93)
    prop._addConstant("mchassis-not-found", "could-not-find-the-chassis-type-associated-with-the-chassis", 98)
    prop._addConstant("mchassis-not-supported", "the-chassis-does-not-support-this-device-type", 99)
    prop._addConstant("mdevmgr-not-found", "could-not-find-the-device-manager-type-associated-with-the-device-manager", 95)
    prop._addConstant("mdevmgr-not-supported", "the-device-manager-does-not-support-this-cluster-type", 96)
    prop._addConstant("missing-abs-function", "no-abstract-function-definition-found", 19)
    prop._addConstant("missing-abs-graph", "no-abs-graph-found", 12)
    prop._addConstant("missing-aconn", "mising-function/terminal-connector", 90)
    prop._addConstant("missing-bd", "no-bd-found", 25)
    prop._addConstant("missing-cdev", "no-device-found-in-cluster.", 31)
    prop._addConstant("missing-cfgrel-target", "missing-cfg-relation-target", 80)
    prop._addConstant("missing-cif", "device-interfaces-does-not-match-cluster.", 37)
    prop._addConstant("missing-cloud-mdev", "cisco-cloudmode-package-is-missing.", 130)
    prop._addConstant("missing-config-params", "graphinst-does-not-have-any-configuration-parameters.-it-should-have-at-least-one-valid-configuration-parameter.", 16)
    prop._addConstant("missing-consumer-terminal", "consumer-terminal-node-is-missing", 109)
    prop._addConstant("missing-function-in-device-package", "no-function-found-in-device-package", 28)
    prop._addConstant("missing-function-node", "service-graph-template-missing-function-node.", 41)
    prop._addConstant("missing-interface", "no-interface-found", 24)
    prop._addConstant("missing-l3ctx", "no-l3-context-found-for-the-graph-connection", 60)
    prop._addConstant("missing-l3instp", "no-l3instp-found", 5)
    prop._addConstant("missing-ldev", "no-cluster-found", 7)
    prop._addConstant("missing-ldev-ctx", "no-device-context-found-for-ldev", 45)
    prop._addConstant("missing-lif", "no-cluster-interface-found", 29)
    prop._addConstant("missing-listener", "absnode-does-not-have-any-listener-configured.", 151)
    prop._addConstant("missing-mandatory-param", "mandatory-param-not-found", 2)
    prop._addConstant("missing-mdev", "no-device-type-found.-ldevvip-must-be-associated-with-an-mdev.", 59)
    prop._addConstant("missing-mparam", "no-parameter-definition-found", 11)
    prop._addConstant("missing-namespace", "no-vlan/vxlan-namespace-found", 27)
    prop._addConstant("missing-provider-terminal", "provider-terminal-node-is-missing", 108)
    prop._addConstant("missing-root-for-rel-target", "missing-root-for-relation-target", 77)
    prop._addConstant("missing-router-id", "router-id-not-found-in-device-context-of-this-node", 86)
    prop._addConstant("missing-terminal", "terminal-node-is-missing-a-terminal", 26)
    prop._addConstant("multiple-default-folders", "multiple-default-folders", 83)
    prop._addConstant("multiple-default-folders-with-same-key", "multiple-default-folders-with-same-key", 78)
    prop._addConstant("multisite-anycast-enabled", "multisite-with-anycast-is-enabled", 138)
    prop._addConstant("multisite-graph-consumer-subnet-not-configured", "consumer-epgs-does-have-subnet-confgiured", 145)
    prop._addConstant("multisite-graph-epg-prov-cons", "l4-l7-service-graph-has-multi-site-epg-that-provides-and-consumes", 142)
    prop._addConstant("multisite-graph-epg-xlate-missing", "translation-entries-for-intenal-epgs-are-missing", 134)
    prop._addConstant("multisite-graph-mix-config-not-supported", "service-graph-does-not-support-mix-of-multi-site-epgs-and-local-epgs", 135)
    prop._addConstant("multisite-graph-provider-subnet-not-configured", "provider-epgs-does-have-have-subnet-confgiured", 136)
    prop._addConstant("no-matching-param-in-pkg", "no-matching-param-in-package", 84)
    prop._addConstant("ok", "ok", 0)
    prop._addConstant("overlapping-route-tags", "overlapping-route-tags-in-multiple-contexts", 74)
    prop._addConstant("overlapping-router-ids", "overlapping-router-ids-in-multiple-contexts", 73)
    prop._addConstant("package-unsupported-protocol", "rslifctxtoinstp-points-to-an-l3extout-which-has-a-protocol-not-supported-by-the-package", 70)
    prop._addConstant("param-cardinality-error", "invalid-param-cardinality", 3)
    prop._addConstant("param-validation-failed", "param-value-is-invalid", 20)
    prop._addConstant("paraminst-validation-failed", "paraminst-has-key-and/or-value,-that-are-not-found-in-mparam", 48)
    prop._addConstant("path-att-mismatch", "path-attachment-of-cif-does-not-match-that-of-l3extout", 67)
    prop._addConstant("pbr-invalid-adjacency", "pbr-node-has-invalid-adjacency-type", 113)
    prop._addConstant("redir-not-enabled-in-node", "routing-mode-is-not-set-to-redirect-in-the-absnode;-but-svcredirectpol-is-attached-to-this-lifctx", 144)
    prop._addConstant("redir-not-exist-with-deny", "redir-and-deny-cant-exist-together.", 146)
    prop._addConstant("relation-path-mismatch", "relation-path-mismatch", 79)
    prop._addConstant("relinst-validation-failed", "cfgrelinst-has-key-and/or-value,-that-are-not-found-in-mparam", 64)
    prop._addConstant("remote-asn-specified-with-ibgp", "remote-asn-specified-with-ibgp-configuration", 107)
    prop._addConstant("resource-allocation-failure", "resource-could-not-be-allocated-during-graph-processing", 18)
    prop._addConstant("rsnode-to-ldev-and-ldevctx-mismatch", "mis-match-between-device-config-between-graph-and-ldevvip", 122)
    prop._addConstant("shared-encap-bd-mismatch", "bds-are-mismatching-on-the-same-shared-encap-device", 89)
    prop._addConstant("static-encap-in-use-by-a-different-bd", "static-encap-is-already-in-use-by-a-different-bd.", 119)
    prop._addConstant("svc-epg-id-alloc-failure", "service-epg-id-allocation-failure", 92)
    prop._addConstant("svc-graph-has-msite-epg", "l4-l7-service-graph-has-multi-site-epg(s)", 123)
    prop._addConstant("tagged-packets-unsupported", "device-package-does-not-support-tagging-packets", 112)
    meta.props.add("issue", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 18631, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "issue"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToHcloudIgw", "Tenant to IGW", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToHcloudSecurityGroup", "Tenant to Security Group", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToVzCPIf", "Tenant to vzCPIf", "cobra.model.vz.CPIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHcloudIgw", "From fv:Ctx to hcloud:Igw", "cobra.model.hcloud.Igw"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHcloudVgw", "From fv:Ctx to hcloud:Vgw", "cobra.model.hcloud.Vgw"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToVzFilter", "From fvTenant to vzFilter", "cobra.model.vz.Filter"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToConsVzBrCP", "From cloud ExtEPg to Consumer Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToProvVzBrCP", "From cloud ExtEPg to Provider Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToConsVzBrCP", "From EPg to Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToProvVzBrCP", "From EPg to Contract", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToVnsAbsGraph", "From fvTenant to vnsAbsGraph", "cobra.model.vns.AbsGraph"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToCloudLB", "From fvTenant to cloudLB", "cobra.model.cloud.LB"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToCloudZone", "From fvTenant to cloudZone", "cobra.model.cloud.Zone"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VnsAbsGraphToHcloudSecurityGroup", "From vnsAbsGraph to hcloudSecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VnsAbsGraphToVzBrCP", "From vnsAbsGraph to vzBrCP", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VnsAbsGraphToCloudLB", "From vnsAbsGraph to cloudLB", "cobra.model.cloud.LB"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudLBToHcloudSecurityGroup", "From cloudLB to hcloudSecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudLBToVnsAbsGraph", "From cloudLB to vnsAbsGraph", "cobra.model.vns.AbsGraph"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudExtEPg", "From fvCtx (VRF) to cloudExtEPg", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToFvCtx", "cloud:ExtEPg to fv:Ctx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToHCloudEndPoint", "cloud:ExtEPg to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToHcloudSecurityGroup", "cloud:ExtEPg to hcloud:SecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudExtEPgToHCloudCtx", "From cloud ExtEPg to VPCs hCloudCtx", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudCtxProfile", "Tenant to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToVzBrCP", "Tenant to vzBrCP", "cobra.model.vz.BrCP"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHcloudCsr", "Tenant to hcloudCsr", "cobra.model.hcloud.Csr"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudExtEPg", "fv:Tenant to cloud:ExtEPg", "cobra.model.cloud.ExtEPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudRegion", "From fvTenant to cloudRegion", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudRegion", "From fvCtx (VRF) to CloudRegion", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHcloudCsr", "From fvCtx (VRF) to hcloudCsr (CSR)", "cobra.model.hcloud.Csr"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToHcloudSecurityGroup", "cloud:EPg to hcloud:SecurityGroup", "cobra.model.hcloud.SecurityGroup"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHcloudRegion", "Tenant to hcloudRegion", "cobra.model.hcloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvTenantToFvCtx", "fvTenant to fvCtx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToFvCtx", "cloud:EPg to fv:Ctx", "cobra.model.fv.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHcloudCtx", "Tenant to Hcloud context", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHCloudEndPoint", "From fvCtx (VRF) to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEpgToHCloudEndPoint", "cloud:EPg to hcloud:EndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToHCloudCtx", "From fvCtx (VRF) to hcloudCtx (VPC)", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudCtxProfile", "From fvCtx (VRF) to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FvCtxToCloudEPg", "From fvCtx (VRF) to cloud EPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CloudEPgToHCloudCtx", "From cloud EPg to VPCs hCloudCtx", "cobra.model.hcloud.Ctx"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("cloudEpgToApp", "cloudEpgToApp", "cobra.model.cloud.App"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToHCloudEndPoint", "Tenant to hcloudEndPoint", "cobra.model.hcloud.EndPoint"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudApp", "Tenant to Application profile", "cobra.model.cloud.App"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("TenantToCloudEPg", "Tenant to cloud EPg", "cobra.model.cloud.EPg"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CtxToRegion", "Vrf to cloud Region", "cobra.model.cloud.Region"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AbsFuncProfContrToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AbsGraphToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AbsNodeToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CIfToNwIf", "Physical Interfaces", "cobra.model.fabric.PathEp"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CDevToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ALIfToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("LDevIfToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("LDevVipToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("NodeInstToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ParamInstToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("FolderInstToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ATgToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("LDevIfToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("LDevVipToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AbsFuncProfContrToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ALDevIfToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AbsGraphToCompVNic", "Virtual Nics", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AbsNodeToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CIfToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ALIfToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("NodeInstToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AbsGraphToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AEPgToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ApToNwIf", "Application Profile to Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("InBToNode", "Node", "cobra.model.fv.Locale"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EPgToNwIf", "Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CtxToNwIf", "Private Network to Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("BDToNwIf", "Bridge Domain to Interface", "cobra.model.nw.If"))

    def __init__(self, parentMoOrDn, issue, markDirty=True, **creationProps):
        namingVals = [issue]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

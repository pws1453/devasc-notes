# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class NATDynPATReq(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.vns.NATDynPATReq")

    meta.moClassName = "vnsNATDynPATReq"
    meta.rnFormat = "FW_NAT_DYNPAT_C-%(ctrct)s-G-%(graph)s-F-%(node)s-NAT-%(natRule)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Normalized Firewall Dynamic PAT configuration."
    meta.writeAccessMask = 0x200000000000601
    meta.readAccessMask = 0x200000000000601
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.tag.Tag")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.tag.Annotation")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.fv.AEPg")

    meta.superClasses.add("cobra.model.vns.OrchReq")
    meta.superClasses.add("cobra.model.vns.NATReq")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Comp")
    meta.superClasses.add("cobra.model.naming.NamedObject")

    meta.rnPrefixes = [
        ('FW_NAT_DYNPAT_C-', True),
        ('-G-', True),
        ('-F-', True),
        ('-NAT-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 38573, PropCategory.REGULAR)
    prop.label = "Annotation. Suggested format orchestrator:value"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cons", "cons", 28260, PropCategory.REGULAR)
    prop.label = "consumer"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("cons", prop)

    prop = PropMeta("str", "ctrct", "ctrct", 27927, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    prop.defaultValue = "any"
    prop.defaultValueStr = "any"
    meta.props.add("ctrct", prop)

    prop = PropMeta("str", "descr", "descr", 5582, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extIntfAddr", "extIntfAddr", 28264, PropCategory.REGULAR)
    prop.label = "external interface address"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("extIntfAddr", prop)

    prop = PropMeta("str", "extIntfName", "extIntfName", 28263, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    prop.defaultValue = "none"
    prop.defaultValueStr = "none"
    meta.props.add("extIntfName", prop)

    prop = PropMeta("str", "extIntfNetmask", "extIntfNetmask", 28265, PropCategory.REGULAR)
    prop.label = "external interface netmask"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("extIntfNetmask", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 40712, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "extRouteNetworkAddr", "extRouteNetworkAddr", 28272, PropCategory.REGULAR)
    prop.label = "Network address of the route for external intf"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("extRouteNetworkAddr", prop)

    prop = PropMeta("str", "extRouteNetworkMask", "extRouteNetworkMask", 28273, PropCategory.REGULAR)
    prop.label = "Network mask of the route for external intf"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("extRouteNetworkMask", prop)

    prop = PropMeta("str", "externalGateway", "externalGateway", 28274, PropCategory.REGULAR)
    prop.label = "Gateway of the route for external intf"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("externalGateway", prop)

    prop = PropMeta("str", "graph", "graph", 27928, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    prop.defaultValue = "any"
    prop.defaultValueStr = "any"
    meta.props.add("graph", prop)

    prop = PropMeta("str", "intIntfAddr", "intIntfAddr", 28267, PropCategory.REGULAR)
    prop.label = "internal interface address"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("intIntfAddr", prop)

    prop = PropMeta("str", "intIntfName", "intIntfName", 28266, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    prop.defaultValue = "none"
    prop.defaultValueStr = "none"
    meta.props.add("intIntfName", prop)

    prop = PropMeta("str", "intIntfNetmask", "intIntfNetmask", 28268, PropCategory.REGULAR)
    prop.label = "internal interface netmask"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("intIntfNetmask", prop)

    prop = PropMeta("str", "intRouteNetworkAddr", "intRouteNetworkAddr", 28269, PropCategory.REGULAR)
    prop.label = "Network address of the route for internal intf"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("intRouteNetworkAddr", prop)

    prop = PropMeta("str", "intRouteNetworkMask", "intRouteNetworkMask", 28270, PropCategory.REGULAR)
    prop.label = "Network mask of the route for internal intf"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("intRouteNetworkMask", prop)

    prop = PropMeta("str", "internalGateway", "internalGateway", 28271, PropCategory.REGULAR)
    prop.label = "Gateway of the route for internal intf"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("internalGateway", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "mappedIp", "mappedIp", 27919, PropCategory.REGULAR)
    prop.label = "Mapped IP address"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("mappedIp", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "natRule", "natRule", 27911, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    prop.defaultValue = "natRule"
    prop.defaultValueStr = "natRule"
    meta.props.add("natRule", prop)

    prop = PropMeta("str", "node", "node", 27926, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    prop.defaultValue = "any"
    prop.defaultValueStr = "any"
    meta.props.add("node", prop)

    prop = PropMeta("str", "order", "order", 28262, PropCategory.REGULAR)
    prop.label = "order"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("order", prop)

    prop = PropMeta("str", "prov", "prov", 28261, PropCategory.REGULAR)
    prop.label = "provider"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("prov", prop)

    prop = PropMeta("str", "realSubnetIp", "realSubnetIp", 27917, PropCategory.REGULAR)
    prop.label = "Real Subnet IP"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("realSubnetIp", prop)

    prop = PropMeta("str", "realSubnetMask", "realSubnetMask", 27918, PropCategory.REGULAR)
    prop.label = "Real Subnet Mask"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("realSubnetMask", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "routeAddedChoice", "routeAddedChoice", 28318, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "noRoute"
    prop._addConstant("noRoute", "no-route-added", 0)
    prop._addConstant("routeExternalOnly", "route-added-to-external-side", 2)
    prop._addConstant("routeInternalExternal", "route-added-to-both-internal-and-external-side", 3)
    prop._addConstant("routeInternalOnly", "route-added-to-internal-side", 1)
    meta.props.add("routeAddedChoice", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "version", "version", 34478, PropCategory.REGULAR)
    prop.label = "Version"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "classic"
    prop._addConstant("classic", "classic", 0)
    prop._addConstant("normalized", "normalized", 1)
    meta.props.add("version", prop)

    meta.namingProps.append(getattr(meta.props, "ctrct"))
    meta.namingProps.append(getattr(meta.props, "graph"))
    meta.namingProps.append(getattr(meta.props, "node"))
    meta.namingProps.append(getattr(meta.props, "natRule"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ATgToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AEPgToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EPgToNwIf", "Interface", "cobra.model.nw.If"))

    def __init__(self, parentMoOrDn, ctrct, graph, node, natRule, markDirty=True, **creationProps):
        namingVals = [ctrct, graph, node, natRule]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

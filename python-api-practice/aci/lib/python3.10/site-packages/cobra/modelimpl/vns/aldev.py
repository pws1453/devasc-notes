# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class ALDev(Mo):
    meta = ClassMeta("cobra.model.vns.ALDev")

    meta.isAbstract = True
    meta.moClassName = "vnsALDev"


    meta.moClassName = "vnsALDev"
    meta.rnFormat = ""
    meta.category = MoCategory.REGULAR
    meta.label = "Logical Device Instance"
    meta.writeAccessMask = 0x4000000000000001
    meta.readAccessMask = 0x700000000000c001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.vns.RtLDevOperInfoToALDev")
    meta.childClasses.add("cobra.model.vns.RtVnsldev")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.vns.RsSvcMgmtEpg")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.vns.RtToLDevForEpToExt")
    meta.childClasses.add("cobra.model.vns.RtFromLDevForIpToEpg")
    meta.childClasses.add("cobra.model.vns.CDev")
    meta.childClasses.add("cobra.model.vns.RtFromLDevForExtToEp")
    meta.childClasses.add("cobra.model.vns.RsMDevAtt")
    meta.childClasses.add("cobra.model.tag.Inst")
    meta.childClasses.add("cobra.model.vns.RtLDevCtxToLDev")
    meta.childClasses.add("cobra.model.vns.LIf")
    meta.childClasses.add("cobra.model.vns.RsALDevToVlanInstP")
    meta.childClasses.add("cobra.model.tag.AliasDelInst")
    meta.childClasses.add("cobra.model.vns.RsALDevToVxlanInstP")
    meta.childClasses.add("cobra.model.vns.RtToLDevForEpgToIp")
    meta.childClasses.add("cobra.model.vns.ConfIssue")
    meta.childClasses.add("cobra.model.vns.RsALDevToDomP")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.vns.RtLDevAtt")
    meta.childClasses.add("cobra.model.tag.ExtMngdInst")
    meta.childClasses.add("cobra.model.tag.AliasInst")
    meta.childClasses.add("cobra.model.vns.RsDevEpg")
    meta.childClasses.add("cobra.model.vns.MgmtLIf")
    meta.childClasses.add("cobra.model.vns.RsALDevToDevMgr")
    meta.childClasses.add("cobra.model.vns.RtNodeToLDev")
    meta.childClasses.add("cobra.model.vns.RtLdevIfToLDev")
    meta.childClasses.add("cobra.model.vns.RsALDevToPhysDomP")

    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RtFromLDevForIpToEpg", "rtdbgacFromLDevForIpToEpg-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RtFromLDevForExtToEp", "rtdbgacFromLDevForExtToEp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RtToLDevForEpToExt", "rtdbgacToLDevForEpToExt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RtToLDevForEpgToIp", "rtdbgacToLDevForEpgToIp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RtLDevOperInfoToALDev", "rtLDevOperInfoToALDev"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RsALDevToVlanInstP", "rsALDevToVlanInstP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RsALDevToVxlanInstP", "rsALDevToVxlanInstP"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RsALDevToPhysDomP", "rsALDevToPhysDomP"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RtLDevCtxToLDev", "rtLDevCtxToLDev-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RsALDevToDevMgr", "rsaLDevToDevMgr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RtLdevIfToLDev", "rtldevIfToLDev-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RtVnsldev", "rtpolVnsldev-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.ConfIssue", "vnsConfIssue-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RsALDevToDomP", "rsALDevToDomP"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RtNodeToLDev", "rtnodeToLDev-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RsSvcMgmtEpg", "rssvcMgmtEpg"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RtLDevAtt", "rtlDevAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RsMDevAtt", "rsmDevAtt"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasDelInst", "aliasdel-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RsDevEpg", "rsdevEpg"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.ExtMngdInst", "extmngd"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.MgmtLIf", "mgmtLIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.CDev", "cDev-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasInst", "alias"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Inst", "tag-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.LIf", "lIf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.fv.Tenant")

    meta.superClasses.add("cobra.model.vns.AL4L7ServiceFault")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.vns.ALDevIf")

    meta.concreteSubClasses.add("cobra.model.vns.LDevVip")
    meta.concreteSubClasses.add("cobra.model.cloud.LB")
    meta.concreteSubClasses.add("cobra.model.cloud.CDevDef")
    meta.concreteSubClasses.add("cobra.model.cloud.LDevDef")

    meta.rnPrefixes = [
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "configInfo", "configInfo", 15520, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("configInfo", prop)

    prop = PropMeta("str", "configIssues", "configIssues", 5179, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "ok"
    prop._addConstant("arp-flood-enabled", "arp-flood-is-enabled-on-the-management-end-point-group", 35184372088832)
    prop._addConstant("cdev-missing-cif", "no-interface-defined.-it-must-have-at-least-one-interface-defined", 17179869184)
    prop._addConstant("cdev-missing-mgmt-ip", "no-mgmt-ip-found-for-cdev", 2097152)
    prop._addConstant("cdev-missing-path-for-interface", "missing-path-for-interface.", 34359738368)
    prop._addConstant("cdev-missing-virtual-info", "virtual-object-info-like-vcenter-name-and-vm-name-is-missing-in-cdev", 4503599627370496)
    prop._addConstant("cif-missing-virtual-info", "virtual-object-like-vnic-name-is-missing-in-cif", 72057594037927936)
    prop._addConstant("context-cardinality-violation-failure", "invalid-cluster-context-cardinality", 128)
    prop._addConstant("devfolder-validation-failed", "devfolder-has-key,-that-is-not-found-in-mfolder", 1125899906842624)
    prop._addConstant("devparam-validation-failed", "devparam-has-key-and/or-value,-that-are-not-found-in-mparam", 2251799813685248)
    prop._addConstant("epp-download-failure", "epp-download-failure", 8)
    prop._addConstant("folderinst-validation-failed", "folderinst-has-key,-that-is-not-found-in-mfolder", 70368744177664)
    prop._addConstant("function-type-mismatch-failure", "invalid-function-type", 256)
    prop._addConstant("gothrough-routing-enabled-both", "both-the-legs-of-go-through-node-has-routing-enabled", 4398046511104)
    prop._addConstant("gothru-same-bd", "both-the-legs-of-go-through-node-are-attached-to-same-bd", 4611686018427387904)
    prop._addConstant("graph-loop-detected", "service-graph-template-configuration-is-invalid.-it-has-a-loop", 2199023255552)
    prop._addConstant("id-allocation-failure", "id-allocation-failure", 32)
    prop._addConstant("inappropriate-devfolder", "illegal-folder-in-configuration.", 2147483648)
    prop._addConstant("insufficient-devctx", "folder-must-have-one-value-for-each-associated-cdev.", 8589934592)
    prop._addConstant("internal-error", "internal-error-occured-during-graph-processing.`", 65536)
    prop._addConstant("invalid-absfunc-profile", "service-graph-template-function-profile-config-is-invalid.", 536870912)
    prop._addConstant("invalid-abstract-graph-config", "invalid-abstract-graph-config", 1)
    prop._addConstant("invalid-abstract-graph-config-param", "invalid-abstract-graph-config-param", 512)
    prop._addConstant("invalid-config", "configuration-of-this-device-contains-errors", 1152921504606846976)
    prop._addConstant("invalid-conn-for-configparam", "config-param-is-using-an-invalid-graph-connector.", 18014398509481984)
    prop._addConstant("invalid-connection", "absgraph-connection-is-invalid.", 36028797018963968)
    prop._addConstant("invalid-devcfg-folder", "devcfg-folder-has-invalid-configuration-parameters.", 2305843009213693952)
    prop._addConstant("invalid-devctx", "device-context-is-not-valid-for-this-folder.", 4294967296)
    prop._addConstant("invalid-filter-referred-by-rsconntoflt", "absgraph-connector-is-pointing-to-an-invalid-filter.", 144115188075855872)
    prop._addConstant("invalid-graphinst", "graphinst-config-is-invalid", 4194304)
    prop._addConstant("invalid-ldev", "invalid-cluster", 16384)
    prop._addConstant("invalid-mfolder", "folderinst-points-to-an-invalid-mfolder", 281474976710656)
    prop._addConstant("invalid-namespace-allocation-mode", "vlaninstp-has-invalid-allocation-mode:-static.-allocation-mode-should-be-dynamic.", 562949953421312)
    prop._addConstant("invalid-param-config", "invalid-param-config", 4096)
    prop._addConstant("invalid-param-scope", "invalid-parameter-scope", 8192)
    prop._addConstant("invalid-relation-target", "relation-target-parameter-could-not-be-resolved.", 9007199254740992)
    prop._addConstant("invalid-rsmconnatt", "invalid-rsmconnatt-mo-which-points-to-connector", 1048576)
    prop._addConstant("invalid-terminal-nodes", "service-graph-template-must-have-two-or-more-terminal-nodes", 8796093022208)
    prop._addConstant("ldevvip-missing-mgmt-ip", "no-mgmt-ip-found-for-ldevvip", 137438953472)
    prop._addConstant("lif-has-invalid-interface-label", "lif-has-an-invalid-miflbl", 274877906944)
    prop._addConstant("lif-invalid-CIf", "lif-has-an-invalid-cif", 549755813888)
    prop._addConstant("missing-abs-function", "no-abstract-function-definition-found", 262144)
    prop._addConstant("missing-abs-graph", "no-abs-graph-found", 2048)
    prop._addConstant("missing-bd", "no-bd-found", 16777216)
    prop._addConstant("missing-cdev", "no-device-found-in-cluster.", 1073741824)
    prop._addConstant("missing-cif", "device-interfaces-does-not-match-cluster.", 68719476736)
    prop._addConstant("missing-config-params", "graphinst-does-not-have-any-configuration-parameters.-it-should-have-at-least-one-valid-configuration-parameter.", 32768)
    prop._addConstant("missing-function-in-device-package", "no-function-found-in-device-package", 134217728)
    prop._addConstant("missing-function-node", "service-graph-template-missing-function-node.", 1099511627776)
    prop._addConstant("missing-interface", "no-interface-found", 8388608)
    prop._addConstant("missing-l3ctx", "no-l3-context-found-for-the-graph-connection", 576460752303423488)
    prop._addConstant("missing-l3instp", "no-l3instp-found", 16)
    prop._addConstant("missing-ldev", "no-cluster-found", 64)
    prop._addConstant("missing-ldev-ctx", "no-device-context-found-for-ldev", 17592186044416)
    prop._addConstant("missing-lif", "no-cluster-interface-found", 268435456)
    prop._addConstant("missing-mandatory-param", "mandatory-param-not-found", 2)
    prop._addConstant("missing-mdev", "no-device-type-found.-ldevvip-must-be-associated-with-an-mdev.", 288230376151711744)
    prop._addConstant("missing-mparam", "no-parameter-definition-found", 1024)
    prop._addConstant("missing-namespace", "no-vlan/vxlan-namespace-found", 67108864)
    prop._addConstant("missing-terminal", "terminal-node-is-missing-a-terminal", 33554432)
    prop._addConstant("ok", "ok", 0)
    prop._addConstant("param-cardinality-error", "invalid-param-cardinality", 4)
    prop._addConstant("param-validation-failed", "param-value-is-invalid", 524288)
    prop._addConstant("paraminst-validation-failed", "paraminst-has-key-and/or-value,-that-are-not-found-in-mparam", 140737488355328)
    prop._addConstant("relinst-validation-failed", "cfgrelinst-has-key-and/or-value,-that-are-not-found-in-mparam", 9223372036854775808)
    prop._addConstant("resource-allocation-failure", "resource-could-not-be-allocated-during-graph-processing", 131072)
    meta.props.add("configIssues", prop)

    prop = PropMeta("str", "configSt", "configSt", 5180, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("applied", "applied", 2)
    prop._addConstant("applying", "applying", 1)
    prop._addConstant("failed-to-apply", "failed-to-apply", 3)
    prop._addConstant("none", "none", 0)
    meta.props.add("configSt", prop)

    prop = PropMeta("str", "contextAware", "contextAware", 5177, PropCategory.REGULAR)
    prop.label = "Tenancy"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "single-Context"
    prop._addConstant("multi-Context", "multiple", 1)
    prop._addConstant("single-Context", "single", 0)
    meta.props.add("contextAware", prop)

    prop = PropMeta("str", "devModel", "devModel", 26138, PropCategory.REGULAR)
    prop.label = "Device Model Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("devModel", prop)

    prop = PropMeta("str", "devtype", "devtype", 5181, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "PHYSICAL"
    prop._addConstant("CLOUD", "cloud", 2)
    prop._addConstant("PHYSICAL", "physical", 0)
    prop._addConstant("VIRTUAL", "virtual", 1)
    meta.props.add("devtype", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "faultCode", "faultCode", 5135, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("faultCode", prop)

    prop = PropMeta("str", "faultMessage", "faultMessage", 5137, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("faultMessage", prop)

    prop = PropMeta("str", "faultSeverity", "faultSeverity", 5136, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop.defaultValue = 3
    prop.defaultValueStr = "minor"
    prop._addConstant("cleared", "cleared", 0)
    prop._addConstant("critical", "critical", 5)
    prop._addConstant("info", "info", 1)
    prop._addConstant("major", "major", 4)
    prop._addConstant("minor", "minor", 3)
    prop._addConstant("warning", "warning", 2)
    meta.props.add("faultSeverity", prop)

    prop = PropMeta("str", "funcType", "funcType", 5176, PropCategory.REGULAR)
    prop.label = "Function Type"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "GoTo"
    prop._addConstant("GoThrough", "gothrough", 2)
    prop._addConstant("GoTo", "goto", 1)
    prop._addConstant("L1", "l1", 4)
    prop._addConstant("L2", "l2", 3)
    prop._addConstant("None", "none", 0)
    meta.props.add("funcType", prop)

    prop = PropMeta("str", "isCopy", "isCopy", 23285, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("isCopy", prop)

    prop = PropMeta("str", "managed", "managed", 20754, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = True
    prop.defaultValueStr = "yes"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("managed", prop)

    prop = PropMeta("str", "mgmtType", "mgmtType", 16157, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "oob"
    prop._addConstant("inband", "inband", 0)
    prop._addConstant("inbandklm", "inbandklm", 1)
    prop._addConstant("oob", "oob", 2)
    meta.props.add("mgmtType", prop)

    prop = PropMeta("str", "mode", "mode", 5178, PropCategory.REGULAR)
    prop.label = "Mode"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "legacy-Mode"
    prop._addConstant("legacy-Mode", "classic", 0)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "name", "name", 5577, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "packageModel", "packageModel", 26362, PropCategory.REGULAR)
    prop.label = "Package Model"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("packageModel", prop)

    prop = PropMeta("str", "promMode", "promMode", 34306, PropCategory.REGULAR)
    prop.label = "Promiscuous Mode"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("promMode", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "svcType", "svcType", 20922, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 3
    prop.defaultValueStr = "OTHERS"
    prop._addConstant("ADC", "adc", 1)
    prop._addConstant("COPY", "copy", 4)
    prop._addConstant("FW", "firewall", 2)
    prop._addConstant("NATIVELB", "nativelb", 5)
    prop._addConstant("OTHERS", "other", 3)
    meta.props.add("svcType", prop)

    prop = PropMeta("str", "trunking", "trunking", 25457, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("trunking", prop)

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ALDevIfToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

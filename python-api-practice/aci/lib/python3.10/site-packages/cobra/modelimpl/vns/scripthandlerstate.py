# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2020 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class ScriptHandlerState(Mo):
    """
    The internal state of the script handler daemon. The script handler daemon handles the configuration of service nodes (firewall, load balancer etc.,) in the fabric. This object is for internal use only. 

    """

    meta = ClassMeta("cobra.model.vns.ScriptHandlerState")

    meta.moClassName = "vnsScriptHandlerState"
    meta.rnFormat = "ten-[%(tnDn)s]-scriptHandlerState"
    meta.category = MoCategory.REGULAR
    meta.label = "Container for Internal State of Scripthandler"
    meta.writeAccessMask = 0x4000000000000001
    meta.readAccessMask = 0x6000000000000003
    meta.isDomainable = True
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.vns.LDevOperInfo")
    meta.childClasses.add("cobra.model.vns.ChassisOperInfo")
    meta.childClasses.add("cobra.model.vns.CDevState")
    meta.childClasses.add("cobra.model.vns.CtrlrEpProxy")
    meta.childClasses.add("cobra.model.aaa.IDomainRef")
    meta.childClasses.add("cobra.model.vns.RsScriptHandlerStateToDomainRef")
    meta.childClasses.add("cobra.model.aaa.DomainRef")
    meta.childClasses.add("cobra.model.vns.CMgmtProxy")
    meta.childClasses.add("cobra.model.vns.ScriptHandlerUserState")

    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RsScriptHandlerStateToDomainRef", "rsScriptHandlerStateToDomainRef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.ScriptHandlerUserState", "scriptHandlerUserState"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.ChassisOperInfo", "chassisOperInfo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.CtrlrEpProxy", "ctrlrEpProxy-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.CMgmtProxy", "cMgmtProxy-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.LDevOperInfo", "LDevOpInf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.CDevState", "cDevState-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.IDomainRef", "idomain-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.DomainRef", "domain-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.pol.Uni")

    meta.rnPrefixes = [
        ('ten-', True),
        ('-scriptHandlerState', False),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14882, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tnDn", "tnDn", 5139, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("tnDn", prop)

    meta.namingProps.append(getattr(meta.props, "tnDn"))
    getattr(meta.props, "tnDn").needDelimiter = True

    def __init__(self, parentMoOrDn, tnDn, markDirty=True, **creationProps):
        namingVals = [tnDn]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
